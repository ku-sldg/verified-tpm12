(caProtocol
 (make_cert_TCC1 0
  (make_cert_TCC1-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmIdContents? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   nil))
 (make_cert_TCC2 0
  (make_cert_TCC2-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmIdContents? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   nil))
 (make_cert 0
  (make_cert-1 nil 3584113590 ("" (grind) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmIdContents? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (sign const-decl "tpmData" key nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil))
   shostak))
 (cert_activate_TCC1 0
  (cert_activate_TCC1-1 nil 3582995407
   ("" (skosimp)
    (("" (lemma keyEncDatStoreAsymkey) (("" (grind) nil nil)) nil))
    nil)
   ((HV formal-nonempty-type-decl nil caProtocol nil)
    (keyEncDatStoreAsymkey formula-decl nil data nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (encStoreAsymkey? const-decl "bool" data nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_activate_TCC2 0
  (cert_activate_TCC2-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil))
   nil))
 (cert_activate_TCC3 0
  (cert_activate_TCC3-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (updateLoc const-decl "mem" memory nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil))
   nil))
 (cert_activate_TCC4 0
  (cert_activate_TCC4-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (updateLoc const-decl "mem" memory nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil))
   nil))
 (cert_activate_TCC5 0
  (cert_activate_TCC5-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_activate_TCC6 0
  (cert_activate_TCC6-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (tpmAuthData? const-decl "bool" data nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_activate_TCC7 0
  (cert_activate_TCC7-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_activate_TCC8 0
  (cert_activate_TCC8-1 nil 3584113583 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_activate 0
  (cert_activate-1 nil 3584113955 ("" (grind) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (CA_certify const-decl "State" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (makeCertActivate_TCC1 0
  (makeCertActivate_TCC1-1 nil 3571591700
   ("" (lemma keyEncDatStoreAsymkey) (("" (grind) nil nil)) nil)
   ((encStoreAsymkey? const-decl "bool" data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmData type-decl nil data nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (keyEncDatStoreAsymkey formula-decl nil data nil)
    (HV formal-nonempty-type-decl nil caProtocol nil))
   nil))
 (makeCertActivate_TCC2 0
  (makeCertActivate_TCC2-1 nil 3571591700 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil))
   nil))
 (makeCertActivate_TCC3 0
  (makeCertActivate_TCC3-1 nil 3582995407
   ("" (skosimp)
    (("" (lemma keyEncDatStoreAsymkey) (("" (grind) nil nil)) nil))
    nil)
   ((HV formal-nonempty-type-decl nil caProtocol nil)
    (keyEncDatStoreAsymkey formula-decl nil data nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (encStoreAsymkey? const-decl "bool" data nil)
    (minus_int_is_int application-judgement "int" integers nil))
   nil))
 (makeCertActivate_TCC4 0
  (makeCertActivate_TCC4-1 nil 3582995407 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmAuthData? const-decl "bool" data nil)
    (minus_int_is_int application-judgement "int" integers nil))
   nil))
 (makeCertActivate_TCC5 0
  (makeCertActivate_TCC5-1 nil 3584113583 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (make_cert_activate_identity_TCC1 0
  (make_cert_activate_identity_TCC1-1 nil 3582995407 ("" (tcc) nil nil)
   ((activateIdentityBlob? const-decl "bool" data nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (KEYSET type-eq-decl nil keydata nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (sign const-decl "tpmData" key nil)
    (encrypt const-decl "tpmData" key nil)
    (checkEncrypt const-decl "bool" key nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (member const-decl "bool" sets nil)
    (private const-decl "privKVAL" key nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil)
    (checkSig const-decl "bool" key nil)
    (inverse const-decl "integer" keydata nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (K type-eq-decl nil tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (updateLoc const-decl "mem" memory nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (PCRINDEX type-eq-decl nil pcr nil) nil
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (CA_certify const-decl "State" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   nil))
 (make_cert_activate_identity_TCC2 0
  (make_cert_activate_identity_TCC2-1 nil 3582995407
   ("" (lemma keyEncDatStoreAsymkey) (("" (grind) nil nil)) nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (KEYSET type-eq-decl nil keydata nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (sign const-decl "tpmData" key nil)
    (encrypt const-decl "tpmData" key nil)
    (checkEncrypt const-decl "bool" key nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (member const-decl "bool" sets nil)
    (private const-decl "privKVAL" key nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (initKeyVal const-decl "K" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (srkKeyVal const-decl "K" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (K type-eq-decl nil tpm nil)
    (certify? const-decl "bool" tpm nil)
    (checkSig const-decl "bool" key nil)
    (inverse const-decl "integer" keydata nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (encStoreAsymkey? const-decl "bool" data nil)
    (idKey adt-accessor-decl "[(OUT_MakeIdentity?) -> (tpmKey?)]" tpm
     nil)
    (OUT_MakeIdentity? adt-recognizer-decl "[tpmAbsOutput -> boolean]"
     tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (keyEncDatStoreAsymkey formula-decl nil data nil)
    (HV formal-nonempty-type-decl nil caProtocol nil))
   nil))
 (make_cert_activate_identity_TCC3 0
  (make_cert_activate_identity_TCC3-1 nil 3582995407
   ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (tpmAuthData? const-decl "bool" data nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (encrypt const-decl "tpmData" key nil)
    (checkEncrypt const-decl "bool" key nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkSig const-decl "bool" key nil)
    (PCRINDEX type-eq-decl nil pcr nil) nil
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil) (K type-eq-decl nil tpm nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (srkKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (make_cert_activate_identity_TCC4 0
  (make_cert_activate_identity_TCC4-1 nil 3584113583
   ("" (grind) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil) nil
    (PCRINDEX type-eq-decl nil pcr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (updateLoc const-decl "mem" memory nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (decrypt const-decl "tpmData" key nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil) (K type-eq-decl nil tpm nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (srkKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (sign const-decl "tpmData" key nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (make_cert_activate_identity 0
  (make_cert_activate_identity-2 "attempt -edit" 3585652112
   ("" (rewrite TPM_MakeIdentity)
    (("" (rewrite makeIdentity?)
      (("" (simplify)
        (("" (rewrite CA_certify)
          (("" (rewrite certify?)
            (("" (rewrite TPM_ActivateIdentity)
              (("" (rewrite activateIdentity?)
                (("" (rewrite makeCertActivate)
                  (("" (rewrite CPU_saveOutput)
                    (("" (simplify)
                      (("" (auto-rewrite-defs)
                        (("" (assert :let-reduce? let-reduce?)
                          (("" (bash)
                            (("" (lift-if)
                              ((""
                                (simplify)
                                ((""
                                  (rewrite outputCom)
                                  ((""
                                    (rewrite makeIdentityOut)
                                    ((""
                                      (simplify)
                                      ((""
                                        (rewrite modifyOutput)
                                        (("1"
                                          (simplify)
                                          (("1"
                                            (auto-rewrite-defs
                                             :always?
                                             t)
                                            (("1"
                                              (bddsimp)
                                              (("1"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("1"
                                                  (replace*)
                                                  (("1"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("1"
                                                      (bddsimp)
                                                      (("1"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("1"
                                                                    (replace*)
                                                                    (("1"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("2"
                                                  (replace*)
                                                  (("2"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("2"
                                                      (bddsimp)
                                                      (("2"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("1"
                                                                    (replace*)
                                                                    (("1"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("3"
                                                  (replace*)
                                                  (("3"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("3"
                                                      (bddsimp)
                                                      (("3"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("3"
                                                          (replace*)
                                                          (("3"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("3"
                                                              (bddsimp)
                                                              (("3"
                                                                (lift-if
                                                                 :updates?
                                                                 t)
                                                                (("3"
                                                                  (replace*)
                                                                  (("3"
                                                                    (assert
                                                                     :let-reduce?
                                                                     t
                                                                     :quant-simp?
                                                                     nil
                                                                     :implicit-typepreds?
                                                                     nil
                                                                     :cases-rewrite?
                                                                     nil)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("4"
                                                  (replace*)
                                                  (("4"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("4"
                                                      (bddsimp)
                                                      (("4"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("4"
                                                          (replace*)
                                                          (("4"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("4"
                                                              (bddsimp)
                                                              (("4"
                                                                (lift-if
                                                                 :updates?
                                                                 t)
                                                                (("4"
                                                                  (replace*)
                                                                  (("4"
                                                                    (assert
                                                                     :let-reduce?
                                                                     t
                                                                     :quant-simp?
                                                                     nil
                                                                     :implicit-typepreds?
                                                                     nil
                                                                     :cases-rewrite?
                                                                     nil)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("5"
                                                  (replace*)
                                                  (("5"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("5"
                                                      (bddsimp)
                                                      (("5"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("6"
                                                  (replace*)
                                                  (("6"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("6"
                                                      (bddsimp)
                                                      (("6"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("7"
                                                  (replace*)
                                                  (("7"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("7"
                                                      (bddsimp)
                                                      (("7"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("7"
                                                          (replace*)
                                                          (("7"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("7"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("8"
                                                  (replace*)
                                                  (("8"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("8"
                                                      (bddsimp)
                                                      (("8"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("8"
                                                          (replace*)
                                                          (("8"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("8"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("9"
                                                  (replace*)
                                                  (("9"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("9"
                                                      (bddsimp)
                                                      (("9"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("10"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("10"
                                                  (replace*)
                                                  (("10"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("10"
                                                      (bddsimp)
                                                      (("10"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("11"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("11"
                                                  (replace*)
                                                  (("11"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("11"
                                                      (bddsimp)
                                                      (("11"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("11"
                                                          (replace*)
                                                          (("11"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("12"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("12"
                                                  (replace*)
                                                  (("12"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("12"
                                                      (bddsimp)
                                                      (("12"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("12"
                                                          (replace*)
                                                          (("12"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("13"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("13"
                                                  (replace*)
                                                  (("13"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("13"
                                                      (bddsimp)
                                                      (("13"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("1"
                                                                    (replace*)
                                                                    (("1"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("14"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("14"
                                                  (replace*)
                                                  (("14"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("14"
                                                      (bddsimp)
                                                      (("14"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                (("1"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("1"
                                                                    (replace*)
                                                                    (("1"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                (("2"
                                                                  (lift-if
                                                                   :updates?
                                                                   t)
                                                                  (("2"
                                                                    (replace*)
                                                                    (("2"
                                                                      (assert
                                                                       :let-reduce?
                                                                       t
                                                                       :quant-simp?
                                                                       nil
                                                                       :implicit-typepreds?
                                                                       nil
                                                                       :cases-rewrite?
                                                                       nil)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("15"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("15"
                                                  (replace*)
                                                  (("15"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("15"
                                                      (bddsimp)
                                                      (("15"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("15"
                                                          (replace*)
                                                          (("15"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("15"
                                                              (bddsimp)
                                                              (("15"
                                                                (lift-if
                                                                 :updates?
                                                                 t)
                                                                (("15"
                                                                  (replace*)
                                                                  (("15"
                                                                    (assert
                                                                     :let-reduce?
                                                                     t
                                                                     :quant-simp?
                                                                     nil
                                                                     :implicit-typepreds?
                                                                     nil
                                                                     :cases-rewrite?
                                                                     nil)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("16"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("16"
                                                  (replace*)
                                                  (("16"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("16"
                                                      (bddsimp)
                                                      (("16"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("16"
                                                          (replace*)
                                                          (("16"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("16"
                                                              (bddsimp)
                                                              (("16"
                                                                (lift-if
                                                                 :updates?
                                                                 t)
                                                                (("16"
                                                                  (replace*)
                                                                  (("16"
                                                                    (assert
                                                                     :let-reduce?
                                                                     t
                                                                     :quant-simp?
                                                                     nil
                                                                     :implicit-typepreds?
                                                                     nil
                                                                     :cases-rewrite?
                                                                     nil)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("17"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("17"
                                                  (replace*)
                                                  (("17"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("17"
                                                      (bddsimp)
                                                      (("17"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("18"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("18"
                                                  (replace*)
                                                  (("18"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("18"
                                                      (bddsimp)
                                                      (("18"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("1"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              (("2"
                                                                (bddsimp)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("19"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("19"
                                                  (replace*)
                                                  (("19"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("19"
                                                      (bddsimp)
                                                      (("19"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("19"
                                                          (replace*)
                                                          (("19"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("19"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("20"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("20"
                                                  (replace*)
                                                  (("20"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("20"
                                                      (bddsimp)
                                                      (("20"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("20"
                                                          (replace*)
                                                          (("20"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            (("20"
                                                              (bddsimp)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("21"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("21"
                                                  (replace*)
                                                  (("21"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("21"
                                                      (bddsimp)
                                                      (("21"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("22"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("22"
                                                  (replace*)
                                                  (("22"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("22"
                                                      (bddsimp)
                                                      (("22"
                                                        (inst?
                                                         :if-match
                                                         t
                                                         :polarity?
                                                         nil)
                                                        (("1"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("1"
                                                            (replace*)
                                                            (("1"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lift-if
                                                           :updates?
                                                           t)
                                                          (("2"
                                                            (replace*)
                                                            (("2"
                                                              (assert
                                                               :let-reduce?
                                                               t
                                                               :quant-simp?
                                                               nil
                                                               :implicit-typepreds?
                                                               nil
                                                               :cases-rewrite?
                                                               nil)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("23"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("23"
                                                  (replace*)
                                                  (("23"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("23"
                                                      (bddsimp)
                                                      (("23"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("23"
                                                          (replace*)
                                                          (("23"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("24"
                                                (assert
                                                 :let-reduce?
                                                 t
                                                 :cases-rewrite?
                                                 nil)
                                                (("24"
                                                  (replace*)
                                                  (("24"
                                                    (assert
                                                     :let-reduce?
                                                     t
                                                     :quant-simp?
                                                     nil
                                                     :implicit-typepreds?
                                                     nil
                                                     :cases-rewrite?
                                                     nil)
                                                    (("24"
                                                      (bddsimp)
                                                      (("24"
                                                        (lift-if
                                                         :updates?
                                                         t)
                                                        (("24"
                                                          (replace*)
                                                          (("24"
                                                            (assert
                                                             :let-reduce?
                                                             t
                                                             :quant-simp?
                                                             nil
                                                             :implicit-typepreds?
                                                             nil
                                                             :cases-rewrite?
                                                             nil)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil)
                                         ("4" (grind) nil nil)
                                         ("5" (grind) nil nil)
                                         ("6" (grind) nil nil)
                                         ("7" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((makeIdentity? const-decl "bool" tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (member const-decl "bool" sets nil)
    (private const-decl "privKVAL" key nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (inverse const-decl "integer" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (>>= const-decl "State" StateMonad nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (tpmData type-decl nil data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (K type-eq-decl nil tpm nil) (KEYSET type-eq-decl nil keydata nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsInput type-decl nil tpm nil)
    (tpmAuthData? const-decl "bool" data nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (authIn type-eq-decl nil data nil)
    (ABS_MakeIdentity? adt-recognizer-decl "[tpmAbsInput -> boolean]"
     tpm nil)
    (ABS_MakeIdentity adt-constructor-decl
     "[[(tpmEncAuth?), (tpmDigest?), (tpmKey?), authIn, authIn] ->
   (ABS_MakeIdentity?)]" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (k!1 skolem-const-decl "(tpmKey?)" caProtocol nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (checkSig const-decl "bool" key nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "nat" caProtocol nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (idBinding adt-accessor-decl "[(OUT_MakeIdentity?) -> (signed?)]"
     tpm nil)
    (CPU_SIGN_ERROR adt-constructor-decl "(CPU_SIGN_ERROR?)"
     ReturnCodes nil)
    (CPU_SIGN_ERROR? adt-recognizer-decl "[cpuReturn -> boolean]"
     ReturnCodes nil)
    (OUT_CPUError adt-constructor-decl "[cpuReturn -> (OUT_CPUError?)]"
     tpm nil)
    (OUT_CPUError? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (cpuReturn type-decl nil ReturnCodes nil)
    (key adt-accessor-decl "[(tpmKey?) -> KVAL]" data nil)
    (privKey adt-accessor-decl "[(tpmStoreAsymkey?) -> privKVAL]" data
     nil)
    (encDat adt-accessor-decl "[(tpmKey?) -> (encrypted?)]" data nil)
    (encData adt-accessor-decl "[(encrypted?) -> tpmData]" data nil)
    (pubDataDigest shared-adt-accessor-decl
     "[{x: tpmData | tpmStoreAsymkey?(x) OR tpmMigrateAsymkey?(x)} ->
   (tpmDigest?)]" data nil)
    (tpmMigrateAsymkey? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (authData adt-accessor-decl "[(tpmEncAuth?) -> int]" data nil)
    (tpmSecret adt-constructor-decl "[int -> (tpmSecret?)]" data nil)
    (tpmStoreAsymkey adt-constructor-decl
     "[[(tpmSecret?), (tpmSecret?), (tpmDigest?), privKVAL] -> (tpmStoreAsymkey?)]"
     data nil)
    (tpmStoreAsymkey? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmSecret? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (encrypted adt-constructor-decl "[[tpmData, KVAL] -> (encrypted?)]"
     data nil)
    (digAtRelease shared-adt-accessor-decl
     "[{x: tpmData | tpmPCRInfoLong?(x) OR tpmPCRInfoShort?(x)} ->
   (tpmCompositeHash?)]" data nil)
    (tpmPCRInfoShort? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmCompositeHash adt-constructor-decl
     "[PCR_COMPOSITE -> (tpmCompositeHash?)]" data nil)
    (PCR_COMPOSITE type-eq-decl nil pcr nil)
    (releasePCRSelect adt-accessor-decl
     "[(tpmPCRInfoLong?) -> PCR_SELECTION[HV]]" data nil)
    (creationPCRSelect adt-accessor-decl
     "[(tpmPCRInfoLong?) -> PCR_SELECTION[HV]]" data nil)
    (PCRInfo shared-adt-accessor-decl
     "[{x: tpmData | tpmKey?(x) OR tpmCertifyInfo?(x) OR tpmCertifyInfo2?(x)} ->
   (tpmPCRInfoLong?)]" data nil)
    (locAtRelease adt-accessor-decl
     "[(tpmPCRInfoLong?) -> LOCALITY[HV]]" data nil)
    (makeIdentityLocality const-decl "LOCALITY" tpm nil)
    (tpmPCRInfoLong adt-constructor-decl
     "[[LOCALITY, LOCALITY, PCR_SELECTION, PCR_SELECTION, (tpmCompositeHash?),
  (tpmCompositeHash?)] ->
   (tpmPCRInfoLong?)]" data nil)
    (tpmCompositeHash? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (algoParms shared-adt-accessor-decl "[{x: tpmData |
          tpmKey?(x) OR
           tpmPubkey?(x) OR tpmCertifyInfo?(x) OR tpmCertifyInfo2?(x)} ->
   KEY_PARMS]" data nil)
    (tpmPubkey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmKey adt-constructor-decl
     "[[KVAL, KEY_USAGE, KEY_FLAGS, AUTH_DATA_USAGE, KEY_PARMS,
  (tpmPCRInfoLong?), (encrypted?)] ->
   (tpmKey?)]" data nil)
    (encrypted? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmPCRInfoLong? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (KEY_PARMS type-eq-decl nil keydata nil)
    (ALGO_ID type-decl nil keydata nil)
    (KVAL type-eq-decl nil keydata nil)
    (tpmIdContents adt-constructor-decl
     "[[(tpmDigest?), (tpmKey?)] -> (tpmIdContents?)]" data nil)
    (tpmIdContents? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (sign const-decl "tpmData" key nil)
    (privKVAL type-eq-decl nil keydata nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (cryptoError? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (TPM_INVALID_KEYUSAGE adt-constructor-decl
     "(TPM_INVALID_KEYUSAGE?)" ReturnCodes nil)
    (TPM_INVALID_KEYUSAGE? adt-recognizer-decl
     "[ReturnCode -> boolean]" ReturnCodes nil)
    (keyFlags shared-adt-accessor-decl
     "[{x: tpmData | tpmKey?(x) OR tpmCertifyInfo?(x) OR tpmCertifyInfo2?(x)} ->
   KEY_FLAGS]" data nil)
    (KEY_FLAGS type-eq-decl nil keydata nil)
    (keyUsage shared-adt-accessor-decl
     "[{x: tpmData | tpmKey?(x) OR tpmCertifyInfo?(x) OR tpmCertifyInfo2?(x)} ->
   KEY_USAGE]" data nil)
    (identity? adt-recognizer-decl "[KEY_USAGE -> boolean]" keydata
     nil)
    (KEY_USAGE type-decl nil keydata nil)
    (TPM_NOTFIPS adt-constructor-decl "(TPM_NOTFIPS?)" ReturnCodes nil)
    (TPM_NOTFIPS? adt-recognizer-decl "[ReturnCode -> boolean]"
     ReturnCodes nil)
    (authDataUsage shared-adt-accessor-decl
     "[{x: tpmData | tpmKey?(x) OR tpmCertifyInfo?(x) OR tpmCertifyInfo2?(x)} ->
   AUTH_DATA_USAGE]" data nil)
    (tpmCertifyInfo2? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (tpmCertifyInfo? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (never? adt-recognizer-decl "[AUTH_DATA_USAGE -> boolean]" authdata
     nil)
    (AUTH_DATA_USAGE type-decl nil authdata nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (TPM_SUCCESS adt-constructor-decl "(TPM_SUCCESS?)" ReturnCodes nil)
    (TPM_SUCCESS? adt-recognizer-decl "[ReturnCode -> boolean]"
     ReturnCodes nil)
    (OUT_Error adt-constructor-decl "[ReturnCode -> (OUT_Error?)]" tpm
     nil)
    (OUT_Error? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (ReturnCode type-decl nil ReturnCodes nil)
    (idKey adt-accessor-decl "[(OUT_MakeIdentity?) -> (tpmKey?)]" tpm
     nil)
    (OUT_MakeIdentity? adt-recognizer-decl "[tpmAbsOutput -> boolean]"
     tpm nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (ABS_certify adt-constructor-decl
     "[[(tpmKey?), (signed?)] -> (ABS_certify?)]" tpm nil)
    (ABS_certify? adt-recognizer-decl "[tpmAbsInput -> boolean]" tpm
     nil)
    (signed? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (encrypt const-decl "tpmData" key nil)
    (checkEncrypt const-decl "bool" key nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (TPM_MakeIdentity const-decl "State" tpm nil))
   shostak)
  (make_cert_activate_identity-1 nil 3584294467
   ("" (bash)
    (("" (rewrite makeCertActivate)
      ((""
        (assert :let-reduce? let-reduce? :quant-simp? nil
                :implicit-typepreds? nil :cases-rewrite? nil)
        (("" (bddsimp) (("1" (grind) nil nil) ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (tpmAuthData? const-decl "bool" data nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (authIn type-eq-decl nil data nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (CA_certify const-decl "State" tpm nil)
    (PCRINDEX type-eq-decl nil pcr nil) nil
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (private const-decl "privKVAL" key nil)
    (member const-decl "bool" sets nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (sign const-decl "tpmData" key nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (srkKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (tpmData type-decl nil data nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (K type-eq-decl nil tpm nil) (KEYSET type-eq-decl nil keydata nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil))
   shostak))
 (cert_and_quote_with_prev_key_TCC1 0
  (cert_and_quote_with_prev_key_TCC1-1 nil 3571660660
   ("" (grind) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (readOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (>> const-decl "State" StateMonad nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_and_quote_with_prev_key_TCC2 0
  (cert_and_quote_with_prev_key_TCC2-1 nil 3584294466
   ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (updateLoc const-decl "mem" memory nil)
    (/= const-decl "boolean" notequal nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (certify? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_and_quote_with_prev_key_TCC3 0
  (cert_and_quote_with_prev_key_TCC3-1 nil 3584294466
   ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (quote? const-decl "bool" tpm nil)
    (srkKeyVal const-decl "K" tpm nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (certify? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   nil))
 (cert_and_quote_with_prev_key 0
  (cert_and_quote_with_prev_key-1 nil 3571591815 ("" (grind) nil nil)
   ((PCRINDEX type-eq-decl nil pcr nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TPM_Quote const-decl "State" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (sign const-decl "tpmData" key nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (member const-decl "bool" sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (readOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (>> const-decl "State" StateMonad nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (checkSig const-decl "bool" key nil)
    (certify? const-decl "bool" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (srkKeyVal const-decl "K" tpm nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (quote? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (ca_protocol_TCC1 0
  (ca_protocol_TCC1-1 nil 3582995407
   ("" (auto-rewrite-defs)
    (("" (bash)
      (("" (replace*)
        (("" (assert :let-reduce? let-reduce?)
          ((""
            (assert :let-reduce? let-reduce? :quant-simp? nil
                    :implicit-typepreds? nil :cases-rewrite? nil)
            (("" (bddsimp)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil) ("6" (grind) nil nil)
               ("7" (grind) nil nil) ("8" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((minus_int_is_int application-judgement "int" integers nil)
    (inverse const-decl "integer" keydata nil)
    (checkSig const-decl "bool" key nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkEncrypt const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (sign const-decl "tpmData" key nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (certOut const-decl "tpmAbsOutput" tpm nil)
    (certState const-decl "tpmAbsState" tpm nil)
    (readOut const-decl "tpmAbsOutput" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (quote? const-decl "bool" tpm nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_Quote const-decl "State" tpm nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (privKey adt-accessor-decl "[(tpmStoreAsymkey?) -> privKVAL]" data
     nil)
    (privKVAL type-eq-decl nil keydata nil)
    (integer nonempty-type-from-decl nil integers nil) nil
    (encDat adt-accessor-decl "[(tpmKey?) -> (encrypted?)]" data nil)
    (encData adt-accessor-decl "[(encrypted?) -> tpmData]" data nil)
    (encrypted? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmStoreAsymkey? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (member const-decl "bool" sets nil)
    (private const-decl "privKVAL" key nil)
    (CA_certify const-decl "State" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (certify? const-decl "bool" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (tpmData type-decl nil data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (K type-eq-decl nil tpm nil) (KEYSET type-eq-decl nil keydata nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (/= const-decl "boolean" notequal nil))
   nil))
 (ca_protocol_TCC2 0
  (ca_protocol_TCC2-1 nil 3584294466 ("" (subtype-tcc) nil nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (quote? const-decl "bool" tpm nil)
    (srkKeyVal const-decl "K" tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (certify? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil))
   nil))
 (ca_protocol 0
  (ca_protocol-1 nil 3584308175
   ("" (lemma make_cert_activate_identity)
    (("" (lemma cert_and_quote_with_prev_key)
      (("" (rewrite makeCertActivate)
        (("" (simplify)
          (("" (skolem!)
            (("" (inst?)
              (("" (inst?)
                (("" (inst?)
                  (("" (simplify)
                    (("" (inst? -2)
                      (("" (inst?)
                        (("" (inst?)
                          (("" (inst? -1)
                            (("" (inst? -1)
                              ((""
                                (inst?)
                                ((""
                                  (inst?)
                                  ((""
                                    (inst?)
                                    ((""
                                      (auto-rewrite-defs)
                                      ((""
                                        (assert
                                         :let-reduce?
                                         let-reduce?)
                                        ((""
                                          (bddsimp)
                                          (("1" (grind) nil nil)
                                           ("2" (grind) nil nil)
                                           ("3" (grind) nil nil)
                                           ("4" (grind) nil nil)
                                           ("5" (grind) nil nil)
                                           ("6" (grind) nil nil)
                                           ("7" (grind) nil nil)
                                           ("8" (grind) nil nil)
                                           ("9" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cert_and_quote_with_prev_key formula-decl nil caProtocol nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (HV formal-nonempty-type-decl nil caProtocol nil)
    (tpmData type-decl nil data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (tpmAuthData? const-decl "bool" data nil)
    (authIn type-eq-decl nil data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (member const-decl "bool" sets nil)
    (updateLoc const-decl "mem" memory nil)
    (private const-decl "privKVAL" key nil)
    (quote? const-decl "bool" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (tpmRestore const-decl "(wellFormed?)" tpm nil)
    (stclearDataInit const-decl "StclearData" StclearData nil)
    (stclearFlagsInit const-decl "StclearFlags" StclearFlags nil)
    (initKeyVal const-decl "K" tpm nil)
    (ekVal const-decl "(tpmKey?)" tpm nil)
    (srkVal const-decl "(tpmKey?)" tpm nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (inverse const-decl "integer" keydata nil)
    (ekKeyVal const-decl "K" tpm nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (srkKeyVal const-decl "K" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (certify? const-decl "bool" tpm nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (CPU_BuildQuoteFromMem const-decl "State" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (afterInit? const-decl "bool" tpm nil)
    (readOut const-decl "tpmAbsOutput" tpm nil)
    (checkSig const-decl "bool" key nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (sign const-decl "tpmData" key nil)
    (encrypt const-decl "tpmData" key nil)
    (checkEncrypt const-decl "bool" key nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (int nonempty-type-eq-decl nil integers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil keydata nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (makeCertActivate const-decl "tpmAbsState" caProtocol nil)
    (make_cert_activate_identity formula-decl nil caProtocol nil))
   shostak)))

