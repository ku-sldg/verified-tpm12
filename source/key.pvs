%% ----
%%
%% Key Theory
%%
%% Author: Perry Alexander
%% Date: Mon Jan 16 15:26:29 CST 2012
%%
%% Description: Basic model of keys, encryption, decryption, and signing
%% 
%% Dependencies:
%%  None
%%
%% Todo: (key - => pending, + => done)
%%
%% ----
key [DVAL,KVAL,HVAL:TYPE+] : THEORY

  BEGIN

  IMPORTING pcr[HVAL];
  IMPORTING ReturnCodes;
  
  AUTHDATA : TYPE = string;
  KEYDATA : TYPE;
  
  KEY : DATATYPE
  BEGIN
    symKey(skey:KVAL) : symKey?
    asymKey(askey:KVAL,asData:KEYDATA) : asymKey?
  END KEY;		

  % This is odd, but it seems to work out okay.
  private(k:(asymKey?)):(asymKey?)

  %% This theorem does NOT say that the private key of a private key is
  %% a key.  It says that everything - signing and encrypting - can be done
  %% in reverse if you swap the keys around.

  double_private: AXIOM FORALL (k:(asymKey?)) : private(private(k))=k;

  equal_private_equal_key: AXIOM FORALL (k0,k1:(asymKey?)) :
    private(k0) = private(k1) <=> k0 = k1;

  %% Lemmas

  CRYPTOSTATUS : DATATYPE
  BEGIN
    clear : clear?
    encrypted(key:(asymKey?),crstat:CRYPTOSTATUS) : encrypted?
    signed(key:(asymKey?),crstat:CRYPTOSTATUS) : signed?
    wrapped(key:(asymKey?),crstat:CRYPTOSTATUS,digest:PCRS) : wrapped?
    sealed(key:(asymKey?),crstat:CRYPTOSTATUS,digest:PCRS) : sealed?
  END CRYPTOSTATUS;

  tpmData : DATATYPE
  BEGIN
    %% Identifyier for naming things
    tpmID(id:string,crs:CRYPTOSTATUS) : tpmID?

    %% Authdata - don't know what it is yet
    tpmAuthData(authdata:AUTHDATA,crs:CRYPTOSTATUS) : tpmAuthData?

    %% Session keys are simply symetric keys
    tpmSessKey(skey:(symKey?),crs:CRYPTOSTATUS) : tpmSessKey?

    %% Assymetric keys used by the TPM - wrapped, signed, encrypted
    tpmKey(key:(asymKey?),crs:CRYPTOSTATUS) : tpmKey?
    %  tpmKey subsumes all asymmetric keys used by the TPM
    %  wrapped key: tpmKey(child,wrapped(public(parent),clear,pcrs))
    %  clear child wrapped by parent bound to PCRs
    %  unwrapped asymmetric key: tpmKey(k,clear)
    %  clear key
    %  encrypted key: tpmKey(k,encrypted(public(j),clear))
    %  clear key encrypted with public j
    %  signed/certified key: tpmKey(k,signed(private(j),clear))
    %  clear key signed by private j

    %% Abitrarily long digest of arbitrary TPM data
    tpmDigest(digest:list[tpmData],crs:CRYPTOSTATUS) : tpmDigest?
    %  tpmDigest is the list of things concatenated and hashed to create the
    %  digest value - #(d0++d1++...++dn).  Note that this digest does not
    %  contain PCRs

    %%  Quote including a PCR digest and nonce.
    tpmQuote(digest:list[PCR],nonce:nat,crs:CRYPTOSTATUS) : tpmQuote?
    %  PCRs are not current TPM data, so the digest is over PCR values.

    %% Certification request sent to Privacy CA
    tpmCertReq(digest:(tpmDigest?),aik:(tpmKey?),crs:CRYPTOSTATUS) : tpmCertReq?
    %  digest should contain CA public key, name, and AIK

    %% tpmIdentity(certEK:tpmKey,certAIK:tpmKey,crs:CRYPTOSTATUS,m:ReturnCode):tpmIdentity?
    %  Implement as tpmAbsOutput

    %% tpmFullQuote(cert:(tpmCertKey?),sml:list[HVAL],quote:(tpmQuote?)):tpmFullQuote?
    %  Implement as tpmAbsOutput
    %  cert is a certified key and should be checked with certKey?
    %  SML is the stored measurement list
    %  Quote is the signed quote generated by the TPM
    %  This is simply a triple represented below
  END tpmData;
  
  %% Basic crypto functions.  xStatus functions operate on status
  %% indicators while x functions operate on tpmData.  Need to account
  %% for private and public keys in this, but the basic process seems to be
  %% there.
  encryptStatus(k:(asymKey?),c:CRYPTOSTATUS) : (encrypted?) =
    encrypted(k,c);

  encrypt(k:(asymKey?),d:tpmData) : tpmData =
    CASES d OF 
      tpmID(id0,crs0) : tpmID(id0,encryptStatus(k,crs0)),
      tpmAuthData(authdata0,crs0) :
        tpmAuthData(authdata0,encryptStatus(k,crs0)),
      tpmSessKey(k0,crs0) :
        tpmSessKey(k0,encryptStatus(k,crs0)),
      tpmKey(k0,crs0) :
        tpmKey(k0,encryptStatus(k,crs0)),
      tpmDigest(digest0,crs0) :
        tpmDigest(digest0,encryptStatus(k,crs0)),
      tpmQuote(n0,p0,crs0) : tpmQuote(n0,p0,encryptStatus(k,crs0)),
      tpmCertReq(digest0,aik0,crs0) :
        tpmCertReq(digest0,aik0,encryptStatus(k,crs0)) 
    ENDCASES;

  decryptStatus(k:(asymKey?),c:(encrypted?)) : CRYPTOSTATUS =
    IF private(key(c)) = k THEN crstat(c) ELSE c ENDIF;

  decrypt(k:(asymKey?),d:tpmData) : tpmData =
    CASES d OF
      tpmID(id0,crs0) : IF encrypted?(crs0)
                           THEN tpmID(id0,decryptStatus(k,crs0))
			   ELSE d	
			   ENDIF,
      tpmAuthData(authdata0,crs0) :
        IF encrypted?(crs0)
        THEN tpmAuthData(authdata0,decryptStatus(k,crs0))
	ELSE d
	ENDIF,
      tpmSessKey(k0,crs0) : IF encrypted?(crs0)
                           THEN tpmSessKey(k0,decryptStatus(k,crs0))
			   ELSE d
			   ENDIF,
      tpmKey(k0,crs0) : IF encrypted?(crs0)
                           THEN tpmKey(k0,decryptStatus(k,crs0))
			   ELSE d
			   ENDIF,
      tpmDigest(digest0,crs0) :
        IF encrypted?(crs0)
        THEN tpmDigest(digest0,decryptStatus(k,crs0))
	ELSE d
	ENDIF,
      tpmQuote(n0,p0,crs0) :
        IF encrypted?(crs0)
        THEN tpmQuote(n0,p0,decryptStatus(k,crs0))
	ELSE d
	ENDIF,
      tpmCertReq(digest0,aik0,crs0) :
        IF encrypted?(crs0)
        THEN tpmCertReq(digest0,aik0,decryptStatus(k,crs0)) 
	ELSE d
	ENDIF
    ENDCASES;

  decrypt_encrypt : THEOREM FORALL (k:(asymKey?),c:CRYPTOSTATUS) : 
    decryptStatus(private(k),encryptStatus(k,c)) = c;

  decrypt_equal_keys: THEOREM FORALL (k0,k1:(asymKey?),b:CRYPTOSTATUS) :
    k0=k1 IMPLIES decryptStatus(private(k1),encryptStatus(k0,b)) = b;

  no_decrypt_unequal_keys: THEOREM FORALL (k0,k1:(asymKey?),b:CRYPTOSTATUS) :
    k0/=k1 IMPLIES decryptStatus(private(k1),encryptStatus(k0,b)) = encryptStatus(k0,b)

  signStatus(k:(asymKey?),c:CRYPTOSTATUS) : (signed?) =
    signed(k,c);

  sign(k:(asymKey?),d:tpmData) : tpmData =
    CASES d OF 
      tpmID(id0,crs0) : tpmID(id0,signStatus(k,crs0)),
      tpmAuthData(authdata0,crs0) :
        tpmAuthData(authdata0,signStatus(k,crs0)),
      tpmSessKey(k0,crs0) :
        tpmSessKey(k0,signStatus(k,crs0)),
      tpmKey(k0,crs0) :
        tpmKey(k0,signStatus(k,crs0)),
      tpmDigest(digest0,crs0) :
        tpmDigest(digest0,signStatus(k,crs0)),
      tpmQuote(n0,p0,crs0) : tpmQuote(n0,p0,signStatus(k,crs0)),
      tpmCertReq(digest0,aik0,crs0) :
        tpmCertReq(digest0,aik0,signStatus(k,crs0)) 
    ENDCASES;

  checkSigStatus(k:(asymKey?),c:CRYPTOSTATUS) : bool =
    CASES c OF
      signed(kq,cq) : private(k) = kq
      ELSE FALSE
    ENDCASES;

  checkSig(k:(asymKey?),d:tpmData) : bool =
    CASES d OF
      tpmID(id0,crs0) : IF signed?(crs0) 
                           THEN checkSigStatus(k,crs0)
			   ELSE FALSE
			   ENDIF,
      tpmAuthData(authdata0,crs0) : IF signed?(crs0) 
                           THEN checkSigStatus(k,crs0)
			   ELSE FALSE
			   ENDIF,
      tpmSessKey(k0,crs0) : IF signed?(crs0)
                           THEN checkSigStatus(k,crs0)
			   ELSE FALSE
			   ENDIF,
      tpmKey(k0,crs0) : IF signed?(crs0)
                           THEN checkSigStatus(k,crs0)
			   ELSE FALSE
			   ENDIF,
      tpmDigest(digest0,crs0) : IF signed?(crs0)
      			           THEN checkSigStatus(k,crs0)
				   ELSE FALSE
				   ENDIF,
      tpmQuote(n0,p0,crs0) : IF signed?(crs0)
      			        THEN checkSigStatus(k,crs0)
				ELSE FALSE
				ENDIF,
      tpmCertReq(digest0,aik0,crs0) : IF signed?(crs0)
      			                 THEN checkSigStatus(k,crs0)
					 ELSE FALSE
					 ENDIF
    ENDCASES;

  check_sign : THEOREM FORALL (k:(asymKey?),c:CRYPTOSTATUS) : 
    checkSigStatus(k,signStatus(private(k),c));
  
  check_sign_keys: THEOREM FORALL (k0,k1:(asymKey?),crs:CRYPTOSTATUS) :
    k0=k1 IFF checkSigStatus(k1,signStatus(private(k0),crs));

  % Predicate subtype for a certified key.  Key may be clear or wrapped.
  certKey?(r:tpmData):bool =
  CASES r OF
    tpmKey(k0,crs0) : CASES crs0 OF
                           signed(k1,csr1) : clear?(csr1) OR wrapped?(csr1)
			   ELSE FALSE
			 ENDCASES
    ELSE FALSE
  ENDCASES;

  %%%% Wrapped Keys

  %% Predicate subtype for a wrapped key.  Wrapped key must be clear.
  wrapKey?(k:tpmData):bool =
  CASES k OF
    tpmKey(k0,crs0) : CASES crs0 OF 
                           wrapped(k1,csr1,p1) : clear?(csr1)
			   ELSE FALSE
			 ENDCASES
    ELSE FALSE
  ENDCASES;

  %% Accessors for wrapped key elements
  childKey(k:(wrapKey?)):(asymKey?) = key(k)

  parentKey(k:(wrapKey?)):(asymKey?) = key(crs(k))

  %% Data structures used in identity establishment.
  %% An identity is a pair of keys signed by the same k.  First key is
  %% the certified AIK and the second is the EK
  identity?(id:[(certKey?),(certKey?)]):bool = 
    LET (aik,ek) = id IN
      EXISTS (k:(asymKey?)) : checkSig(k,aik) AND checkSig(k,ek)

  %% A full quote is a pair one key and a TPM quote both signed by the
  %% same k.
  fullQuote?(q:[(certKey?),(tpmQuote?)]):bool =
    LET (ck,tpmq) = q IN
      EXISTS (k:(asymKey?)) : checkSig(k,ck) AND checkSig(k,tpmq)
        
  %% Check a TPM quote
  checkQuote(q:(tpmQuote?),k:(asymKey?),p:list[PCR],n:nat):bool =
    checkSig(k,q) AND nonce(q)=n AND digest(q)=p;

  %% Check a Full Quote using signed AIK. Check AIK against known
  %% public(CA) and check the TPM quote against AIK and expected values
  checkFullQuote(q:(fullQuote?),ca:(asymKey?),p:list[PCR],n:nat):bool =
    LET (aik,tpmq) = q IN
      checkSig(ca,aik) AND checkQuote(tpmq,key(aik),p,n);

  %%%% Key sets and installation

  %% A keyset is simply a set of asymetric keys
  KEYSET : TYPE = set[(asymKey?)];
 
  %% Check against the root key passed in as rk
  checkKeyRoot(k:(wrapKey?),rk:(asymKey?)):bool = parentKey(k)=rk;
 
  %% Check against the set of installed keys and the root key
  checkKey(k:(asymKey?),srk:(asymKey?),ks:KEYSET):bool =
    member(k,ks) OR k=srk;
 
  %% Add a key to a set of it checks out
  addKey(k:(wrapKey?),srk:(asymKey?),ks:KEYSET,d:PCRS):KEYSET =
    IF checkKey(parentKey(k),srk,ks) AND d=digest(crs(k))
    THEN add(childKey(k),ks)
    ELSE ks
    ENDIF;
 
  %% Remove a key - this is not currently used
  revokeKey(k:(wrapKey?),ks:KEYSET):KEYSET =
    remove(childKey(k),ks);

  child_if_parent: THEOREM FORALL (k:(wrapKey?),rk:(asymKey?),ks:KEYSET,d:PCRS) : 
    IF d=digest(crs(k)) AND (member(parentKey(k),ks) OR parentKey(k)=rk)
       THEN member(childKey(k),addKey(k,rk,ks,d))
       ELSE ks=addKey(k,rk,ks,d)
    ENDIF;

  no_child_if_no_parent: THEOREM FORALL (k:(wrapKey?),rk:(asymKey?),ks:KEYSET) :
    NOT(member(childKey(k),revokeKey(k,ks)));

END key
