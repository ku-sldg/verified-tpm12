%% ----
%%
%% keyData Theory
%%
%% Author: Brigid Halling
%% Date: Fri Jan 11 13:25:11 CST 2013
%%
%% Description: 
%% 
%% Dependencies:
%%  None
%%
%% Todo: (key - => pending, + => done)
%%
%% ----
keydata : THEORY

  BEGIN

  %% Keys are integers.
  KVAL : TYPE = nat;
  privKVAL : TYPE = {r:integer | r <= 0};

  %% The inverse of a key its negation
%  inverse(k:KVAL):privKVAL = -k;
   inverse(k:integer) : integer = -k;

  %% The bad key value is 0
  badkey:KVAL = 0;

  goodkey?(key:KVAL) : bool =
    key/=badkey

  %% TPM_KEY_USAGE							(5.8)
  KEY_USAGE : DATATYPE
  BEGIN
    signing : signing?
    storage : storage?
    identity : identity?
    authChange : authChange?
    bind : bind?
    legacy : legacy?
    migrate : migrate?
  END KEY_USAGE;

  %% TPM_ENC_SCHEME							(5.8.1)
  ENC_SCHEME : DATATYPE							
  BEGIN
    none : none?
    RSAESOAEP_SHA1_MGF1 : SHA1_MGF1?
    RSAESPVCS : PVCS?
    SYM_CTR : SYM_CTR?
    SYM_OFB : SYM_OFB?
  END ENC_SCHEME

  %% TPM_SIG_SCHEME							(5.8.1)
  SIG_SCHEME : DATATYPE							
  BEGIN
    none : none?
    RSASSAPCKS1_SHA1 : SHA1?
    RSASSAPCKS1_DER : DER?
    RSASSAPCKS1_INFO : INFO?
  END SIG_SCHEME
  
  validEncScheme(u:KEY_USAGE,e:ENC_SCHEME) : bool = 
    CASES u OF
      signing    : none?(e),
      storage    : SHA1_MGF1?(e),
      identity   : none?(e),
      authChange : SHA1_MGF1?(e),
      bind 	 : SHA1_MGF1?(e) OR PVCS?(e),
      legacy 	 : SHA1_MGF1?(e) OR PVCS?(e),
      migrate 	 : SHA1_MGF1?(e)
    ENDCASES

  validSigScheme(u:KEY_USAGE,s:SIG_SCHEME) : bool = 
    CASES u OF
      signing    : SHA1?(s) OR DER?(s) OR INFO?(s),
      storage    : none?(s),
      identity   : SHA1?(s),
      authChange : none?(s),
      bind 	 : none?(s),
      legacy 	 : SHA1?(s) OR DER?(s),
      migrate 	 : none?(s)
    ENDCASES

  keyUsage : KEY_USAGE;

  %% Flags for defining key properties					(5.10)
  KEY_FLAGS : TYPE = [#redirection : bool
		     , migratable : bool
		     , isVolatile : bool
		     , pcrIgnoredOnRead : bool
		     , migrateAuthority : bool
  	      	     #];

  keyFlags : KEY_FLAGS;

  %% All key flags false  
  % TODO: look up default?
  keyFlagsF : KEY_FLAGS = (#redirection:= FALSE
     	      		  , migratable := FALSE
	     		  , isVolatile := FALSE
	     		  , pcrIgnoredOnRead := FALSE
	     		  , migrateAuthority := FALSE #)
  
  %% This table defines the types of algorithms that may be supported by the TPM
  %% TPM_ALG_AESxxx is used to represent any of TPM_ALG_AES128, TPM_ALG_AES192, 
  %%  or TPM_ALG_AES256.
  ALGO_ID : DATATYPE	% TPM_ALGORITHM_ID				(4.8)
  BEGIN
    RSA : RSA?		% The RSA algorithm.
    SHA : SHA? 		% The SHA1 algorithm
    HMAC : HMAC? 	% The RFC 2104 HMAC algorithm
    AESxxx : AES?
%     AES128 : AES128? 	% The AES algorithm, key size 128
%     AES192 : AES192? 	% AES, key size 192
%     AES256 : AES256? 	% AES, key size 256
    MGF1 : MGF1?	% The XOR algorithm using MGF1 to create a string the 
    	   		%  size of the encrypted block
    ALG_XOR : ALG_XOR?	% XOR using the rolling nonces
  END ALGO_ID;

  %% TPM_KEY_PARMS							(10.1)
  KEY_PARMS : TYPE = [#algoId : ALGO_ID
		     , encScheme : ENC_SCHEME
		     , sigScheme : SIG_SCHEME
% 		     , parms :% TPM_RSA_KEY_PARMS or TPM_SYMMETRIC_KEY_PATMS 
		       	      % or no content, depending on algoId
  	      	     #];
  keyParmsDef : KEY_PARMS = (#algoId:=RSA
  	      		     ,encScheme:=none
			     ,sigScheme:=none#);

  keyParms : KEY_PARMS;
  	     
  %% Migragion scheme indicator (TPM_MIGRATE_SCHEME)			(4.10)
  migrateScheme : DATATYPE
  BEGIN 
    migrate : migrate?
    rewrap : rewrap?
    maint : maint?
    restrictMigrate : restrictMigrate?
    restrictApprove : restrictApprove?
  END migrateScheme;

END keydata
