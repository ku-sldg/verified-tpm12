   %% Verification of the quote generation process from init through
   %% generation of a appraiser's quote.
   %%
   %% Acronym map:
   %% MLE - Measured Launch Environment
   %% TSS - Trusted Software Stack
   %% CR - Certification Request
   %% CA - Certificate Authority used to sign AIKs
   %%
   %% Memory map:  
   %% 0 -> identity
   %% 1 -> CA cert
   %% 2 -> TPM quote
   %%
   %% Note that the identity is not used in building the final
   %% appraiser's quote
   %% proved Sat Jul 14 11:19:56 CDT 2012
   cert_and_quote_with_prev_key: THEOREM
     FORALL (aik:(asymKey?),
             state:tpmAbsState,
	     n:BLOB,
	     pm:PCRMASK,
	     k:(symKey?),
	     sml:SML,
	     auth:AUTHDATA) :
       LET (out,s) = runState(
                   % Start by initializing the TPM and runnining startup
		   % to generate a clear TPM
                   TPM_Init
		   % Startup initialized resettable PCRs to -1
 		   >> TPM_Startup(TPM_ST_CLEAR)
		   % Call SENTER to start a measured launch
		   % environment. This will result in PCR(0) being
		   % reset to 0.  Only SENTER causes this reset to occur
 		   >> CPU_senter
		   % Call SINIT to measure the MLE and extend PCR(0)
 		   >> CPU_sinit
		   % At this point the MLE would start running.
		   
		   % We've reached a point where PCR(0) is reset and has been
		   % extended with the SINIT hash and the MLE hash.  This
		   % value will indicate to an appraiser that: (i) SENTER
		   % was callewd; (ii) the right SINIT ran; and (iii) the right
		   % MLE was started.
		   
		   % We're ready to run the CA based attestation
		   % protocol.  Assume that the TSS has received a
		   % request for a quote containing PCR(0).

		   % Create a new identity by generating a new AIK value.
		   % The output is a wrapped key and a CR.  The CR contains
		   % a fresh assymetric key used as the new AIK and a fresh
		   % summetric key used as a session key, both signed by the
		   % TPM's EK.
 		   >> TPM_MakeIdentity(aik,k,auth) % identity is output
		   % Save the CR to use at a later time.
		   >>= CPU_saveOutput(0)
		   % Ask an external CA to sign the new AIK by sending it
		   % the CR generated by MakeIdentity.  The CA checks the
		   % signature on the CR and if it is valid, returns an
		   % activation record that includes a session key and the
		   % AIK signed by the CA encrypted with the TPM's EK.
		   >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF
			   outIdentity(x,oic,rc) : CA_certify(oic)
			   ELSE TPM_Noop(a)
			 ENDCASES)
		   % Save the CR for use again later.
	           >>= CPU_saveOutput(1)
		   % At this piont, the TSS holds an activation record
		   % encrypted by an EK.  If it is encrypted with its TPM's EK
		   % it can decrypt the signed AIK and session key.  The
		   % ActivateIdentity command does this.  Note that that is all
		   % ActivateIdentity does.  Nothing is installed and the TPM
		   % state is not modified in any way.
	           >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF
			   outIdentActivation(actc,sk,actek,rc) : TPM_ActivateIdentity(wkey(actc),k)
			   ELSE TPM_Noop(a)
			 ENDCASES)
		   >> CPU_read(0)
		   % Only the correct TPM can decrypt the certificate
		   % and session key.  This is critical as it links the
		   % certificate and session key to the TPM.  Now the TPM
		   % generates a quote signed by the AIK using the Quote
		   % command.
		   >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF 
			   outIdentity(aik,ic,rc) : TPM_Quote(aik,n,pm)
			   ELSE TPM_Noop(a)
			 ENDCASES)
		   >>= CPU_saveOutput(2) % Quote is saved in 2 Now the
		   % TSS is ready to build the appraiser's quote.  It
		   % has the generated TPM quote signed by the AIK
		   % that only the TPM can generate. It has the
		   % certificate from the CA that only the TPM could
		   % decrypt.  It now ships the certificate and the quote
		   % back to the appraiser along with a stored measurement
		   % list
		   >> CPU_BuildQuoteFromMem(2,1,1,sml) % Build the quote
		   )
		   % When the appraiser recieves the quote, it can check the
		   % AIK signature and the AIK cert to ensure that the TPM
		   % quote came from a legitimate TPM associated with the AIK.
		   % However, it cannot collude with other appraisers to
		   % learn more about the target as they all can use different
		   % AIK values.
 		   (state) IN
		   LET wk:wrapKey = (# parentKey:= private(asymKey(srkKeyVal)),
                                       childKey := aik #)
				       IN

         % The protocol works if the object being output is what we believe
	 % shoud be output.
         out = outFullQuote(% Certificate from the CA over the AIK
	                    certBlob(private(asymKey(caKeyVal)),wk),
			    % Stored measurement list (unused)
                               sml,
			    % TPM quote
                               outQuote(%Signed by the AIK
			                private(aik),
					% includes a nonce from the appraiser
                                        n,
					% includes requested PCR values
                                        map
                                        ((pcrsSenter(pcrsReset(pcrAttrib(permData(s))),pcrAttrib(permData(s)))
					% This is the PCR generated by the
					% init, senter, sinit sequence.
                                          WITH [(0)
                                                := extend
                                                   (extend
                                                    (reset, hash(sinit)),
                                                    hash(mle))]),
                                         pm),
					 TPM_SUCCESS),
				TPM_SUCCESS)	    
