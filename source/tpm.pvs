%% ----
%%
%% TPM Theory
%%
%% Author: Perry Alexander
%% Date: Mon Nov 28 01:09:39 CST 2011
%%
%% Description: Basic model of a TPM using a monadic state model
%% 
%% Dependencies:
%%  StateMonad.pvs
%%
%% Todo: (key - => pending, + => done)
%% + Added updates to locality following sinit measurement
%% + Added monotonicity proof for locality changes
%% - Add regressions and theorems for key installation
%% - outBlob should be outKey and only output keys
%% - Add PCR composite to wrapped keys
%% - Add commands for sealing small data to state
%% ----

tpm [ B:TYPE+, % BLOB
      HV:TYPE+,% Hash value
      hash:[B->HV], % Hash function
      K:TYPE+ % Key
     ] : THEORY

  BEGIN

  ASSUMING
    % Assume that different blobs always have different hashes
    unique_hash: ASSUMPTION
      FORALL (b0,b1:B) : hash(b0)=hash(b1) iff b0=b1;
  ENDASSUMING

  IMPORTING pcr[HV];
  IMPORTING key[B,K,HV];

  %% State monad input type.  All inputs are in the form of a command with
  %% parameters.
  tpmInput : DATATYPE
  BEGIN
    decryptKeyCom(d:(encrypt?)) : decryptKeyCom?
    encryptCom(b:BLOB) : encryptCom? % unimplemented
    extendCom(h:HV,n:PCRINDEX) : extendCom?
    installKeyCom(k:(wrapKey?)): installKeyCom? %% RENAME: LoadKey2
    noopCom : noopCom?
    offCom : offCom?
    powerCom : powerCom?
    quoteCom(n:BLOB,pm:PCRMASK) : quoteCom? % partially implemented
    revokeKeyCom(k:(wrapKey?)): revokeKeyCom?
    senterCom : senterCom? % implemented all actions as one senter
    sinitCom : sinitCom? % partially implemented
    unsealCom(d:(seal?),k:(asymKey?)) : unsealCom?   
    takeOwnershipCom : takeOwnershipCom?
    createWrapKeyCom(k,parent:(asymKey?)): createWrapKeyCom?
  END tpmInput;

  %% State monad output type
  tpmAbsOutput : DATATYPE
  BEGIN
    outNothing : outNothing?
    outError(s:string) : outError?
    outNat(n:nat) : outNat?
    outQuote(k:KEY,n:BLOB,pcrs:list[PCR]) : outQuote?
    outBlob(k:BLOB) : outBlob?
    outKey(k:KEY) : outKey?
  END tpmAbsOutput;

  %% sinit blob instance for measurement
  sinit : B;

  %% mle blob instance for measurement
  mle : B;

  %% Locality type - check with spec
  LOCALITY : TYPE = {n:nat | n<=4};

  %% Uninterpreted Key values.
  ekKeyVal : K;
  srkKeyVal : K;

  %% Key definitions that make ek and srk values asymmetric keys.
  ekVal : KEY = asymKey(ekKeyVal);
  srkVal : KEY = asymKey(srkKeyVal);

  %% Abstract TPM State with keys, PCR array and locality
  tpmAbsState : TYPE = [#
                       srk : (asymKey?),
		       ek : (asymKey?),
		       keys : KEYSET,
                       pcrs : PCRS,
		       locality : LOCALITY
		    #];

  IMPORTING StateMonad[tpmAbsOutput,tpmAbsState];

  %% Define some common TPM states and state operations
  
  %% Unknown state
  tpmUnknown : tpmAbsState

  %% Power on state
  tpmPower : tpmAbsState = (#
                         pcrs:=pcrsPower
                         , locality:=4
			 , keys:=emptyset
			 , srk:=inverse(srkVal)
			 , ek:=inverse(ekVal)
			 #);

  %% Standard initial state following reset
  tpmReset : tpmAbsState = (#
                         pcrs:=pcrsReset
			 , locality:=4
			 , keys:=emptyset
			 , srk:=inverse(srkVal)
			 , ek:=inverse(ekVal)
			 #);

  %% Standard operations on TPM state definition above.  All such
  %% functions end with State to indicate they operate on the state
  %% value rather than on the TPM moand.  Note that key set and pcr
  %% manipulation functions are defined externally in key.pvs and
  %% pcr.pvs respectively

  %% Reset PCRs as performed by SENTER.
  pcrsResetSenterState(s:tpmAbsState) : tpmAbsState =
    s WITH [`pcrs := pcrsReset];

  %% Decrease locality value
  changeLocalityState(s:tpmAbsState) : tpmAbsState =
    s WITH [`locality := IF locality(s) > 0
                         THEN locality(s) - 1
			 ELSE 0
			 ENDIF];
  
  %% Extend operation on TPM state
  extendState(s:tpmAbsState,n:PCRINDEX,h:HV) : tpmAbsState =
    s WITH [`pcrs := pcrsExtend(pcrs(s),n,h)];

  %% Install key operation on TPM state.
  %% RENAME: LoadKey2
  installKeyState(s:tpmAbsState,k:(wrapKey?)) : tpmAbsState =
    s WITH [`keys := addKey(k,srk(s),keys(s))];

  %% Revoke key operation on TPM state
  revokeKeyState(s:tpmAbsState,k:(wrapKey?)) : tpmAbsState =
    s WITH [`keys := removeKey(k,keys(s))];

  %% Decrypt a secret encrypted with a wrapped key
  decryptKeyState(s:tpmAbsState,d:(encrypt?)) : BLOB =
    CASES key(d) OF
      wrapKey(w,k) : IF member(inverse(w),add(srk(s),keys(s)))
                        THEN blob(d)
			ELSE nothing ENDIF
      ELSE nothing
    ENDCASES;

  %% Unseal a secret sealed with an asymetric key and PCRs
  unsealState(s:tpmAbsState,d:(seal?),k:(asymKey?)) : BLOB = 
    unseal(d,pcrs(s),k);

  %% What we want to generate with each command is a pair of type
  %% [tpmAbsOut,tpmAbsState].  executeCom generates the the state
  %% from a TPM state and command while the upcoming outputCom
  %% generates the corresponding output.  Thus, to execute any
  %% operation, both executeCom and outputCom must be used

  %% Execute a command on state generating a new state.
  executeCom(s:tpmAbsState,c:tpmInput) : tpmAbsState = 
    CASES c OF
      extendCom(h,n) : extendState(s,n,h),
      installKeyCom(k): installKeyState(s,k), %% RENAME: LoadKey2
      revokeKeyCom(k): revokeKeyState(s,k),
      noopCom : s,
      offCom : tpmUnknown,
      powerCom : tpmPower,
% Old version for demonstration
%      senterCom : changeLocalityState(extendState(tpmReset,0,hash(sinit))),
      senterCom : 
        changeLocalityState(extendState(pcrsResetSenterState(s),0,hash(sinit))),
      sinitCom : changeLocalityState(extendState(s,0,hash(mle))),
      quoteCom(n,pm) : s,
      decryptKeyCom(d) : s,
      unsealCom(d,k) : s,
      takeOwnershipCom : s,
      createWrapKeyCom(k,parent): s
%      encryptCom(b) : encryptState(s,b), % unimplemented
      ELSE s
  ENDCASES;
  
  % Generate a NEW RANDOM key pair.
  createWrapKey(k,parent:(asymKey?)):tpmAbsOutput = 
     outKey(wrapKey(parent,k));

  % NEED TO ENSURE NEW, RANDOM SRK KEY PAIR
  takeOwnership : tpmAbsOutput =
     outKey(srkVal);
  
  % Output PCRs from a state as quote
  quoteOut(s:tpmAbsState,n:BLOB,pm:PCRMASK) : tpmAbsOutput =
    outQuote(inverse(ekVal),n,getPCRs(s`pcrs,pm));

  % Output decypted key
  decryptKeyOut(s:tpmAbsState,d:(encrypt?)) : tpmAbsOutput = 
    outBlob(decryptKeyState(s,d));

  % Output unsealed key
  unsealOut(s:tpmAbsState,d:(seal?),k:(asymKey?)) : tpmAbsOutput = 
    outBlob(unsealState(s,d,k));

  %% Generate output from a command and state
  outputCom(s:tpmAbsState,c:tpmInput) : tpmAbsOutput = 
    CASES c OF
      extendCom(h,n) : outNothing,
      installKeyCom(k): outNothing, %% RENAME: LoadKey2
      revokeKeyCom(k): outNothing,
      noopCom : outNothing,
      offCom : outNothing,
      powerCom : outNothing,
      senterCom : outNothing,
      sinitCom : outNothing,
      quoteCom(n,pm) : quoteOut(s,n,pm),
      decryptKeyCom(d) : decryptKeyOut(s,d),
      unsealCom(d,k) : unsealOut(s,d,k),
      takeOwnershipCom : takeOwnership,
      createWrapKeyCom(k,parent) : createWrapKey(k,parent)
%      encryptCom(b) : encryptState(s,b), % unimplemented
      ELSE outNothing
  ENDCASES;

  %% Monotonicity of locality
  %% Assuming that we're not resetting or powering on, locality goes down
  %% or remains the same
  %% unproven - Wed Jun 13 23:15:36 CDT 2012
  monotonic_locality: THEOREM (FORALL (s:tpmAbsState,c:tpmInput) :
    not(offCom?(c) or powerCom?(c)) =>
      locality(s) >= locality(executeCom(s,c)));

  %% Minor Support Lemmas

  %% Extend is antisymmetric if the hash values used for extension are
  %% not equal.  In this example we use the LET form to define
  %% commands directly with monad functions defined in StateMonad.pvs
  antisymmetryMonad: THEOREM (FORALL (hv0,hv1:HV):
    LET f1:State =
          modify(outNothing,
                 (LAMBDA (s:tpmAbsState):s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv0)])),
      	f2:State =
          modify(outNothing,
                 (LAMBDA (s:tpmAbsState):s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv1)])) IN
      hv0/=hv1 =>
        runState(
          f2 >>= (LAMBDA (x:tpmAbsOutput): f1 >>= unit))(tpmReset)
        /=
        runState(
          f1 >>= (LAMBDA (x:tpmAbsOutput): f2 >>= unit))(tpmReset))

  %% TPM Command Definitions - Note that all commands used by the TPM
  %% have the TPM suffix to distinguish from operations on tpm state.
  %% Commands thus far are defined as state transforming or output
  %% generating.  This does not exclude the eventuality of doing both.

  %% Extend PCR n with hash value h.
  extendTPM(h:HV,n:PCRINDEX):State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,extendCom(h,n))));

  %% Decrease locality value
  changeLocalityTPM : State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):changeLocalityState(s)));

  %% Install key k in a TPM.
  %% RENAME: LoadKey2
  installKeyTPM(k:(wrapKey?)):State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,installKeyCom(k))));

  %% Revoke key k from a TPM.
  revokeKeyTPM(k:(wrapKey?)):State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,revokeKeyCom(k))));

  %% No-op
  noop : [tpmAbsOutput -> State] =
    (LAMBDA (a:tpmAbsOutput): state((LAMBDA(s:tpmAbsState) : (a,s))));

  %% TPM is off
  offTPM : State = put(outNothing,tpmUnknown);

  %% Power up the TPM
  powerTPM : State = put(outNothing,tpmPower);

  %% Reset the TPM by senter call
  senterResetTPM : State = put(outNothing,tpmReset);

  %% Measure sinit by senter call
  senterHashSinitTPM : State = extendTPM(hash(sinit),0);

  %% Call sinit for initial measurements - currently unused
  sinitTPM : State = extendTPM(hash(mle),0);
  
  %% Establish SRK
  takeOwnershipTPM : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,takeOwnershipCom)));

  %% Wrap new key k with parent key
  createWrapKeyTPM(k,parent:(asymKey?)) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,createWrapKeyCom(k,parent))));

		
  %% Generate and output a quote
  quoteTPM(n:BLOB,pm:PCRMASK) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,quoteCom(n,pm))));

  %% Decrypt and output a blob (should be a key)
  decryptTPM(d:(encrypt?)) : State =
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,decryptKeyCom(d))));

  %% Unseal and output a blon (should be binary or data)
  unsealTPM(d:(seal?),k:(asymKey?)) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState): outputCom(s,unsealCom(d,k))));

  %% Extending a reset PCR is antisymmetric if the two values are not equal
  %% Let form used to defined commands for bind.  Will use command forms
  %% later in antisymmetryMonad3
  antisymmetryMonad2: THEOREM (FORALL (hv0,hv1:HV) :
    LET 
        f1:State = extendTPM(hv0,0),
      	f2:State = extendTPM(hv1,0) IN
      (hv0/=hv1 =>
        runState(f2 >> f1 >>= unit)(tpmReset)
        /=
        runState(f1 >> f2 >>= unit)(tpmReset)))


  %% Extending a reset PCR is antisymmetric if the two values are not equal.
  %% No let form - commands appear directly in bind
  %% Theorem is now false when PCRs other than PCR0 are included.
  antisymmetryMonad3: THEOREM (FORALL (hv0,hv1:HV) :
    hv0/=hv1 =>
       runState(
         extendTPM(hv1,0)
	 >> extendTPM(hv0,0)
	 >>= unit)
	 (tpmReset)
       /=
       runState(
         extendTPM(hv0,0)
	 >> extendTPM(hv1,0)
	 >>= unit)
	 (tpmReset))

  %% Prove that senter after power up results in reset PCRs followed by sinit
  %% measurement.
  %% proved - Tue Jun 12 15:31:12 CDT 2012
  resetMonad: THEOREM (FORALL (hv:HV) :
    runState(
      powerTPM
      >> senterResetTPM
      >> senterHashSinitTPM
      >> changeLocalityTPM
      >>= unit)
      (tpmUnknown)
    =
    (outNothing,changeLocalityState(extendState(tpmReset,0,hash(sinit)))))

  %% Prove that quote generation returns the correct PCR
  %% proved - Tue Jun 12 15:33:33 CDT 2012
  quoteMonad: THEOREM (FORALL (hv:HV,n:BLOB) :
    runState(
      powerTPM
      >> senterResetTPM
      >> senterHashSinitTPM
      >> changeLocalityTPM
      >> extendTPM(hv,0)
      >> quoteTPM(n,cons(0,null))
      >>= unit)
      (tpmUnknown)
    =
    (outQuote(inverse(ekVal),n,cons(extend(extend(reset,hash(sinit)),hv),null)),
      changeLocalityState(extendState(extendState(tpmReset,0,hash(sinit)),0,hv))))

 
  %% If nonces don't match, quotes don't match
  %% proved - Fri Jun 22 16:55:16 CDT 2012
  badNonce: THEOREM (FORALL(n1,n2:BLOB, pm:PCRMASK, s:tpmAbsState) :
     n1/=n2 =>
       runState(
         quoteTPM(n1,pm))
	 (s)
       /=
       runState(
	 quoteTPM(n2,pm))
	 (s));
  
  %% Bad Signing Key - Man in the Middle Attack
  %% proved - Fri Jun 22 16:55:56 CDT 2012
  badSigningKey: THEOREM (FORALL(n:BLOB, pm:PCRMASK, k:(asymKey?), s:tpmAbsState) :
     LET(a,s) = runState(quoteTPM(n,pm))(s) IN
     inverse(k) /= inverse(ekVal) 
     =>
     outQuote(inverse(k),n,getPCRs(s`pcrs,pm))
     /=
     a);
     
  %% Output after going through tpm commands is same as grabbing pcrs
  %% proved - Fri Jun 22 16:56:08 CDT 2012
  checkPCRS: THEOREM (FORALL(hv:HV,pm:PCRMASK,n:BLOB) :
    LET (a,s) =
    runState(
      powerTPM
      >> senterResetTPM
      >> senterHashSinitTPM
      >> changeLocalityTPM
      >> extendTPM(hv,0)
      >> quoteTPM(n,pm)
      >>= unit)
      (tpmUnknown) IN
    a
    =
    outQuote(inverse(ekVal),n,map(s`pcrs,pm)));

  %% Checks three parts of outQuote (key, nonce, pcrs)
  %checkQuote: THEOREM(badNonce AND badSigningKey AND checkPCRS);

  %% Prove that skipping SENTER is detectable by showing the quote following
  %% a command differs when SENTER is excluded.
  %% proved - Tue Jun 12 15:34:24 CDT 2012
  noSenter: THEOREM (FORALL (hv:HV,n:BLOB,pcrMask:PCRMASK) :
    runState(
      powerTPM
      >> senterResetTPM
      >> senterHashSinitTPM
      >> changeLocalityTPM
      >> extendTPM(hv,0)
      >> quoteTPM(n,pcrMask)
      >>= unit)
      (tpmUnknown)
    /=
    runState(
      powerTPM
      >> extendTPM(hv,0)
      >> quoteTPM(n,pcrMask)
      >>= unit)
      (tpmUnknown))

  %% Decryption will fail if no keys are installed
  %% Now proved.  Problem was with grind, not pvs generally.
  %% proved - Tue Jun 12 15:36:53 CDT 2012  
  decrypt_key_fail: THEOREM FORALL (k:(wrapKey?),b:BLOB) :
    LET (out,s) = runState(
                  powerTPM
                  >> senterResetTPM
                  >> senterHashSinitTPM
		  >> changeLocalityTPM
                  >> decryptTPM(encrypt(k,b))
                  >>= unit)
                  (tpmUnknown) IN
      inverse(wrappingKey(k))/=inverse(srkVal) => out = outBlob(nothing);

  %% Key chaining theorem.  If k is wrapped with srk and encrypts b,
  %% b will decrypt if k is installed
  %% proved - Tue Jun 12 15:37:29 CDT 2012
  decrypt_key_success: THEOREM FORALL (k:(wrapKey?),b:BLOB):
    LET (out,s) = runState(
                  powerTPM
	  	  >> senterResetTPM
		  >> senterHashSinitTPM
		  >> changeLocalityTPM
		  >> installKeyTPM(k)
		  >> decryptTPM(encrypt(k,b))
		  >>= unit)
		  (tpmPower) IN
        inverse(wrappingKey(k))=srk(s) => out=outBlob(b)


  % A key is installed if it is wrapped with SRK
  % proved - Tue Jun 12 15:37:56 CDT 2012
  install_key_success: THEOREM FORALL (k:(wrapKey?)) :
    LET (out,s) = runState(
                  powerTPM
		  >> senterResetTPM
		  >> senterHashSinitTPM
		  >> changeLocalityTPM
		  >> installKeyTPM(k)
		  >>= unit)
		  (tpmUnknown) IN
      wrappingKey(k) = srk(s) => member(key(k),keys(s));

  %% A key is installed if it is wrapped with an installed key
  %% proved - Tue Jun 12 15:38:22 CDT 2012
  install_key_success2: THEOREM FORALL (j,k:(wrapKey?)) :
    LET (out,s) = runState(
                  powerTPM
		  >> senterResetTPM
		  >> senterHashSinitTPM
		  >> changeLocalityTPM
		  >> installKeyTPM(k)
		  >> installKeyTPM(j)
		  >>= unit)
		  (tpmUnknown) IN
      wrappingKey(j) = key(k) AND wrappingKey(k) = srk(s) =>
         member(key(j),keys(s));

 %% Unseal a secret successfully - This is not right yet 
 unseal_secret_success: THEOREM FORALL (j,k:(asymKey?),hv:HV,b:BLOB,pcrs:PCRS) :
    LET (out,s) = runState(
                  powerTPM
		  >> senterResetTPM
		  >> senterHashSinitTPM
		  >> changeLocalityTPM
		  >> extendTPM(hv,0)
		  >> unsealTPM(seal(k,pcrs,b),j)
		  >>= unit)
		  (tpmUnknown) IN
      IF j=inverse(k) AND pcrs=pcrs(s)
         THEN out=outBlob(b)
         ELSE out=outBlob(nothing)
      ENDIF;

  %% Regression theorems for testing only

  test1a: THEOREM (unit(outNat(3))) =
           (state(LAMBDA (s:tpmAbsState) : (outNat(3),s)))
  test1b: THEOREM (runState(unit(outNat(3)))) =
           (runState(state(LAMBDA (s:tpmAbsState) : (outNat(3),s))))
  test1c: THEOREM (runState(unit(outNat(3))))(tpmReset) =
           (runState(state(LAMBDA (s:tpmAbsState) : (outNat(3),s))))(tpmReset)

  test2:  THEOREM (runState(unit(outNat(3))))(tpmReset) = (outNat(3),tpmReset)

  % Random hash values
  hv0, hv1, hv2 : HV

  % reset followed by a copy
  test3: THEOREM
    runState(modify(outNat(0),(LAMBDA (s:tpmAbsState):s)) >>= unit)(tpmReset)
    =
    (outNat(0),tpmReset)

  % reset followed by two copies
  test4: THEOREM
    runState(
       modify(outNat(0),(LAMBDA (s:tpmAbsState):s)) >>=
       (LAMBDA (x:tpmAbsOutput):
         modify(outNat(1),(LAMBDA (s:tpmAbsState):s)) >>= unit))(tpmReset)
     =
    (outNat(1),tpmReset)

END tpm
