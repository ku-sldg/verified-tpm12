%% ----
%%
%% TPM Theory
%%
%% Author: Perry Alexander, Brigid Halling
%% Date: Mon Nov 28 01:09:39 CST 2011
%%
%% Description: Basic model of a TPM using a monadic state model
%% 
%% Dependencies:
%%  StateMonad.pvs
%%  key.pvs
%%  pcr.pvs
%%
%% Todo: (key - => pending, + => done)
%% ----

%% Standard Error IDs
%%  0 = "Bad identity record"
%%  1 = "Bad input key"
%%  2 = "bad session key"
%%  4 = "bad quote parts"
%%  5 = "Clear Disabled"

tpm [ B:TYPE+ % BLOB
      , HV:TYPE+ % Hash value
      , hash:[B->HV] % Hash function
%      , K:TYPE+ % Key
     ] : THEORY

  BEGIN

  ASSUMING
    % Assume that different blobs always have different hashes
    unique_hash: ASSUMPTION
      FORALL (b0,b1:B) : hash(b0)=hash(b1) iff b0=b1;
  ENDASSUMING

  K : TYPE = nat;
  
  cpuReturn : DATATYPE
  BEGIN
    CPU_ERROR : CPU_ERROR? 
    CPU_SUCCESS : CPU_SUCCESS?
    CPU_DECRYPT_ERROR : CPU_DECRYPT_ERROR? 
    CPU_QUOTE_ERROR : CPU_QUOTE_ERROR?
  END cpuReturn;
  
  IMPORTING pcr[HV];
  IMPORTING key[B,HV];
  IMPORTING ReturnCodes;
  IMPORTING startupData[B,K,HV];
  IMPORTING PermanentFlags;
  IMPORTING PermanentData[B,K,HV];
  IMPORTING StanyFlags;

  %% State monad output type
  tpmAbsOutput : DATATYPE
  BEGIN
    OUT_Nothing : OUT_Nothing?
    OUT_Error(m:ReturnCode) : OUT_Error?
    OUT_CPUError(m:cpuReturn) : OUT_CPUError?
    OUT_Data_Bind(outData:(tpmBoundData?),m:cpuReturn) : OUT_Data_Bind?
    OUT_Certify(data:(tpmAsymCAContents?),m:cpuReturn) : OUT_Certify?
    OUT_FullQuote(quote:(tpmQuote?),idBind:(tpmIdContents?),m:cpuReturn) 
    	: OUT_FullQuote?
  %% Admin Startup and State (3)
    OUT_Init(m:ReturnCode) : OUT_Init?
    OUT_SaveState(m:ReturnCode) : OUT_SaveState?
    OUT_Startup(m:ReturnCode) : OUT_Startup?
  %% Admin Ownership (6)
    OUT_TakeOwnership(srkPub:(tpmKey?),m:ReturnCode) : OUT_TakeOwnership?
    OUT_OwnerClear(m:ReturnCode) : OUT_OwnerClear? 
    OUT_ForceClear(m:ReturnCode) : OUT_ForceClear? 
    OUT_DisableOwnerClear(m:ReturnCode) : OUT_DisableOwnerClear? 
    OUT_DisableForceClear(m:ReturnCode) : OUT_DisableForceClear? 
  %% Storage Functions (10)
    OUT_Seal(sealedData:(tpmStoredData?),m:ReturnCode) : OUT_Seal?
    OUT_Unseal(secret:tpmData,m:ReturnCode) : OUT_Unseal?
    OUT_UnBind(outData:tpmData,m:ReturnCode) : OUT_UnBind?
    OUT_CreateWrapKey(wrappedKey:(tpmKey?),m:ReturnCode) : OUT_CreateWrapKey?
    OUT_LoadKey2(inkeyHandle:(tpmKey?),m:ReturnCode) : OUT_LoadKey2?
  %% Migration (11)
    OUT_CreateMigrationBlob(random:int,outData:tpmData,m:ReturnCode) : OUT_CreateMigrationBlob?
    OUT_ConvertMigrationBlob(outData:tpmData,m:ReturnCode) : OUT_ConvertMigrationBlob?
    OUT_AuthorizeMigrationKey(outData:(tpmMigKeyAuth?),m:ReturnCode) : OUT_AuthorizeMigrationKey?
    OUT_MigrateKey(outData:tpmData,m:ReturnCode) : OUT_MigrateKey?
  %% Cryptographic Functions (13)
    OUT_Sign(sig:tpmData,m:ReturnCode) : OUT_Sign?
  %% Endorsement Key Handling (14)
    OUT_CreateEndorsementKeyPair(pubEk:(tpmKey?),checksum:(tpmDigest?),m:ReturnCode) 
    		: OUT_CreateEndorsementKeyPair?
    OUT_CreateRevocableEK(pubEK:(tpmPubkey?),checksum:(tpmDigest?),outputEKreset:(tpmNonce?),
		m:ReturnCode) : OUT_CreateRevocableEK?
    OUT_RevokeTrust(m:ReturnCode) : OUT_RevokeTrust?
    OUT_ReadPubek(pubEk:(tpmKey?),checksum:(tpmDigest?),m:ReturnCode) : OUT_ReadPubek?
  %% Identity Creation and Activation (15)
    OUT_MakeIdentity(idKey:(tpmKey?),idBinding:(tpmIdContents?),m:ReturnCode) 
		: OUT_MakeIdentity?
   OUT_ActivateIdentity(symmKey:(tpmSessKey?),m:ReturnCode) : OUT_ActivateIdentity?
  %% Integrity Collection and Reporting (16)
    OUT_Extend(outDigest:PCR,m:ReturnCode) : OUT_Extend?
    OUT_PCRRead(outDigest:PCR,m:ReturnCode) : OUT_PCRRead?
    OUT_Quote(pcrData:list[PCR],sig:(tpmQuote?),m:ReturnCode) : OUT_Quote?
  END tpmAbsOutput;

  IMPORTING memory[tpmAbsOutput,OUT_Nothing];
  

  %% State monad input type.  All inputs are in the form of a command with
  %% parameters.
  tpmAbsInput : DATATYPE
  BEGIN
  %% Admin Startup and State commands (3)
    ABS_Reset : ABS_Reset? %unimplemented
    ABS_Init : ABS_Init? 
    ABS_SaveState : ABS_SaveState?
    ABS_Startup(startupType : TPM_STARTUP_TYPE) : ABS_Startup?
  %% Admin Ownership Commands (6)
    ABS_TakeOwnership(encOwnerAuth,encSrkAuth:(tpmAuthData?),srkParams:(tpmKey?)) : ABS_TakeOwnership?
    ABS_OwnerClear : ABS_OwnerClear? 
    ABS_ForceClear : ABS_ForceClear? 
    ABS_DisableOwnerClear : ABS_DisableOwnerClear? 
    ABS_DisableForceClear : ABS_DisableForceClear? 
  %% Protected Storage Commands (10)
    ABS_Seal(k:(tpmKey?),encAuth:(tpmAuthData?),pcrInfo:PCR_INFO_LONG,inData:tpmData) : ABS_Seal?
    ABS_Unseal(parent:(tpmKey?),inData:(tpmStoredData?)) : ABS_Unseal?   
    ABS_UnBind(key:(tpmKey?),inData:(tpmBoundData?)) : ABS_UnBind?
    ABS_CreateWrapKey(parentk,keyInfo:(tpmKey?)): ABS_CreateWrapKey?  
    ABS_LoadKey2(parent:(tpmKey?),inKey:(tpmKey?)): ABS_LoadKey2? 
  %% Migration Commands (11)
    ABS_CreateMigrationBlob(p:(tpmKey?),m:migrateScheme,migKeyAuth:(tpmMigKeyAuth?),
			    encData:tpmData) : ABS_CreateMigrationBlob?
    ABS_ConvertMigrationBlob(parent:(tpmKey?),inData:tpmData,random:int) : ABS_ConvertMigrationBlob?
    ABS_AuthorizeMigrationKey(migKey:(tpmKey?),migScheme:(tpmMigScheme?)) : ABS_AuthorizeMigrationKey?
    ABS_MigrateKey(maKey,pubKey:(tpmKey?),inData:tpmData) : ABS_MigrateKey?
  %% Cryptographic Commands (13)
    ABS_Sign(keyHandle:(tpmKey?),areaToSign:tpmData) : ABS_Sign?
  %% Endorsement Key Handling (14)
    ABS_CreateEndorsementKeyPair(antiReplay:(tpmNonce?),keyInfo:(tpmKey?)) : ABS_CreateEndorsementKeyPair?
    ABS_CreateRevocableEK(antiReplay:(tpmNonce?),keyInfo:(tpmKey?),genReset:bool,
	inputEKreset:(tpmNonce?)) : ABS_CreateRevocableEK?
    ABS_RevokeTrust(EKReset:(tpmNonce?)) : ABS_RevokeTrust?
    ABS_ReadPubek(n:(tpmNonce?)) : ABS_ReadPubek?
  %% Identity Creation and Activation (15)
    ABS_MakeIdentity(CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) : ABS_MakeIdentity?
    ABS_ActivateIdentity(aik:(tpmKey?),blob:(activateIdentityBlob?)) : ABS_ActivateIdentity?
  %% Integrity Collection and Reporting (16)
%     ABS_Extend(pcrNum:PCRINDEX,inDigest:(tpmDigest?)) : ABS_Extend?
    ABS_Extend(pcrNum:PCRINDEX,d:HV) : ABS_Extend?
    ABS_PCRRead(ind:PCRINDEX) : ABS_PCRRead?
    ABS_Quote(aik:(tpmKey?),nonce:(tpmNonce?),pm:PCR_SELECTION) : ABS_Quote?
  %% Changing AuthData (17)
    ABS_ChangeAuth : ABS_ChangeAuth?
  %% Software Commands
    ABS_senter : ABS_senter? % implemented all actions as one senter
    ABS_sinit : ABS_sinit? % partially implemented
    ABS_save(i:nat,v:tpmAbsOutput) : ABS_save?
    ABS_read(i:nat) : ABS_read?
    ABS_Data_Bind(k:(tpmKey?),d:tpmData) : ABS_Data_Bind?
  %% CA Commands
   ABS_certify(aik:(tpmKey?),certReq:(tpmIdContents?)) : ABS_certify?
  %% Invented, imaginary Commands
    noopCom : noopCom?
  END tpmAbsInput;

  %% sinit blob instance for measurement
  sinit : B;

  %% mle blob instance for measurement
  mle : B;

  %% Initial key values not generated by TPM
  ekKeyVal : K = 1;
  srkKeyVal : K = 2;
  caKeyVal : K = 3;

  %% Initial key count value for initializing TPM
  initKeyVal : K = 100;

  %% Key definitions that make ek and srk values asymmetric keys.
  %% TODO: I just made this stuff up... needs to be checked and changed
  ekVal : (tpmKey?) = tpmKey(ekKeyVal,storage,keyFlagsF,pcrInfoLongDefault,1,clear);
  srkVal : (tpmKey?) = tpmKey(srkKeyVal,storage,keyFlagsF,pcrInfoLongDefault,1,clear);
  caVal : (tpmKey?) = tpmKey(caKeyVal,storage,keyFlagsF,pcrInfoLongDefault,1,clear); % Certificate Authority key

  %% Abstract TPM State with keys, PCR array and locality
  tpmAbsState : TYPE = [#
  	      	       restore : restoreStateData,
                       memory : mem,
%                        postInit : bool,
                       srk : (tpmKey?),
		       ek : (tpmKey?),
		       keyGenCnt : K,
		       keys : KEYSET,
                       pcrs : PCRVALUES,%list[PCR],
		       locality : LOCALITY,
		       permFlags : PermFlags,
		       permData : PermData,
		       stanyFlags : StanyFlags,
		       disableForceClear : bool
		    #];

  %% Well formedness condition for abstract states.  Currently unused, but we
  %% should show that forall commands, well formed input generates well formed
  %% output.

  wellFormed?(s:tpmAbsState):bool = wellFormedRestore?(restore(s));

  IMPORTING StateMonad[tpmAbsOutput,tpmAbsState];

  %% Define some common TPM states and state operations
  
  %% Unknown state
  tpmUnknown : tpmAbsState

  %% Power on state after init is raised by hardware.
  tpmPostInit : (wellFormed?) = (#
                         pcrs:=pcrsPower
                         , locality:=4
			 , keys:=emptyset
			 , srk:=privateKey(srkVal)
			 , ek:=privateKey(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=initSaveData
			 , permFlags:=permFlagsInit
			 , permData:=permDataInit
			 , stanyFlags:=stanyFlagsInit WITH [`postInitialize:=TRUE]
			 , disableForceClear:=FALSE
			 #);

  %% Standard initial state following startup command with the TPM_ST_CLEAR
  %% option set.  Note that this should be checked against the spec before
  %% asserting goodness.
  tpmStartup : (wellFormed?) = (#
                         pcrs:=pcrsReset(allResetAccess)
			 , locality:=4
			 , keys:=emptyset
			 , srk:=privateKey(srkVal)
			 , ek:=privateKey(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=initSaveData
			 , permFlags:=permFlagsInit
			 , permData:=permDataInit
			 , stanyFlags:=stanyFlagsInit WITH [`postInitialize:=FALSE]
			 , disableForceClear:=FALSE
			 #);

  %% Generate a new state from restore data.  Basically this is a clear
  %% restart with pcrs, keys, and pcr flags coming from the restore
  %% data.  Note that this function assumes valid data and will behave
  %% badly otherwise
  tpmRestore(rd:(wellFormedRestore?)) : (wellFormed?) = (#
                         pcrs:=pcrs(rd)
			 , locality:=4
			 , keys:=keys(rd)
			 , srk:=privateKey(srkVal)
			 , ek:=privateKey(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=rd
			 , permFlags:=permFlags(rd)
			 , permData:=permData(rd)
			 , stanyFlags:=stanyFlags(rd)
			 , disableForceClear:=FALSE
                         #)

  %% Predicate to determine if startup has occured.  Used as types
  %% (afterInit?) is the set of states occuring immediately after TPM_Init
  %% (afterStartup?) is the set of states occuring immediately after
  %% TPM_Startup
  afterInit?(s:tpmAbsState):bool = postInitialize(stanyFlags(s));
  afterStartup?(s:tpmAbsState):bool = NOT postInitialize(stanyFlags(s));

  clear(s:tpmAbsState) : tpmAbsState = %not fully implemented
    s WITH [`keys:=emptyset
      	   %,`srk:= 
      	   ,`permFlags(ownership):=TRUE
	   ,`permFlags(operator):=FALSE
	   ,`permFlags(maintenanceDone):=FALSE
	   %,`permFlags(disable):=TRUE %default value
	   %,`permFlags(deactivated):=TRUE %default value
	   ,`permFlags(readPubek):=TRUE %default value
	   ,`permFlags(disableOwnerClear):=FALSE %default value
	   %,`permFlags(disableFullDALogicInfo):=FALSE %default value
	   %,`permFlags(allowMaintenance):=FALSE %default value
	   %,`permFlags(readSRKPub):=FALSE %default value
      	   ]



  %% Standard operations on TPM state definition above.  All such
  %% functions end with State to indicate they operate on the state
  %% value rather than on the TPM monad.  Note that key set and pcr
  %% manipulation functions are defined externally in key.pvs and
  %% pcr.pvs respectively

  %% Reset PCRs as performed by SENTER.
  pcrsResetSenterState(s:tpmAbsState) : tpmAbsState =
    s WITH [`pcrs := pcrsSenter(pcrs(s),pcrAttrib(permData(s)))];

  %% Decrease locality value
  changeLocalityState(s:tpmAbsState) : tpmAbsState =
    s WITH [`locality := IF locality(s) > 0
                         THEN locality(s) - 1
			 ELSE 0
			 ENDIF];
    
  %% Generate a new key
  genKeyState(s:tpmAbsState) : tpmAbsState =
    s WITH [`keyGenCnt := keyGenCnt(s)+1];

  saveState(s:tpmAbsState) : tpmAbsState =
    s WITH [`restore:=saveState(keys(s)
                                , ek(s)
		      		, srk(s)
				, keyGenCnt(s)
		      		, pcrs(s)
		      		, permFlags(s)
		      		, permData(s)
				, stanyFlags(s)
		      		)];
  takeOwnership?(s:tpmAbsState,ownerAuth,srkAuth:(tpmAuthData?),srkParams:(tpmKey?)) : bool =
    ownership(permFlags(s)) AND goodkey?(key(ek(s)))
      AND storage?(keyUsage(srkParams)) AND not(migratable(keyFlags(srkParams)))

  takeOwnershipState(s:tpmAbsState,ownerAuth,srkAuth:(tpmAuthData?),srkParams:(tpmKey?)) : tpmAbsState =
   IF ownership(permFlags(s)) AND goodkey?(key(ek(s))) 
      AND storage?(keyUsage(srkParams)) AND not(migratable(keyFlags(srkParams)))
   THEN s WITH [`srk:=srkParams
   	       ,`permFlags(readPubek):=FALSE]
   ELSE s
   ENDIF;

  % NEED TO ENSURE NEW, RANDOM SRK KEY PAIR
  % srkParams should = srkVal
  takeOwnershipOut(s:tpmAbsState,ownerA,srkA:(tpmAuthData?),srkParams:(tpmKey?)) : tpmAbsOutput =
  %% TODO: Lots of flags for this one.
    IF ownership(permFlags(s))
      THEN IF goodkey?(key(ek(s)))
      	     THEN IF storage?(keyUsage(srkParams)) AND migratable(keyFlags(srkParams))=FALSE
	     	  THEN OUT_TakeOwnership(srkParams,TPM_SUCCESS)
		  ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
		  ENDIF
	     ELSE OUT_Error(TPM_NO_ENDORSEMENT)
	   ENDIF
      ELSE OUT_Error(TPM_INSTALL_DISABLED)
    ENDIF

  ownerClearState(s:tpmAbsState) : tpmAbsState =
    IF %auth = private(srk(s)) AND 
       disableOwnerClear(permFlags(s))=FALSE
    THEN clear(s)
    ELSE s
    ENDIF

  ownerClearOut(s:tpmAbsState) : tpmAbsOutput = 
%     IF auth = private(srk(s))
%     THEN 
    	 IF disableOwnerClear(permFlags(s))
      	 THEN OUT_Error(TPM_CLEAR_DISABLED)
	 ELSE OUT_OwnerClear(TPM_SUCCESS)
	 ENDIF
%     ELSE OUT_Error(TPM_AUTHFAIL)
%     ENDIF

  forceClearState(s:tpmAbsState) : tpmAbsState = 
    IF s`disableForceClear=FALSE
    THEN clear(s)
    ELSE s
    ENDIF
  
  forceClearOut(s:tpmAbsState) : tpmAbsOutput =
    IF disableForceClear(s)
    THEN OUT_Error(TPM_CLEAR_DISABLED)
    ELSE OUT_ForceClear(TPM_SUCCESS)
    ENDIF

  disableOwnerClearState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`permFlags(disableOwnerClear):=TRUE];

  disableOwnerClearOut(s:tpmAbsState) : tpmAbsOutput = 
    OUT_DisableOwnerClear(TPM_SUCCESS)

  disableForceClearState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`disableForceClear:=TRUE];

  disableForceClearOut(s:tpmAbsState) : tpmAbsOutput = 
    OUT_DisableForceClear(TPM_SUCCESS)

  seal?(s:tpmAbsState,k:(tpmKey?),enc:(tpmAuthData?),pcr:PCR_INFO_LONG,data:tpmData) : bool =
    storage?(keyUsage(k)) AND not(migratable(keyFlags(k))) %AND DECRYPTED
    
  % Output secret sealed with asymmetric key 
  sealOut(s:tpmAbsState,kH:(tpmKey?),enc:(tpmAuthData?),pcr:PCR_INFO_LONG,inData:tpmData) : tpmAbsOutput = 
    IF storage?(keyUsage(kH)) AND not(migratable(keyFlags(kH)))
    THEN LET sealInfo:PCR_INFO_LONG = 
    	     	pcr WITH [`digestAtCreation:=compositeHash(localityAtCreation(pcr),pcrs(s)),
		    	  `localityAtCreation:=localityModifier(stanyFlags(s))] IN
    	 LET S1=tpmStoredData(sealInfo,null,clear) IN
    	 LET S2=tpmSealedData(enc,
			      tpmProof(permData(s)),
			      tpmDigest(cons(S1,null),clear),%digest of params of S1 excluding encData
    	     		      inData) IN
	LET S3=tpmStoredData(sealInfo,S2,encrypted(key(kH),clear))
    	     IN OUT_Seal(S3,TPM_SUCCESS)
    ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF

  unseal?(s:tpmAbsState,parent:(tpmKey?),inData:(tpmStoredData?)) : bool = 
    storage?(keyUsage(parent)) and migratable(keyFlags(parent))=FALSE %AND DECRYPTED

  % Output secret unsealed with an asymmetric key and PCRs 
%   unsealOut(s:tpmAbsState,parent:(tpmKey?),inData:(tpmStoredData?)) : tpmAbsOutput = 
%     IF storage?(keyUsage(parent)) and migratable(keyFlags(parent))=FALSE
%     THEN LET d1 = decrypt(key(parent),inData) IN %encrypted?(crs(inData)) AND key(crs(inData))=key(parent)
%     	 IF crs(d1)=clear 
% 	 THEN LET d2 = encData(inData) IN
% 	      IF tpmProof(d2) = tpmProof(permData(s)) AND 
% 	      	 tpmDigest(cons(sealInfo(inData),null),clear) = storedDigest(d2)
% 	      THEN OUT_Unseal(data(d2),TPM_SUCCESS) %% TODO: way more going on here... not sure what.
% 	      ELSE OUT_Error(TPM_NOTSEALED_BLOB)
% 	      ENDIF
% 	 ELSE OUT_Error(TPM_DECRYPT_ERROR)
% 	 ENDIF
%     ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
%     ENDIF
  
  unBind?(k:(tpmKey?),d:(tpmBoundData?)) : bool =
    legacy?(keyUsage(k)) OR bind?(keyUsage(k))
  
  % Output decrypted key
  unBindOut(s:tpmAbsState,k:(tpmKey?),d:(tpmBoundData?)) : tpmAbsOutput =
    IF unBind?(k,d)
    THEN LET d1=decrypt(private(k),d) IN 
    	 IF crs(d1)=clear
 	 THEN OUT_UnBind(payloadData(d1),TPM_SUCCESS)
	 ELSE OUT_CPUError(CPU_DECRYPT_ERROR) % TODO: May be incorrect
	 ENDIF
    ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF  	    

  createWrapKey?(parentHandle,keyInfo:(tpmKey?)):bool = 
    storage?(keyUsage(parentHandle)) AND
    IF migratable(keyFlags(parentHandle)) AND not(migratable(keyFlags(keyInfo)))
    THEN FALSE
    ELSE IF identity?(keyUsage(keyInfo)) OR authChange?(keyUsage(keyInfo))
    	 THEN FALSE
	 ELSE not(migrateAuthority(keyFlags(keyInfo)))
	 ENDIF
    ENDIF;

  createWrapKeyState(s:tpmAbsState,p,keyInfo:(tpmKey?)) : tpmAbsState = 
    IF createWrapKey?(p,keyInfo)
    THEN genKeyState(s)
    ELSE s
    ENDIF;

  % Generate a NEW RANDOM key pair.
  createWrapKeyOut(s:tpmAbsState,parentHandle,keyInfo:(tpmKey?)) : tpmAbsOutput = 
      IF createWrapKey?(parentHandle,keyInfo)
      THEN OUT_CreateWrapKey(tpmKey(keyGenCnt(s),
				    keyUsage(keyInfo),
				    keyFlags(keyInfo),
				    PCRInfo(keyInfo),
				    key(parentHandle),
				    clear),
			     TPM_SUCCESS)
      ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
      ENDIF
    
  loadKey2?(p:(tpmKey?),k:(tpmKey?)):bool=
    storage?(keyUsage(p))
      AND key(p)=wrappingKey(k) AND
      	      LET usage = keyUsage(k) IN
	     	  CASES usage OF
		  identity: IF migratable(keyFlags(k))=FALSE
		  	    THEN TRUE
			    ELSE FALSE
			    ENDIF,
		  authChange: FALSE
		  ELSE TRUE
		  ENDCASES

  %% Install key operation on TPM state.
%   loadKey2State(s:tpmAbsState,parentHandle:(tpmKey?),k:(tpmKey?)) : tpmAbsState =
%     IF storage?(keyUsage(parentHandle)) AND key(parentHandle)=wrappingKey(k)
%     THEN CASES keyUsage(k) OF
%     	 identity: IF migratable(keyFlags(k))=FALSE
% 	 	   THEN s with [`keys:=loadKey(k,srk(s),keys(s),pcrs(s))]
% 		   ELSE s
% 		   ENDIF,
%     	 authChange: s
% 	 ELSE s with [`keys:=loadKey(k,srk(s),keys(s),pcrs(s))]
% 	 ENDCASES
%     ELSE s
%     ENDIF;
% % TODO:  Do we need to check this?
% %       IF validateLoadKey2?(s,parentHandle,k)
% %       THEN s with [`keys:=addKey(k,srk(s),keys(s),pcrs(s))]
% %       ELSE s
% %       ENDIF

  loadKey2Out(parentHandle:(tpmKey?),inKey:(tpmKey?)) : tpmAbsOutput = 
    IF storage?(keyUsage(parentHandle))
    THEN IF key(parentHandle)=wrappingKey(inKey)
    	 THEN LET usage = keyUsage(inKey) IN
	      CASES usage OF
	      identity: IF migratable(keyFlags(inKey))=FALSE
	      		THEN OUT_LoadKey2(inKey,TPM_SUCCESS)
			ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
			ENDIF,
	      authChange: OUT_Error(TPM_INVALID_KEYUSAGE)
	      ELSE OUT_LoadKey2(inKey,TPM_SUCCESS)
	      ENDCASES
    	 ELSE OUT_CPUError(CPU_DECRYPT_ERROR) %% TODO: Might not be right.
	 ENDIF
    ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF;

  checkMigKeyAuth?(s:tpmAbsState,a:(tpmMigKeyAuth?)):bool =
    digest(a)=tpmDigest(cons(key(a),cons(scheme(a),cons(tpmAuthData(tpmProof(permData(s)),clear),
				null))),clear)
  
  createMigBlob?(s:tpmAbsState,p:(tpmKey?),m:migrateScheme,a:(tpmMigKeyAuth?),e:tpmData) : bool = 
    storage?(keyUsage(p)) AND
    CASES e OF
      tpmKey(k,ku,kf,pcr,wk,crs) : 
	   key(p)=k AND checkMigKeyAuth?(s,a) AND
	   	CASES m OF
      	   	  migrate : FALSE, %TODO : not correct!
		  rewrap  : TRUE
		ENDCASES	
      ELSE FALSE
    ENDCASES

  createMigBlobOut(s:tpmAbsState,parent:(tpmKey?),migType:migrateScheme,
			 migKeyAuth:(tpmMigKeyAuth?),encData:tpmData) : tpmAbsOutput =
    IF storage?(keyUsage(parent))
    THEN CASES encData OF
    	 tpmKey(k,ku,kf,pcr,wk,crs) : 
	   IF key(parent)=k
	   THEN IF checkMigKeyAuth?(s,migKeyAuth)
	   	THEN CASES migType OF
      	   	     migrate : OUT_Error(TPM_INSTALL_DISABLED),%TODO: not correct!
		     rewrap  : OUT_CreateMigrationBlob(0,
					tpmKey(k,ku,kf,pcr,key(key(migKeyAuth)),clear),
					TPM_SUCCESS)
		     %ELSE OUT_Error(TPM_BAD_PARAMETER)
		     ENDCASES	
	      	ELSE OUT_Error(TPM_RESOURCES) % TODO: not at all correct.
	      	ENDIF
    	   ELSE OUT_CPUError(CPU_DECRYPT_ERROR) % TODO: not correct?
	   ENDIF
	 ELSE OUT_Error(TPM_WRONG_ENTITYTYPE) % TODO: not correct?
    	 ENDCASES
    ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF

%   convertMigBlobOut(s:tpmAbsState,parent:(tpmKey?),inData:tpmData,rand:int) : tpmAbsOutput =
%     IF storage?(keyUsage(parent))
%     THEN LET d1=decrypt(key(parent),inData) IN
% %     	 LET o1=d1 xor rand IN
% % 	 OAEP decoding o1?
% % 	 LET m1=tpmMigrateAsymkey(usageAuth:(tpmSecret?),pubDataDigest:(tpmDigest?),partPrivKey:(tpmKey?)),seed?,pHash?
% 	 LET k1=tpmStorePrivkey(partPrivKey(m1)) IN
% % 	 IF payload(m1)=TPM_PT_MIGRATE 
% % 	 THEN 
% 	 LET d2=tpmStoreAsymkey(%TPM_PT_ASYM,
% 				usageAuth(m1),
% 				pHash,
% 				pubDataDigest(m1),
% 				k1,	
% 				encrypted(parent,clear)) IN
% 	OUT_CreateMigrationBlob(d2,TPM_SUCCESS)
% %	ELSE I don't know what
%     ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
%     ENDIF
    
  authorizeMigKeyOut(s:tpmAbsState,migKey:(tpmKey?),migScheme:(tpmMigScheme?)) : tpmAbsOutput = 
    OUT_AuthorizeMigrationKey(
	tpmMigKeyAuth(migKey,
		      migScheme,
		      tpmDigest(cons(migKey,%cons(migScheme,cons(tpmProof(permData(s)),null))))),
						null),clear),
		      clear),
	TPM_SUCCESS);

  %% Decrypts the input packet (coming from TPM_CreateMigrationBlob) and then 
  %% re-encrypts it with the input public key. The output would then be sent to 
  %% TPM_ConvertMigrationBlob on the target TPM.
  migrateKeyOut(s:tpmAbsState,maKey,pubKey:(tpmKey?),inData:tpmData) : tpmAbsOutput =
    IF migrate?(keyUsage(maKey))
      %The TPM decripts inData and re-encrypts it using pubKey
      %THEN outBlob(encryptBlob(pubKey,blob(inData)),TPM_SUCCESS)
      THEN OUT_MigrateKey(encrypt(key(pubKey),decrypt(key(maKey),inData)),TPM_SUCCESS)
      ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF

  sign?(s:tpmAbsState,key:(tpmKey?),areaToSign:tpmData) : bool = 
    signing?(keyUsage(key)) OR legacy?(keyUsage(key))

  % Sign a blob if signing key isn't aik
  % TODO: add signature scheme (makes this more complicated)
  signOut(s:tpmAbsState,key:(tpmKey?),areaToSign:tpmData) : tpmAbsOutput=
    IF signing?(keyUsage(key)) OR legacy?(keyUsage(key)) 
    THEN OUT_Sign(sign(key(key),areaToSign),TPM_SUCCESS)
    ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF

  createEndorsementKeyPairState(s:tpmAbsState,antiReplay:(tpmNonce?),keyInfo:(tpmKey?)) : tpmAbsState = 
    IF goodkey?(key(ek(s)))
    THEN s
    ELSE s WITH [`ek := privateKey(keyInfo)
    	   	,`permFlags(CEKPUsed) := TRUE
		,`permFlags(enableRevokeEK) := FALSE]
    ENDIF;

  % If ek doesn't exist, create a new ek from keyInfo
  createEndorsementKeyPairOut(s:tpmAbsState,antiReplay:(tpmNonce?),keyInfo:(tpmKey?)) : tpmAbsOutput = 
    IF goodkey?(key(ek(s)))
      THEN OUT_Error(TPM_DISABLED_CMD) 
      ELSE OUT_CreateEndorsementKeyPair(keyInfo,tpmDigest(cons(keyInfo,cons(antiReplay,null)),clear),TPM_SUCCESS)
    ENDIF;

  createRevEKState(s:tpmAbsState,antiReplay:(tpmNonce?),keyInfo:(tpmKey?),
	generateReset:bool,inputEKreset:(tpmNonce?)) : tpmAbsState =
    IF goodkey?(key(ek(s)))
    THEN s
    ELSE LET s1=createEndorsementKeyPairState(s,antiReplay,keyInfo) IN
    	 s1 WITH [`permFlags(enableRevokeEK):=TRUE,
	     	  `permData(ekReset):= 
		  	%IF generateReset 
			%THEN next(TPM_RNG)
			%ELSE 
			inputEKreset
			%ENDIF
	     	 ]
    ENDIF;
    
  createRevEKOut(s:tpmAbsState,antiReplay:(tpmNonce?),keyInfo:(tpmKey?),
	generateReset:bool,inputEKreset:(tpmNonce?)) : tpmAbsOutput = 
    IF goodkey?(key(ek(s)))
    THEN OUT_Error(TPM_DISABLED_CMD) 
    ELSE LET checksum=tpmDigest(cons(keyInfo,cons(antiReplay,null)),clear),
    	     pubEK=tpmPubkey(tpmStorePubkey(key(keyInfo))) IN 
	 OUT_CreateRevocableEK(pubEK,
			       checksum,
			       %IF generateReset...
			       inputEKreset,
			       TPM_SUCCESS)
    ENDIF;

  revokeTrust?(s:tpmAbsState,ekReset:(tpmNonce?)) : bool =
    enableRevokeEK(permFlags(s)) AND ekReset(permData(s))=ekReset

  revokeTrustState(s:tpmAbsState,ekReset:(tpmNonce?)) : tpmAbsState = 
    IF enableRevokeEK(permFlags(s)) AND ekReset(permData(s)) = ekReset
    THEN %ensure physical presence is being asserted
    	 LET s1 = clear(s) IN
	 s1 WITH [`permFlags(nvLocked):=FALSE,
% 	      	  `permData(tpmDAASeed):=,
% 		  `permData(daaProof):=,
% 		  `permData(daaBlobKey):=,
		  `ek:=tpmKey(badkey,storage,keyFlagsF,
			      pcrInfoLongDefault,badkey,clear)]
    ELSE s
    ENDIF;

  revokeTrustOut(s:tpmAbsState,ekReset:(tpmNonce?)) : tpmAbsOutput =
    IF enableRevokeEK(permFlags(s)) 
    THEN IF ekReset(permData(s)) = ekReset 
    	 THEN %ensure physical presence is being asserted
      	      OUT_RevokeTrust(TPM_SUCCESS) 
	 ELSE OUT_Error(TPM_AUTHFAIL) 
	 ENDIF
    ELSE OUT_Error(TPM_PERMANENTEK) 
    ENDIF;

  readPubek?(s:tpmAbsState,n:(tpmNonce?)) : bool = 
    readPubek(permFlags(s)) AND goodkey?(key(ek(s)))

  readPubekOut(s:tpmAbsState,n:(tpmNonce?)) : tpmAbsOutput =
    IF readPubek(permFlags(s))
      THEN IF goodkey?(key(ek(s)))
      	     THEN LET pubEK=publicKey(ek(s)) IN
	     	  OUT_ReadPubek(pubEK,
				tpmDigest(cons(pubEK,cons(n,null)),clear),
				TPM_SUCCESS)
	     ELSE OUT_Error(TPM_NO_ENDORSEMENT)
	   ENDIF
      ELSE OUT_Error(TPM_DISABLED_CMD)
    ENDIF

  makeIdentity?(s:tpmAbsState,CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) : bool =
	identity?(keyUsage(idKeyParams)) AND migratable(keyFlags(idKeyParams))=FALSE

  makeIdentityState(s:tpmAbsState,CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) : tpmAbsState = 
    IF identity?(keyUsage(idKeyParams)) AND migratable(keyFlags(idKeyParams))=FALSE
    THEN genKeyState(s)
    ELSE s
    ENDIF;

  % Output a newly generated AIK.  Note that a simulates the new aik.
%   makeIdentityOut(s:tpmAbsState,CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) : tpmAbsOutput =
%     IF identity?(keyUsage(idKeyParams)) AND migratable(keyFlags(idKeyParams))=FALSE
%       THEN LET idKey:(tpmKey?) = tpmKey(keyGenCnt(s),
% 					 keyUsage(idKeyParams),
% 					 keyFlags(idKeyParams),
% 					 pcrs(s),
% 					 wrappingKey(srk(s)),
% 					 clear) IN 
% 		LET idBinding = tpmIdContents(CADigest,
% 					      idKey,
% 					      signed(private(idKey),clear)) IN
%     		    OUT_MakeIdentity(idKey,idBinding,TPM_SUCCESS)
%       ELSE OUT_Error(TPM_INVALID_KEYUSAGE)
%     ENDIF;

  % Use an AIK. 
  % TODO: Should this be loaded?
%   activateIdentityState(s:tpmAbsState,a:(wrapKey?),b:BLOB) : tpmAbsState =
%     loadKey2State(s,srk(s),a);

  % Retrieve a key if a can be installed
  % The command assumes the availability of the private key associated with the identity.
  % The command will verify the association between the keys during the process.
  % The command will decrypt the input blob and extract the session key and verify the
  % connection between the public and private keys. p 157
  activateIdentityOut(s:tpmAbsState,idKey:(tpmKey?),b:(activateIdentityBlob?)) : tpmAbsOutput =
    IF identity?(keyUsage(idKey)) 
    THEN LET h1=%tpmDigest(cons(tpmPubkey(key(idKey)),null),clear),
    	        tpmDigest(cons(tpmPubkey(tpmStorePubkey(key(idKey))),null),clear),
    	     b1=decrypt(private(ekVal),b) IN
	 CASES b1 OF
	 tpmAsymCAContents(k,d,crs) : 
	 	IF h1=d and not(encrypted?(crs))
		THEN OUT_ActivateIdentity(k,TPM_SUCCESS)
		ELSE OUT_Error(TPM_BAD_PARAMETER)
		ENDIF,
	 tpmEKBlob(blob,crs) :
	 	CASES blob OF
	 	tpmEKBlobActivate(k,d,p) : 
			IF h1=d and not(encrypted?(crs))
			THEN %do some pcr check
			     OUT_ActivateIdentity(k,TPM_SUCCESS)
			ELSE OUT_Error(TPM_BAD_PARAMETER)
			ENDIF
		ELSE OUT_Error(TPM_BAD_TYPE)
		ENDCASES
	 ELSE OUT_Error(TPM_BAD_PARAMETER) % TODO: may be incorrect
	 ENDCASES
    ELSE OUT_Error(TPM_BAD_PARAMETER)
    ENDIF;
        
  %% Extend operation on TPM state
  extendState(s:tpmAbsState,pcrNum:PCRINDEX,inDigest:HV) : tpmAbsState =
    s WITH [`pcrs := pcrsExtend(pcrs(s),pcrNum,inDigest)];

  extendOut(s:tpmAbsState,pcrNum:PCRINDEX,inDigest:HV) : tpmAbsOutput = 
  %% TODO: will pcrNum not be allowed to be > 23 because of defn of PCRINDEX? 
  %% Should throw TPM_BADINDEX if outside range
    IF disable(permFlags(s)) %OR deactivated(STCLEAR_FLAGS)
    THEN OUT_Extend(reset,TPM_SUCCESS)
    ELSE OUT_Extend(extend(pcrs(s)(pcrNum),inDigest),TPM_SUCCESS)
    ENDIF    

  % Output PCR of given index
  pcrReadOut(s:tpmAbsState,ind:PCRINDEX) : tpmAbsOutput = 
  %% TODO: will ind not be allowed to be > 23 because of defn of PCRINDEX? 
  %% Should throw TPM_BADINDEX if outside range
     LET p = pcrs(s) IN OUT_PCRRead(p(ind),TPM_SUCCESS)

  % Output PCRs from a state as quote
%   quoteOut(s:tpmAbsState,keyHandle:(tpmKey?),externalData:(tpmNonce?),targetPCR:PCR_SELECTION) : tpmAbsOutput =
%   %% TODO: will pm be allowed to have elements > 23? see pcrReadOut 
% %      IF checkKeyRoot(keyHandle,srk(s))
% %      THEN 
%      LET pcrData = getPCRs(s`pcrs,targetPCR) IN
% 	OUT_Quote(pcrData,
% 		  tpmQuote(pcrData,
% 			   externalData,
% 			   signed(private(keyHandle),clear)),
% 		  TPM_SUCCESS)
% %      ELSE OUT_Error(TPM_INVALID_KEYUSAGE) %% TODO: double check this
% %      ENDIF

  dataBindOut(s:tpmAbsState,k:(tpmKey?),d:tpmData) : tpmAbsOutput = 
    OUT_Data_Bind(tpmBoundData(d,encrypted(key(k),clear)),CPU_SUCCESS);

  %% TODO: should this be able to affect state? i don't think so.
  certState(s:tpmAbsState,aik:(tpmKey?),certReq:(tpmIdContents?)) : tpmAbsState =
    LET d=decrypt(key(aik),certReq) IN
    	IF crs(d)=clear
	THEN genKeyState(s)
	ELSE s
	ENDIF

  % Generate a certified AIK from an AIK.  Certification assumes that the
  % EK really does belong to the TPM.  We're abstracting away that check.
  certOut(s:tpmAbsState,aik:(tpmKey?),certReq:(tpmIdContents?)) : tpmAbsOutput =
    LET d=decrypt(key(aik),certReq) IN
    	IF crs(d)=clear
	THEN OUT_Certify(tpmAsymCAContents(tpmSessKey(keyGenCnt(s),clear),
					   digest(certReq),
					   encrypted(key(ekVal),clear)),
			 CPU_SUCCESS)
	ELSE OUT_CPUError(CPU_DECRYPT_ERROR)
	ENDIF
  
  % Read a value and output
  readOut(s:tpmAbsState,i:nat) : tpmAbsOutput = 
    memory(s)(i);

  %% Revoke key operation on TPM state
  revokeKeyState(s:tpmAbsState,k:(tpmKey?)) : tpmAbsState =
    s WITH [`keys := revokeKey(k,keys(s))];


  restoreState(s:tpmAbsState) : tpmAbsState =
    IF valid?(restore(s))
       THEN LET rs=restore(s) IN
             (# restore := rs
	      , memory := memory(s)
	      , ek := ek(rs)
	      , srk := srk(rs)
	      , pcrs := pcrs(rs)
	      , keys := keys(rs)
	      , keyGenCnt:=keyGenCnt(rs)
	      , locality := 3
	      , permFlags := permFlags(rs)
	      , permData := permData(rs)
	      , stanyFlags := stanyFlags(rs)
	      , disableForceClear := FALSE
            #)
       ELSE s
    ENDIF;

  % deactivate by going back to init.  Not sure this is correct.
  deactivateState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`stanyFlags(postInitialize) := TRUE];

  % save a value to external memory
  saveToMemState(s:tpmAbsState,i:nat,v:tpmAbsOutput) : tpmAbsState =
    s WITH [`memory := updateLoc(memory(s),i,v)];

  %% What we want to generate with each command is a pair of type
  %% [tpmAbsOut,tpmAbsState].  executeCom generates the the state
  %% from a TPM state and command while the upcoming outputCom
  %% generates the corresponding output.  Thus, to execute any
  %% operation, both executeCom and outputCom must be used

  %% Run if TPM_Init has run but TPM_Startup has not
  executeComPostInit(s:(afterInit?),c:tpmAbsInput) : tpmAbsState =
    CASES c OF
      ABS_Startup(t) : CASES t OF 
      		        TPM_ST_CLEAR : tpmStartup,
    			TPM_ST_STATE : restoreState(s),
    			TPM_ST_DEACTIVATED : deactivateState(s)
                       ENDCASES
      ELSE s
    ENDCASES;

  %% Run if ABS_Startup has run after TPM_Init
  executeComStartup(s:(afterStartup?),c:tpmAbsInput) : tpmAbsState = 
    CASES c OF
      ABS_Init : tpmPostInit,
      ABS_SaveState : saveState(s),
      ABS_TakeOwnership(oAuth,srkAuth,srk) : takeOwnershipState(s,oAuth,srkAuth,srk),
      ABS_OwnerClear: ownerClearState(s),
      ABS_ForceClear: forceClearState(s),
      ABS_DisableOwnerClear: disableOwnerClearState(s),
      ABS_DisableForceClear: disableForceClearState(s),
      ABS_CreateWrapKey(parent,k) : createWrapKeyState(s,parent,k),
%       ABS_LoadKey2(p,k): loadKey2State(s,p,k), 
      ABS_CreateEndorsementKeyPair(n,k) : createEndorsementKeyPairState(s,n,k),
      ABS_CreateRevocableEK(r,k,g,i) : createRevEKState(s,r,k,g,i),
      ABS_RevokeTrust(r) : revokeTrustState(s,r),
      ABS_MakeIdentity(d,k) : makeIdentityState(s,d,k), 
%       ABS_ActivateIdentity(a,b) : activateIdentityState(s,a,b),
      ABS_Extend(n,d) : extendState(s,n,d),
      ABS_certify(aik,ek) : certState(s,aik,ek),
      ABS_senter : 
        changeLocalityState(extendState(pcrsResetSenterState(s),0,hash(sinit))),
      ABS_sinit : changeLocalityState(extendState(s,0,hash(mle))),
      ABS_save(i,v) : saveToMemState(s,i,v)
      ELSE s
  ENDCASES;
  
  %% Execute a command on state generating a new state.  Commands execution
  %% should be blocked if startup has not run and postInit=true.
  executeCom(s:tpmAbsState,c:tpmAbsInput) : tpmAbsState =
    IF afterInit?(s)
    THEN executeComPostInit(s,c)
    ELSE executeComStartup(s,c)
    ENDIF;

  %% Run if TPM_Init has run but TPM_Startup has not
  outputComPostInit(s:(afterInit?),c:tpmAbsInput) : tpmAbsOutput =
    OUT_Error(TPM_SUCCESS);

  %% Generate output from a command and state 
  %% Run if ABS_Startup has run after TPM_Init
  outputComStartup(s:(afterStartup?),c:tpmAbsInput) : tpmAbsOutput = 
    CASES c OF
      ABS_TakeOwnership(oAuth,srkAuth,srk) : takeOwnershipOut(s,oAuth,srkAuth,srk),
      ABS_OwnerClear : ownerClearOut(s),
      ABS_ForceClear : forceClearOut(s),
      ABS_DisableOwnerClear : disableOwnerClearOut(s),
      ABS_DisableForceClear : disableForceClearOut(s),
%       ABS_Seal(k,a,p,data) : sealOut(s,k,a,p,data),
%       ABS_Unseal(d,k) : unsealOut(s,d,k),
      ABS_UnBind(k,d) : unBindOut(s,k,d),
      ABS_Data_Bind(k,d) : dataBindOut(s,k,d),
      ABS_CreateWrapKey(parent,k) : createWrapKeyOut(s,parent,k),
      ABS_LoadKey2(p,k) : loadKey2Out(p,k),
      ABS_CreateMigrationBlob(pk,m,migKAuth,encData) : 
      				createMigBlobOut(s,pk,m,migKAuth,encData),
%       ABS_ConvertMigrationBlob(k,d,r) : convertMigBlobOut(s,k,d,r),
      ABS_AuthorizeMigrationKey(mk,ms) : authorizeMigKeyOut(s,mk,ms),
      ABS_MigrateKey(mk,pubKey,data) : migrateKeyOut(s,mk,pubKey,data),
      ABS_Sign(k,a) : signOut(s,k,a),
      ABS_CreateEndorsementKeyPair(n,k) : createEndorsementKeyPairOut(s,n,k),
      ABS_CreateRevocableEK(r,k,g,i) : createRevEKOut(s,r,k,g,i),
      ABS_RevokeTrust(r) : revokeTrustOut(s,r),
      ABS_ReadPubek(n) : readPubekOut(s,n),
%       ABS_MakeIdentity(d,k) : makeIdentityOut(s,d,k),
      ABS_ActivateIdentity(a,b) : activateIdentityOut(s,a,b),
      ABS_Extend(n,d) : extendOut(s,n,d),
      ABS_PCRRead(ind) : pcrReadOut(s,ind),
%       ABS_Quote(k,n,pm) : quoteOut(s,k,n,pm),
      ABS_certify(aik,cr) : certOut(s,aik,cr),
      ABS_read(i) : readOut(s,i)
    ELSE OUT_Error(TPM_SUCCESS)
  ENDCASES;
  
  %% Execute a command on state generating a new state.  Commands execution
  %% should be blocked if startup has not run and postInit=true.
  outputCom(s:tpmAbsState,c:tpmAbsInput) : tpmAbsOutput =
    IF afterInit?(s)
       THEN outputComPostInit(s,c)
       ELSE outputComStartup(s,c)
    ENDIF;


  %% CPU Command Definitions

  %% Requires use of bind
  CPU_saveOutput(i:nat) : [tpmAbsOutput -> State] =
      useOutputStateOutput(
               (LAMBDA (a:tpmAbsOutput):
                  (LAMBDA (s:tpmAbsState):
		    executeCom(s,ABS_save(i,a)))),
               (LAMBDA (a:tpmAbsOutput):
                  (LAMBDA (s:tpmAbsState):
		    a)));

  CPU_read(i:nat) : State =
     output(LAMBDA (s:tpmAbsState): outputCom(s,ABS_read(i)));

  %% Call SENTER 
  CPU_senter : State =
    modify(OUT_Error(TPM_SUCCESS),
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_senter)));

  %% Reset the TPM by senter call - depreciated - DO NOT USE
  senterResetTPM : State = put(OUT_Error(TPM_SUCCESS),tpmStartup);

  %% Measure sinit by senter call - depreciated - DO NOT USE
  %senterHashSinitTPM : State = TPM_Extend(hash(sinit),0);

  %% Call sinit for initial measurements
  CPU_sinit : State =
    modify(OUT_Error(TPM_SUCCESS),
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_sinit)));
 
  CPU_BuildQuoteFromMem(q,idcont:nat):State =
    output(LAMBDA (s:tpmAbsState) :
	       LET theMem = memory(s) IN
	         IF OUT_Quote?(theMem(q)) AND tpmQuote?(sig(theMem(q)))
		    AND OUT_MakeIdentity?(theMem(idcont))
                 THEN  OUT_FullQuote(sig(theMem(q)),idBinding(theMem(idcont)),CPU_SUCCESS)
		 ELSE OUT_CPUError(CPU_QUOTE_ERROR) %% TODO: Incorrect?
		 ENDIF);

  %% CA Command Definitions
  %% Invoke the certification authority
  CA_certify(aik:(tpmKey?),cr:(tpmIdContents?)) : State =
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_certify(aik,cr))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_certify(aik,cr))));

  %% Assure the CA generates an appropriate cert from the AIK and Ek
  %% proved - Wed Jul 11 13:14:11 EDT 2012
  gen_cert: THEOREM 
    FORALL (state:(afterStartup?),aik:(tpmKey?),id:(tpmIdContents?)) :
      LET (a,s) = runState(
      	  	  CA_certify(aik,id))
		  (state) IN
    LET d=decrypt(key(aik),id) IN
    	IF crs(d)=clear
	THEN a=OUT_Certify(tpmAsymCAContents(tpmSessKey(keyGenCnt(state),clear),
					   digest(id),
					   encrypted(key(ekVal),clear)),
			   CPU_SUCCESS)
	     AND s = state WITH [`keyGenCnt := keyGenCnt(state)+1]
	ELSE a=OUT_CPUError(CPU_DECRYPT_ERROR) %TODO: may be incorrect
	     AND s=state
	ENDIF
	
  %% TPM Command Definitions - Note that all commands used by the TPM
  %% have the TPM suffix to distinguish from operations on tpm state.
  %% Commands thus far are defined as state transforming or output
  %% generating.  This does not exclude the eventuality of doing both.

  %% No-op - not a real TPM command
  TPM_Noop : [tpmAbsOutput -> State] =
    (LAMBDA (a:tpmAbsOutput): state((LAMBDA(s:tpmAbsState) : (a,s))));

  %% TPM is off - not a real TPM command
  TPM_Off : State = put(OUT_Nothing,tpmUnknown);

  %% Power up the TPM and hit the TPM_Init signal
  TPM_Init : State = put(OUT_Init(TPM_SUCCESS),tpmPostInit);

  init_post : THEOREM
    FORALL (state:tpmAbsState) :
      LET (a,s) = runState(TPM_Init)(state) IN
       	  a=OUT_Init(TPM_SUCCESS) AND
       	  s=tpmPostInit

  %% Save the TPM state in preparation for restore at startup
  TPM_SaveState : State =
    modify(OUT_SaveState(TPM_SUCCESS),
            (LAMBDA (s:tpmAbsState):executeCom(s,ABS_SaveState)))
  
  %% Save state actually saves the correct information.
  %% proved - Fri Sep 14 11:20:25 CDT 2012
  save_state_post : THEOREM
    FORALL (s0:(afterStartup?)) : 
      LET (a,s) = runState(TPM_SaveState)(s0) IN
       LET save = restore(s) IN
        valid?(save)
	AND keys(save) = keys(s0)
	AND ek(save) = ek(s0)
	AND srk(save) = srk(s0)
	AND FORALL (i:PCRINDEX) : 
	      IF pcrReset(pcrAttrib(permData(save))(i))
	         THEN pcrs(save)(i) = resetOne
		 ELSE pcrs(save)(i) = pcrs(s0)(i)
	      ENDIF
	AND permFlags(save) = permFlags(s0)
	AND permData(save) = permData(s0)
	AND a=OUT_SaveState(TPM_SUCCESS)

  %% Start up the TPM after TPM_Init
  TPM_Startup(st:TPM_STARTUP_TYPE) : State =
    modify(OUT_Startup(TPM_SUCCESS),
            (LAMBDA (s:tpmAbsState):executeCom(s,ABS_Startup(st))));

  %% TPM_Startup post condition covering three major cases: clear, restore
  %% state and deactivate.
  %% proved - Sat Sep 15 09:58:36 CDT 2012
  startup_post : THEOREM
    FORALL (s0:(afterInit?), f:TPM_STARTUP_TYPE) : 
      LET (a,s) = runState(TPM_Startup(f))(s0) IN
       LET save = restore(s) IN
        CASES f OF
          TPM_ST_CLEAR : s = tpmStartup,
	  TPM_ST_STATE : valid?(save) AND wellFormedRestore?(save) =>
	                      keys(save) = keys(s)
			      AND ek(save) = ek(s)
			      AND srk(save) = srk(s)
			      AND FORALL (i:PCRINDEX) : 
	      		      	    IF pcrReset(pcrAttrib(permData(save))(i))
	         		    THEN pcrs(save)(i) = resetOne
		 		    ELSE pcrs(save)(i) = pcrs(s)(i)
	      			    ENDIF
			      AND permFlags(save) = permFlags(s)
			      AND permData(save) = permData(s),
	  TPM_ST_DEACTIVATED : postInitialize(stanyFlags(s))
        ENDCASES
	AND a=OUT_Startup(TPM_SUCCESS)

  %% Prove that the only command that can run and do anyting folling a
  %% TPM_Init is TPM_Startup.  If anything else tries to run, nothing happens. 
  %% Note the use of an "anything" command in the first command sequence.
  startup_after_init: THEOREM 
    FORALL (s:tpmAbsState,a:tpmAbsOutput,c:tpmAbsInput) :
      NOT ABS_Startup?(c) =>
        LET (a0,s0) = runState(TPM_Init 
	    	      	       >> state(LAMBDA (s:tpmAbsState):(a,executeCom(s,c))))(s) IN
          LET (a1,s1) = runState(TPM_Init)(s) IN
	      s0=s1


  %% Prove that senter after power up results in reset PCRs followed by sinit
  %% measurement.
  %% proved - Tue Jun 12 15:31:12 CDT 2012
  resetMonad: THEOREM 
    FORALL (hv:HV, state:tpmAbsState) :
      LET (a,s) = runState(
      	          TPM_Init
      		  >> TPM_Startup(TPM_ST_CLEAR)
      		  >> CPU_senter
      		  >> CPU_sinit)
      		  (state)
      IN s = changeLocalityState(
               changeLocalityState(
                 extendState(
                   extendState(pcrsResetSenterState(tpmStartup),0,hash(sinit)),0,hash(mle))))
      AND a = OUT_Error(TPM_SUCCESS)


  %% Establish SRK
  TPM_TakeOwnership(ownerAuth,srkAuth:(tpmAuthData?),srk:(tpmKey?)) : State = 
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_TakeOwnership(ownerAuth,srkAuth,srk))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_TakeOwnership(ownerAuth,srkAuth,srk))));

  take_ownership_post: THEOREM FORALL (state:(afterStartup?),srk:(tpmKey?),oA,srkA:(tpmAuthData?)) : 
    LET (a,s) = runState(
		 TPM_TakeOwnership(oA,srkA,srk))
		 (state) IN
    IF ownership(permFlags(s))
    THEN IF goodkey?(key(ek(s)))
    	 THEN IF storage?(keyUsage(srk)) AND not(migratable(keyFlags(srk)))
	      THEN a = OUT_TakeOwnership(srk,TPM_SUCCESS) AND 
     	     	  s = state WITH [`srk:=srk,
		      	    	  `permFlags(readPubek):=FALSE]
	      ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE) AND
	      	   s = state
	      ENDIF
	 ELSE a = OUT_Error(TPM_NO_ENDORSEMENT) AND
	      s = state
	 ENDIF
    ELSE a = OUT_Error(TPM_INSTALL_DISABLED) AND
    	 s = state
    ENDIF
		 
  take_ownership_pred: THEOREM FORALL (state:(afterStartup?),srk:(tpmKey?),oA,srkA:(tpmAuthData?)) : 
    LET (a,s) = runState(
		 TPM_TakeOwnership(oA,srkA,srk))
		 (state) IN
    IF takeOwnership?(state,oA,srkA,srk)
    THEN a=OUT_TakeOwnership(srk,TPM_SUCCESS) AND 
     	 s=state WITH [`srk:=srk,
		       `permFlags(readPubek):=FALSE]
    ELSE a=OUT_Error(TPM_INSTALL_DISABLED) OR a=OUT_Error(TPM_INVALID_KEYUSAGE) OR
    	 a=OUT_Error(TPM_NO_ENDORSEMENT) AND
	 s=state
    ENDIF;
          

  TPM_OwnerClear : State = 
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_OwnerClear)),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_OwnerClear)));

  owner_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
	       TPM_OwnerClear)
	       (state) IN   
%     IF k=private(srk(s))
%     THEN 
    	 IF disableOwnerClear(permFlags(s))
    	 THEN a=OUT_Error(TPM_CLEAR_DISABLED) AND keys(s)=keys(state)
	 ELSE a=OUT_OwnerClear(TPM_SUCCESS) AND 
	      keys(s) = emptyset AND 
	      ownership(permFlags(s)) = TRUE AND 
	      operator(permFlags(s)) = FALSE AND
	      maintenanceDone(permFlags(s)) = FALSE
	      %% TODO: AND LOTS MORE STUFF!
	 ENDIF
%     ELSE a=OUT_Error(TPM_AUTHFAIL) AND keys(s)=keys(state)
%     ENDIF


  TPM_ForceClear : State = 
     modifyOutput(
	(LAMBDA (s:tpmAbsState) : executeCom(s,ABS_ForceClear)),
        (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_ForceClear)));

  force_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
	       TPM_ForceClear)
	       (state) IN
	IF disableForceClear(state)
      	  THEN a=OUT_Error(TPM_CLEAR_DISABLED) AND keys(s)=keys(state)
	    ELSE a=OUT_ForceClear(TPM_SUCCESS) AND keys(s) = emptyset AND 
	         ownership(permFlags(s)) = TRUE AND 
		 operator(permFlags(s)) = FALSE AND
		 maintenanceDone(permFlags(s)) = FALSE
    	ENDIF


  TPM_DisableOwnerClear : State = 
     modifyOutput(
	(LAMBDA (s:tpmAbsState) : executeCom(s,ABS_DisableOwnerClear)),
        (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_DisableOwnerClear)));

  disable_owner_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
    	       TPM_DisableOwnerClear)
	       (state) IN
      disableOwnerClear(permFlags(s)) = TRUE
      AND a = OUT_DisableOwnerClear(TPM_SUCCESS);


  TPM_DisableForceClear : State =
     modifyOutput(
	(LAMBDA (s:tpmAbsState) : executeCom(s,ABS_DisableForceClear)),
	(LAMBDA (s:tpmAbsState) : outputCom(s,ABS_DisableForceClear)));

  disable_force_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
    	       TPM_DisableForceClear)
	       (state) IN
      disableForceClear(s) = TRUE
      AND a = OUT_DisableForceClear(TPM_SUCCESS);


  %% Seal and output a blob (should be binary or data)
  TPM_Seal(k:(tpmKey?),encAuth:(tpmAuthData?),pcrInfo:PCR_INFO_LONG,inData:tpmData) : State = 
     output(LAMBDA (s:tpmAbsState): outputCom(s,ABS_Seal(k,encAuth,pcrInfo,inData)));

  %% Seal a secret successfully
%   seal_post: THEOREM
%     FORALL (state:(afterStartup?),k:(tpmKey?),e:(tpmAuthData?),p:(tpmPCRInfo?),d:tpmData) :
%       LET (a,s) = runState(
%      	 	  TPM_Seal(k,e,p,d))
%  		  (state) IN
%       IF storage?(keyUsage(k)) AND not(migratable(keyFlags(k)))
% 	  THEN a = OUT_Seal(tpmStoredData(p,tpmSealedData(e,
% 							  tpmProof(permData(s)),
% 							  tpmDigest(cons(p,null),clear),
% 							  d),
% 					  encrypted(key(k),clear)),
% 			    TPM_SUCCESS)
% 	  ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE) 
% 	ENDIF
% 	AND s = state
 
%   seal_pred : THEOREM
%     FORALL (state:(afterStartup?),k:(tpmKey?),e:(tpmAuthData?),p:(tpmPCRInfo?),d:tpmData) :
%       LET (a,s) = runState(
%      	 	  TPM_Seal(k,e,p,d))
%  		  (state) IN
%       IF seal?(state,k,e,p,d)
% 	  THEN a=OUT_Seal(tpmStoredData(p,tpmSealedData(e,
% 							tpmProof(permData(s)),
% 							tpmDigest(cons(p,null),clear),
% 							d),
% 					encrypted(key(k),clear)),
% 			    TPM_SUCCESS)
% 	  ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE) 
% 	ENDIF
% 	AND s=state

%   %% Unseal and output a blob (should be binary or data)
%   TPM_Unseal(p:(tpmKey?),d:(tpmStoredData?)) : State = 
%      output(LAMBDA (s:tpmAbsState): outputCom(s,ABS_Unseal(p,d)));

%   unseal_post: THEOREM
%     FORALL (state:(afterStartup?),p:(tpmKey?),d:(tpmStoredData?)) :
%       LET (a,s) = runState(
%                     TPM_Unseal(p,d))
% 		    (state) IN
%       IF storage?(keyUsage(p)) AND not(migratable(keyFlags(p)))
%       THEN IF crs(decrypt(key(p),d))=clear
%       	   THEN IF tpmProof(encData(d))=tpmProof(permData(s)) AND 
% 	   	   storedDigest(encData(d))=tpmDigest(cons(sealInfo(d),null),clear)
% 		THEN a=OUT_Unseal(data(encData(d)),TPM_SUCCESS)
% 		ELSE a=OUT_Error(TPM_NOTSEALED_BLOB)
% 		ENDIF
% 	   ELSE a=OUT_Error(TPM_DECRYPT_ERROR)
% 	   ENDIF
%       ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
%       ENDIF 
%       AND s=state
  
%   unseal_pred : THEOREM
%     FORALL (state:(afterStartup?),p:(tpmKey?),d:(tpmStoredData?)) :
%       LET (a,s) = runState(
%                     TPM_Unseal(p,d))
% 		    (state) IN
%       IF unseal?(state,p,d)
%       THEN IF crs(decrypt(key(p),d))=clear
%       	   THEN IF tpmProof(encData(d))=tpmProof(permData(s)) AND 
% 	   	   storedDigest(encData(d))=tpmDigest(cons(sealInfo(d),null),clear)
% 		THEN a=OUT_Unseal(data(encData(d)),TPM_SUCCESS)
% 		ELSE a=OUT_Error(TPM_NOTSEALED_BLOB)
% 		ENDIF
% 	   ELSE a=OUT_Error(TPM_DECRYPT_ERROR)
% 	   ENDIF
%       ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
%       ENDIF 
%       AND s=state

%   unseal_prev_post: THEOREM
%     FORALL (state:(afterStartup?),j,k:(tpmKey?),e:(tpmAuthData?),p:(tpmPCRInfo?),d:tpmData) :
%       LET (a,s) = runState(
%       	  	  TPM_Seal(k,e,p,d)
% 		  >>= (LAMBDA (a:tpmAbsOutput) : 
% 		       CASES a OF
% 		         OUT_Seal(s,m) : TPM_Unseal(j,s) 
% 			 ELSE TPM_Noop(a)
% 		       ENDCASES))
% 		  (state) IN  
% 	storage?(keyUsage(j)) and not(migratable(keyFlags(j))) AND
% 	storage?(keyUsage(k)) and not(migratable(keyFlags(k)))
% 	AND key(j)=private(k)
% 	   => a = OUT_Unseal(d,TPM_SUCCESS)
% 	AND s = state


  %% UnBind encrypted blob (decrypt)
  TPM_UnBind(keyHandle:(tpmKey?),inData:(tpmBoundData?)) : State = 
     output(LAMBDA (s:tpmAbsState): outputCom(s,ABS_UnBind(keyHandle,inData)));

  %% UnBind an encrypted blob successfully
  unBind_post: THEOREM
    FORALL (state:(afterStartup?),k:(tpmKey?),d:(tpmBoundData?)) : 
      LET (a,s) = runState(
		  TPM_UnBind(k,d))
		  (state) IN
      IF legacy?(keyUsage(k)) OR bind?(keyUsage(k))
      THEN LET d1=decrypt(private(k),d) IN 
    	 IF crs(d1)=clear
      	   THEN a=OUT_UnBind(payloadData(d),TPM_SUCCESS)
	   ELSE a=OUT_CPUError(CPU_DECRYPT_ERROR) %TODO: unsure if this is correct
	   ENDIF
      ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
      ENDIF  	    
      AND s = state

  unBind_pred_test: THEOREM
    FORALL (state:(afterStartup?),k:(tpmKey?),d:(tpmBoundData?)) : 
      LET (a,s) = runState(
		  TPM_UnBind(k,d))
		  (state) IN
      IF unBind?(k,d) and crs(decrypt(private(k),d))=clear
      THEN a=OUT_UnBind(payloadData(d),TPM_SUCCESS)
      ELSE IF not(legacy?(keyUsage(k)) OR bind?(keyUsage(k))) 
      	   THEN a=OUT_Error(TPM_INVALID_KEYUSAGE) 
      	   ELSE a=OUT_CPUError(CPU_DECRYPT_ERROR) %TODO: unsure if this is correct
	   ENDIF
      ENDIF  	    
      AND s = state
	
  Tspi_Data_Bind(k:(tpmKey?),d:tpmData) : State = 
     output(LAMBDA (s:tpmAbsState): outputCom(s,ABS_Data_Bind(k,d)));

  %% UnBind an encrypted blob successfully
  unBind_prev_post: THEOREM 
    FORALL (state:(afterStartup?),d:tpmData,p,k:(tpmKey?)) : 
      LET (a,s) = runState(
		  Tspi_Data_Bind(k,d)
		  >>= LAMBDA (a:tpmAbsOutput) : 
		      CASES a OF
		        OUT_Data_Bind(d,m) : TPM_UnBind(k,d) 
			ELSE TPM_Noop(a) 
		      ENDCASES)
 		  (state) IN 
	  tpmBoundData?(d) AND unBind?(k,d) =>
	  a = OUT_UnBind(d,TPM_SUCCESS) 
	  AND s = state


  %% Wrap new key k with parent key
  TPM_CreateWrapKey(parent,keyInfo:(tpmKey?)) : State = 
     modifyOutput(
	  (LAMBDA (s:tpmAbsState) :
	      executeCom(s,ABS_CreateWrapKey(parent,keyInfo))),
          (LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_CreateWrapKey(parent,keyInfo)))
	      );

  create_wrap_key_post: THEOREM 
    FORALL (state:(afterStartup?),p,keyInfo:(tpmKey?)) : 
      LET (a,s) = runState(
     	          TPM_CreateWrapKey(p,keyInfo))
		  (state) IN
    IF storage?(keyUsage(p)) 
    THEN IF migratable(keyFlags(p))=TRUE AND migratable(keyFlags(keyInfo))=FALSE
    	 THEN a = OUT_Error(TPM_INVALID_KEYUSAGE)
      	      AND s = state
	 ELSE IF identity?(keyUsage(keyInfo)) or authChange?(keyUsage(keyInfo))
	      THEN a = OUT_Error(TPM_INVALID_KEYUSAGE)
      	      	   AND s = state
	      ELSE IF migrateAuthority(keyFlags(keyInfo))=TRUE
	      	   THEN a = OUT_Error(TPM_INVALID_KEYUSAGE)
      	     	   	AND s = state
		   ELSE a = OUT_CreateWrapKey(tpmKey(keyGenCnt(state),
					      keyUsage(keyInfo),
					      keyFlags(keyInfo),
					      PCRInfo(keyInfo),
					      key(p),
					      clear),TPM_SUCCESS)
      	     		AND s = state WITH [`keyGenCnt := keyGenCnt(state)+1]
		   ENDIF
	      ENDIF
	 ENDIF
    ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
      	 AND s = state
    ENDIF

  create_wrap_key_pred_test: THEOREM
    FORALL (state:(afterStartup?),p,k:(tpmKey?)) :
      LET (a,s) = runState(
    		    TPM_CreateWrapKey(p,k))
		    (state) IN
	IF createWrapKey?(p,k)
	THEN a = OUT_CreateWrapKey(tpmKey(keyGenCnt(state),
					  keyUsage(k),
					  keyFlags(k),
					  PCRInfo(k),
					  key(p),
					  clear),
				   TPM_SUCCESS)
      	     AND s = state WITH [`keyGenCnt := keyGenCnt(state)+1]
        ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
      	     AND s = state
        ENDIF	

  %% Install key k in a TPM
  TPM_LoadKey2(p:(tpmKey?),k:(tpmKey?)):State =
    modifyOutput(
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_LoadKey2(p,k))),
	   (LAMBDA (s:tpmAbsState):outputCom(s,ABS_LoadKey2(p,k))));

  % A key is installed if it is wrapped with SRK
  load_key_post: THEOREM 
    FORALL (p,inKey:(tpmKey?),state:(afterStartup?)) :
      LET (a,s) = runState(
    		    TPM_LoadKey2(p,inKey))
		    (state) IN
    IF storage?(keyUsage(p))
    THEN IF key(p) = wrappingKey(inKey)
    	 THEN LET usage = keyUsage(inKey) IN
	      CASES usage OF
	      identity: IF migratable(keyFlags(inKey))=FALSE
	      		THEN a=OUT_LoadKey2(inKey,TPM_SUCCESS)
			     AND s=state with [`keys:=loadKey(inKey,srk(state),keys(state),pcrs(state))]
			ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
			     AND s=state
			ENDIF,
	      authChange: a=OUT_Error(TPM_INVALID_KEYUSAGE)
	      		  AND s=state
	      ELSE a=OUT_LoadKey2(inKey,TPM_SUCCESS)
	      	   AND s=state with [`keys:=loadKey(inKey,srk(state),keys(state),pcrs(state))]
	      ENDCASES
	 ELSE a=OUT_CPUError(CPU_DECRYPT_ERROR) %% Might not be right.
	      AND s=state
	 ENDIF
    ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
    	 AND s=state
    ENDIF;

  load_key_pred_test: THEOREM
    FORALL (p,k:(tpmKey?),state:(afterStartup?)) :
      LET (a,s) = runState(
    		    TPM_LoadKey2(p,k))
		    (state) IN
	IF loadKey2?(p,k)
	THEN a=OUT_LoadKey2(k,TPM_SUCCESS)
	     AND s=state with [`keys:=loadKey(k,srk(state),keys(state),pcrs(state))]
	ELSE IF storage?(keyUsage(p)) AND key(p)/=wrappingKey(k) 
	     THEN a=OUT_CPUError(CPU_DECRYPT_ERROR)
	     ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
	     ENDIF
	     AND s=state
	ENDIF

%   load_key_pred_test: THEOREM
%     FORALL (p,k:(tpmKey?),state:(afterStartup?)) :
%       LET (a,s) = runState(
%     		    TPM_LoadKey2(p,k))
% 		    (state) IN
% 	IF loadKey2?(p,k)
% 	THEN a=OUT_LoadKey2(k,TPM_SUCCESS)
% 	     AND s=state with [`keys:=loadKey(k,srk(state),keys(state),pcrs(state))]
% 	ELSE IF storage?(keyUsage(p)) AND key(p)/=wrappingKey(k) 
% 	     THEN a=OUT_Error(TPM_DECRYPT_ERROR)
% 	     ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
% 	     ENDIF
% 	     AND s=state
% 	ENDIF

%   %% A key is installed if it is wrapped with an installed key
%   %% proved - Tue Jun 12 15:38:22 CDT 2012
% %   load_key_post2: THEOREM 
% %     FORALL (p,j,k:(tpmKey?),state:(afterStartup?)) :
% %       LET (out,s) = runState(
% %       	  	  TPM_LoadKey2(p,k)
% % 		  >> TPM_LoadKey2(k,j))
% % 		  (state) IN
% % 	p=srk(state) AND loadKey2?(p,k) AND loadKey2?(k,j)
% % 		=> member(key(j),keys(s));


%   load_key_prev_post: THEOREM 
%     FORALL (state:(afterStartup?),k,p:(tpmKey?),i:nat) :
%       LET (out,s) = runState(
%       	  	    TPM_CreateWrapKey(p,k)
% 		    >>= CPU_saveOutput(i)
% 		    >>= (LAMBDA (a:tpmAbsOutput) :
% 		    	 CASES a OF
% 		           OUT_CreateWrapKey(wk,m) : TPM_LoadKey2(p,wk)
% 			   ELSE TPM_Noop(a)
% 			 ENDCASES))
% 		    (state) IN 
%       OUT_CreateWrapKey?(memory(s)(i)) => 
%       createWrapKey?(p,k) AND loadKey2?(p,wrappedKey(memory(s)(i))) =>
%      		%member(asymKey(keyGenCnt(state),keyUsage(k),keyFlags(k)),keys(s))
%       out = OUT_LoadKey2(wrappedKey(memory(s)(i)),TPM_SUCCESS) 
     

% %   %%install nested wrapped keys?
% %   nested_wrapped_keys_post: THEOREM 
% %     FORALL (state:(afterStartup?),p,k1,k2:(tpmKey?)) :
% %       LET (a,s) = runState(
% % 		  TPM_CreateWrapKey(p,k1)
% % 		  >>= CPU_saveOutput(0)
% % 		  >>= (LAMBDA (a:tpmAbsOutput) : 
% % 		       CASES a OF 
% % 		         OUT_CreateWrapKey(wk,m) : TPM_LoadKey2(p,wk) 
% % 			 ELSE TPM_Noop(a) 
% % 		       ENDCASES)
% % 		  >>= (LAMBDA (a:CASES) :
% % 		       tpmAbsOutput a OF
% % 		         OUT_LoadKey2(wk,m) : TPM_CreateWrapKey(wk,k2)
% % 			 ELSE TPM_Noop(a)
% % 		       ENDCASES)
% % 		  >>= CPU_saveOutput(1)
% % 		  >>= (LAMBDA (a:tpmAbsOutput) : 
% % 		       CASES a OF
% % 		         OUT_CreateWrapKey(wk2,m) : TPM_LoadKey2(k1,wk2) 
% % 			 ELSE TPM_Noop(a) 
% % 		       ENDCASES))
% % 		  (state) IN
% % 	OUT_CreateWrapKey?(memory(s)(0)) AND OUT_CreateWrapKey?(memory(s)(1)) AND
% % 	createWrapKey?(p,k1) AND createWrapKey?(k1,k2) AND 
% % 	loadKey2?(p,wrappedKey(memory(s)(0))) AND loadKey2?(k1,wrappedKey(memory(s)(1)))=>
% % 	a=OUT_LoadKey2(wrappedKey(memory(s)(1)),TPM_SUCCESS)


  TPM_CreateMigrationBlob(pk:(tpmKey?),m:migrateScheme,mka:(tpmMigKeyAuth?),
			    d:(tpmKey?)) : State = 
     output(LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_CreateMigrationBlob(pk,m,mka,d)));

  create_mig_blob_post: THEOREM 
   FORALL (state:(afterStartup?),pk:(tpmKey?),m:migrateScheme,
		mka:(tpmMigKeyAuth?),d:(tpmKey?)) : 
    LET(a,s) = runState(
    	       TPM_CreateMigrationBlob(pk,m,mka,d))
	       (state) IN
    IF storage?(keyUsage(pk))
    THEN CASES d OF
      	 tpmKey(k,ku,kf,pcr,wk,crs) :
	   IF key(pk)=k 
      	   THEN IF checkMigKeyAuth?(state,mka)
	        THEN CASES m OF
      	   	     migrate : a=OUT_Error(TPM_INSTALL_DISABLED), % TODO: not at all correct
		     rewrap  : a=OUT_CreateMigrationBlob(0,
					tpmKey(k,ku,kf,pcr,key(key(mka)),clear),
		     			TPM_SUCCESS)
		     %ELSE OUT_Error(TPM_BAD_PARAMETER)
		     ENDCASES	
	        ELSE a=OUT_Error(TPM_RESOURCES) % TODO: not at all correct.
	        ENDIF 
      	   ELSE a=OUT_CPUError(CPU_DECRYPT_ERROR) % TODO: not correct?
	   ENDIF
	ELSE a=OUT_Error(TPM_WRONG_ENTITYTYPE) % TODO: not correct?
	ENDCASES
      ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
      ENDIF
      AND s=state 

  create_mig_blob_pred_test: THEOREM 
   FORALL (state:(afterStartup?),pk:(tpmKey?),m:migrateScheme,
		mka:(tpmMigKeyAuth?),d:(tpmKey?)) : 
    LET(a,s) = runState(
    	       TPM_CreateMigrationBlob(pk,m,mka,d))
	       (state) IN
    IF createMigBlob?(state,pk,m,mka,d)
    THEN a=OUT_CreateMigrationBlob(0,
				   tpmKey(key(d),keyUsage(d),keyFlags(d),PCRInfo(d),key(key(mka)),clear),
		     		   TPM_SUCCESS)
    ELSE a=OUT_Error(TPM_INSTALL_DISABLED) OR a=OUT_CPUError(CPU_DECRYPT_ERROR) OR 
    	 a=OUT_Error(TPM_RESOURCES) OR a=OUT_Error(TPM_WRONG_ENTITYTYPE) OR  
	 a=OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF


  TPM_ConvertMigrationBlob(k:(tpmKey?),inData:tpmData,rand:int) : State =
     output(LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_ConvertMigrationBlob(k,inData,rand)));


  TPM_AuthorizeMigrationKey(migKey:(tpmKey?),migScheme:(tpmMigScheme?)) : State = 
     output(LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_AuthorizeMigrationKey(migKey,migScheme)));

  authorize_migration_key_post: THEOREM 
   FORALL (state:(afterStartup?),k:(tpmKey?),scheme:(tpmMigScheme?)) : 
    LET(a,s) = runState(
    	       TPM_AuthorizeMigrationKey(k,scheme))
	       (state) IN
      a=OUT_AuthorizeMigrationKey(tpmMigKeyAuth(k,scheme,
						tpmDigest(cons(k,%cons(scheme,cons(tpmProof(PermData(s)),null))))),
								null),clear),
						clear),
				  TPM_SUCCESS)
      AND s=state


  TPM_MigrateKey(migKey,pubKey:(tpmKey?),data:tpmData) : State =
     output(LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_MigrateKey(migKey,pubKey,data)));

  migrate_key_post: THEOREM 
   FORALL (state:(afterStartup?),mk,k:(tpmKey?),d:tpmData) : 
    LET(a,s) = runState(
    	       TPM_MigrateKey(mk,k,d))
	       (state) IN
    IF migrate?(keyUsage(mk))
      THEN a = OUT_MigrateKey(encrypt(key(k),decrypt(key(mk),d)),TPM_SUCCESS)
      ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
    ENDIF

  
  %% Generate and output a signature
  TPM_Sign(k:(tpmKey?),areaToSign:tpmData) : State = 
     output(LAMBDA (s:tpmAbsState) : outputCom(s,ABS_Sign(k,areaToSign)));
	   
  sign_post: THEOREM 
    FORALL (state:(afterStartup?),k:(tpmKey?),b:tpmData) :
      LET(a,s) = runState(
     		  TPM_Sign(k,b))
		  (state) IN
	IF legacy?(keyUsage(k)) or signing?(keyUsage(k))
	THEN a = OUT_Sign(sign(key(k),b),TPM_SUCCESS)
	ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
	ENDIF
	AND s = state;

  sign_pred_test : THEOREM
    FORALL (state:(afterStartup?),k:(tpmKey?),b:tpmData) :
      LET(a,s) = runState(
     		  TPM_Sign(k,b))
		  (state) IN
	IF sign?(state,k,b)
	THEN a = OUT_Sign(sign(key(k),b),TPM_SUCCESS)
	ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
	ENDIF
	AND s = state;


  TPM_CreateEndorsementKeyPair(n:(tpmNonce?),k:(tpmKey?)) : State =
     %% TODO: Perm Data stuff with RNG
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_CreateEndorsementKeyPair(n,k))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_CreateEndorsementKeyPair(n,k)))
	    );

  create_endorsement_key_pair_post: THEOREM
    FORALL (state:(afterStartup?),k:(tpmKey?),n:(tpmNonce?)) : 
      LET (a,s) = runState(
      	  	  TPM_CreateEndorsementKeyPair(n,k))
		  (state) IN
      IF (key(ek(state)) = badkey) 
        THEN a = OUT_CreateEndorsementKeyPair(k,
					      tpmDigest(cons(k,cons(n,null)),clear),
					      TPM_SUCCESS) AND
	     s = state WITH [`ek := privateKey(k),
      	     	       	    `permFlags(CEKPUsed) := TRUE,
		   	    `permFlags(enableRevokeEK) := FALSE]
        ELSE a = OUT_Error(TPM_DISABLED_CMD) AND 
	     s = state
      ENDIF;


  TPM_CreateRevocableEK(a:(tpmNonce?),k:(tpmKey?),g:bool,i:(tpmNonce?)) : State =
     %% TODO: Perm Data stuff with RNG
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_CreateRevocableEK(a,k,g,i))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_CreateRevocableEK(a,k,g,i)))
	    );

  create_revocable_ek_post: THEOREM
    FORALL (state:(afterStartup?),a:(tpmNonce?),k:(tpmKey?),g:bool,i:(tpmNonce?)) : 
      LET (a,s) = runState(
      	  	  TPM_CreateRevocableEK(a,k,g,i))
		  (state) IN
      IF key(ek(state)) = badkey
        THEN a = OUT_CreateRevocableEK(tpmPubkey(tpmStorePubkey(key(k))),
				tpmDigest(cons(k,cons(a,null)),clear),
				i,
				TPM_SUCCESS) AND
	     s = state WITH [`ek := privateKey(k),
      	     	       	    `permFlags(CEKPUsed) := TRUE,
		   	    `permFlags(enableRevokeEK) := TRUE,	
			    `permData(ekReset):=i]
        ELSE a = OUT_Error(TPM_DISABLED_CMD) AND 
	     s = state
      ENDIF;


  TPM_RevokeTrust(r:(tpmNonce?)) : State = 
    modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_RevokeTrust(r))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_RevokeTrust(r)))
	    );
	    
  revoke_trust_post : THEOREM
    FORALL (state:(afterStartup?),EKReset:(tpmNonce?)) : 
      LET (a,s) = runState(
      	  	  TPM_RevokeTrust(EKReset))
		  (state) IN
      IF enableRevokeEK(permFlags(state)) 
      THEN IF ekReset(permData(state)) = EKReset 
    	   THEN a=OUT_RevokeTrust(TPM_SUCCESS) AND
	   	LET s1=clear(state) IN
	   	s=s1 WITH [`permFlags(nvLocked):=FALSE,
		    	      `ek:=tpmKey(badkey,storage,keyFlagsF,
					  pcrInfoLongDefault,badkey,clear)]
	   ELSE a=OUT_Error(TPM_AUTHFAIL) AND
	   	s=state
	   ENDIF
      ELSE a=OUT_Error(TPM_PERMANENTEK) AND
      	   s=state
      ENDIF;

  revoke_trust_pred_test : THEOREM
    FORALL (state:(afterStartup?),EKReset:(tpmNonce?)) : 
      LET (a,s) = runState(
      	  	  TPM_RevokeTrust(EKReset))
		  (state) IN
      IF revokeTrust?(state,EKReset)
      THEN a=OUT_RevokeTrust(TPM_SUCCESS) AND
	   LET s1=clear(state) IN
	       s=s1 WITH [`permFlags(nvLocked):=FALSE,
		    	  `ek:=tpmKey(badkey,storage,keyFlagsF,
					pcrInfoLongDefault,badkey,clear)]
      ELSE a=OUT_Error(TPM_AUTHFAIL) OR a=OUT_Error(TPM_PERMANENTEK) AND
	   s=state
      ENDIF;



  TPM_ReadPubek(n:(tpmNonce?)) : State =
     output(LAMBDA (s:tpmAbsState) : outputCom(s,ABS_ReadPubek(n)));

  read_pub_ek_post: THEOREM
    FORALL (state:(afterStartup?),n:(tpmNonce?)) : 
      LET (a,s) = runState(
      	  	  TPM_ReadPubek(n))
		  (state) IN
    a = IF readPubek(permFlags(state))
        THEN IF goodkey?(key(ek(state)))
	     THEN LET pubEndoK=ek(state) IN
	     	  OUT_ReadPubek(pubEndoK,
				tpmDigest(cons(pubEndoK,cons(n,null)),clear),
				TPM_SUCCESS)
	     ELSE OUT_Error(TPM_NO_ENDORSEMENT)
	     ENDIF
	ELSE OUT_Error(TPM_DISABLED_CMD)
      	ENDIF
    AND s = state
	           	  

  %% Make a new identity and output it
  TPM_MakeIdentity(CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) : State =
     modifyOutput(
	    (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_MakeIdentity(CADigest,idKeyParams))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_MakeIdentity(CADigest,idKeyParams)))
	    );

  make_identity_post: THEOREM 
    FORALL (state:(afterStartup?),CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) :
      LET (a,s)=runState(
     	 	   TPM_MakeIdentity(CADigest,idKeyParams))
		 (state) IN
        LET waik=tpmKey(keyGenCnt(state),
			keyUsage(idKeyParams),
			keyFlags(idKeyParams),
			pcrs(state),
			wrappingKey(srk(state)),
			clear) IN
	LET idBind=tpmIdContents(CADigest,waik,signed(private(waik),clear)) IN
      IF identity?(keyUsage(idKeyParams)) AND not(migratable(keyFlags(idKeyParams)))
        THEN a=OUT_MakeIdentity(waik,idBind,TPM_SUCCESS)
	 AND s=state WITH [`keyGenCnt := keyGenCnt(state)+1]
	ELSE a=OUT_Error(TPM_INVALID_KEYUSAGE)
	 AND s=state
      ENDIF;

%   make_identity_pred_test: THEOREM 
%     FORALL (state:(afterStartup?),CADigest:(tpmDigest?),idKeyParams:(tpmKey?)) :
%       LET (a,s) = runState(
%      	 	   TPM_MakeIdentity(CADigest,idKeyParams))
% 		 (state) IN
%         LET waik:(tpmKey?) = tpmKey(keyGenCnt(state),
% 				    keyUsage(idKeyParams),
% 				    keyFlags(idKeyParams),
% 				    pcrs(state),
% 				    wrappingKey(srk(state)),
% 				    clear) IN
% 	LET idBind = tpmIdContents(CADigest,waik,signed(private(waik),clear)) IN
%       IF makeIdentity?(s,CADigest,idKeyParams)
%         THEN a = OUT_MakeIdentity(waik,idBind,TPM_SUCCESS)
% 	     AND s = state WITH [`keyGenCnt := keyGenCnt(state)+1]
% 	ELSE a = OUT_Error(TPM_INVALID_KEYUSAGE)
% 	     AND s = state
%       ENDIF;
      

  %% Use an AIK
  TPM_ActivateIdentity(a:(tpmKey?),b:(activateIdentityBlob?)) : State =
     modifyOutput(
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_ActivateIdentity(a,b))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_ActivateIdentity(a,b)))
	    );

  %% Assure that activate idenity installs its AIK and returns K if AIK can
  %% be installed.
  activate_identity_post: THEOREM 
    FORALL (state:(afterStartup?),aik:(tpmKey?),blob:(activateIdentityBlob?)) :
      LET (a,s) = runState(
                  TPM_ActivateIdentity(aik,blob))
		  (state) IN     
      IF identity?(keyUsage(aik))    
      THEN LET h=tpmDigest(cons(tpmPubkey(tpmStorePubkey(key(aik))),null),clear),
      	       b1=decrypt(private(ekVal),blob) IN
	   CASES b1 OF
	   tpmAsymCAContents(k,d,crs) : 
	   	IF h=d and not(encrypted?(crs))
		THEN a=OUT_ActivateIdentity(k,TPM_SUCCESS)
		ELSE a=OUT_Error(TPM_BAD_PARAMETER)
		ENDIF,
	   tpmEKBlob(b,crs) : 
	   	CASES b OF
		tpmEKBlobActivate(k,d,p) : 
			IF h=d and not(encrypted?(crs))
			THEN a=OUT_ActivateIdentity(k,TPM_SUCCESS)
			ELSE a=OUT_Error(TPM_BAD_PARAMETER)
			ENDIF
		ELSE a=OUT_Error(TPM_BAD_TYPE)
		ENDCASES
	   ELSE a=OUT_Error(TPM_BAD_PARAMETER)
	   ENDCASES
      ELSE a=OUT_Error(TPM_BAD_PARAMETER)
      ENDIF
      AND s=state;

  cert_activate : THEOREM
    FORALL(state:(afterStartup?),aik:(tpmKey?),cr:(tpmIdContents?)) : 
      LET (a,s) = runState(
      	  	  CA_certify(aik,cr)
		  >>= CPU_saveOutput(0)
		  >>= (LAMBDA (a:tpmAbsOutput) :
		       CASES a OF
		       OUT_Certify(data,m) : TPM_ActivateIdentity(aik,data)
		       ELSE TPM_Noop(a)	
		       ENDCASES))
		  (state) IN
  	LET d=decrypt(key(aik),cr) IN
    	    crs(d)=clear AND identity?(keyUsage(aik)) AND 
	    digest(d)=tpmDigest(cons(tpmPubkey(tpmStorePubkey(key(aik))),null),clear) =>
	a=OUT_ActivateIdentity(sessK(data(memory(s)(0))),TPM_SUCCESS)


  %% REALLY LONG PROOF!
  make_and_activate_identity: THEOREM 
    FORALL (state:(afterStartup?),caDigest:(tpmDigest?),idKeyParams:(tpmKey?)) :
      LET  (a,s) = runState(
 		   TPM_MakeIdentity(caDigest,idKeyParams) % identity is output
		   >>= CPU_saveOutput(0)
		   >>= (LAMBDA (a:tpmAbsOutput) : 
		       	CASES a OF
		          OUT_MakeIdentity(aik,idBind,m) : CA_certify(aik,idBind)
			  ELSE TPM_Noop(a)
			ENDCASES)
		   >>= CPU_saveOutput(1)
		   >>= (LAMBDA (a:tpmAbsOutput) : 
		       	CASES a OF
		          OUT_Certify(data,m) : TPM_ActivateIdentity(idKeyParams,data)
			  ELSE TPM_Noop(a)
			ENDCASES))
		  (state) IN
	makeIdentity?(state,caDigest,idKeyParams)
	AND private(idKeyParams)=key(idKey(memory(s)(0)))
	AND caDigest=idBinding(memory(s)(0)) =>
	a=OUT_ActivateIdentity(sessK(data(memory(s)(1))),TPM_SUCCESS) AND 
	s=state WITH [`keyGenCnt:=keyGenCnt(state)+2]



  %% Extend PCR n with hash value h.
  TPM_Extend(n:PCRINDEX,h:HV):State =
    modifyOutput(
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_Extend(n,h))),
           (LAMBDA (s:tpmAbsState):outputCom(s,ABS_Extend(n,h))));
  
  extend_post : THEOREM
    FORALL (state:(afterStartup?),h:HV,n:PCRINDEX) : 
      LET (a,s) = runState(
      	  	  TPM_Extend(n,h))
		  (state) IN
    IF disable(permFlags(state)) %OR deactivated(STCLEAR_FLAGS)
    THEN a=OUT_Extend(reset,TPM_SUCCESS)
    ELSE a=OUT_Extend(extend(pcrs(state)(n),h),TPM_SUCCESS)
    ENDIF
    AND s=state WITH [`pcrs := pcrsExtend(pcrs(state),n,h)];


  %% Extend is antisymmetric if the hash values used for extension are
  %% not equal.  In this example we use the LET form to define
  %% commands directly with monad functions defined in StateMonad.pvs
  antisymmetryMonad: THEOREM 
    FORALL (hv0,hv1:HV,state:(afterStartup?)) :
      LET f1:State =
          modify(OUT_Nothing,
                 (LAMBDA (s:tpmAbsState):
		   s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv0)])),
      	f2:State =
          modify(OUT_Nothing,
                 (LAMBDA (s:tpmAbsState):
		   s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv1)])) IN
      hv0/=hv1 =>
        runState(
          f2 >>= (LAMBDA (x:tpmAbsOutput): f1))(tpmStartup)
        /=
        runState(
          f1 >>= (LAMBDA (x:tpmAbsOutput): f2))(tpmStartup)

  %% Extending a reset PCR is antisymmetric if the two values are not equal
  %% Let form used to defined commands for bind.  Will use command forms
  %% later in antisymmetryMonad3
  antisymmetryMonad2: THEOREM 
    FORALL (hv0,hv1:HV) :
      LET 
        f1:State = TPM_Extend(0,hv0),
      	f2:State = TPM_Extend(0,hv1) IN
      (hv0/=hv1 =>
        runState(f2 >> f1)(tpmStartup)
        /=
        runState(f1 >> f2)(tpmStartup))

  %% Extending a reset PCR is antisymmetric if the two values are not equal.
  %% No let form - commands appear directly in bind
  %% Theorem is now false when PCRs other than PCR0 are included.
  antisymmetryMonad3: THEOREM 
    FORALL (hv0,hv1:HV) :
      hv0/=hv1 =>
         runState(TPM_Extend(0,hv1)
		>> TPM_Extend(0,hv0))
	   (tpmStartup)
       /=
         runState(TPM_Extend(0,hv0)
		>> TPM_Extend(0,hv1))
	   (tpmStartup)


  %% Output PCR(i)
  TPM_PcrRead(i:PCRINDEX) : State = 
     output(LAMBDA (s:tpmAbsState) : outputCom(s,ABS_PCRRead(i)));

  pcr_read_post: THEOREM
    FORALL (state:(afterStartup?),i:PCRINDEX) : 
      LET(a,s) = runState(
     		  TPM_PcrRead(i))
		  (state) IN
	a = OUT_PCRRead(pcrs(s)(i),TPM_SUCCESS)
	AND s = state;


  %% Generate and output a quote
  TPM_Quote(k:(tpmKey?),n:(tpmNonce?),pm:PCR_SELECTION) : State = 
     output(LAMBDA (s:tpmAbsState) : outputCom(s,ABS_Quote(k,n,pm)));

%   %% If nonces don't match, quotes don't match.  We don't care about this
%   %% if the a quote cannot be produced.
%   %% proved - Fri Jun 22 16:55:16 CDT 2012
%   bad_nonce: THEOREM
%     FORALL (s:(afterStartup?),k:(tpmKey?), n1,n2:(tpmNonce?), pm:PCR_SELECTION) :
%       n1/=n2 %AND checkKeyRoot(k,srk(s)) 
%       =>
%        runState(
%          TPM_Quote(k,n1,pm))
% 	 (s)
%        /=
%        runState(
% 	 TPM_Quote(k,n2,pm))
% 	 (s);
  %% If nonces don't match, quotes don't match.  We don't care about this
  %% if the a quote cannot be produced.
  %% proved - Fri Jun 22 16:55:16 CDT 2012
  bad_nonce: THEOREM
    FORALL (s:tpmAbsState,k:(tpmKey?), n1,n2:(tpmNonce?), pm:PCRMASK) :
      n1/=n2 %AND checkKeyRoot(k,srk(s)) 
      =>
       runState(
         TPM_Quote(k,n1,pm))
	 (s)
       /=
       runState(
	 TPM_Quote(k,n2,pm))
	 (s);
  
%   %% Bad Signing Key - Man in the Middle Attack - we don't care about this
%   %% if either key won't produce a quote.
%   %% proved - Fri Jun 22 16:55:56 CDT 2012
%   bad_signing_key: THEOREM
%     FORALL (s:(afterStartup?),n:(tpmNonce?),pm:PCR_SELECTION,k0,k1:(tpmKey?)) :
%       LET (a0,s0) = runState(TPM_Quote(k0,n,pm))(s) IN
%         LET (a1,s1) = runState(TPM_Quote(k1,n,pm))(s) IN
%           private(k0) /= private(k1) 
% % 	  AND checkKeyRoot(k0,srk(s))
% % 	  AND checkKeyRoot(k1,srk(s))
%           =>
% 	  a0 /= a1;
  %% Bad Signing Key - Man in the Middle Attack - we don't care about this
  %% if either key won't produce a quote.
  %% proved - Fri Jun 22 16:55:56 CDT 2012
  bad_signing_key: THEOREM
    FORALL (s:(afterStartup?),n:(tpmNonce?),pm:PCRMASK,k0,k1:(tpmKey?)) :
      LET (a0,s0) = runState(TPM_Quote(k0,n,pm))(s),
        (a1,s1) = runState(TPM_Quote(k1,n,pm))(s) IN
          private(k0) /= private(k1) 
% 	  AND checkKeyRoot(k0,srk(s))
% 	  AND checkKeyRoot(k1,srk(s))
          =>
	  a0 /= a1;
     
%   %% Output after going through tpm commands is same as grabbing pcrs
%   %% This is one of those theorems where assert must be called before grind
%   %% proved - Fri Jun 22 16:56:08 CDT 2012
%   check_PCRS: THEOREM (
%     FORALL (state:(afterStartup?),k:(tpmKey?),hv:HV,pm:PCR_SELECTION,n:(tpmNonce?),i:PCRINDEX) :
%       LET (a,s) = runState(
%         	  TPM_Extend(i,hv)
%         	  >> TPM_Quote(k,n,pm))
%       		  (state) IN
% %     checkKeyRoot(k,srk(s)) => 
%       a = OUT_Quote(map(s`pcrs,pm),tpmQuote(map(s`pcrs,pm),n,signed(private(k),clear)),TPM_SUCCESS));

%   %% Prove that quote generation returns the correct PCR.  This theorem
%   %% needs to be updated with something cleaner.
%   %% proven - Wed Jul 11 10:40:28 EDT 2012
%   quote_post: THEOREM 
%     FORALL (state:(afterStartup?),k:(tpmKey?),n:(tpmNonce?),p:PCRINDEX) :
%         LET (a,s) = runState(
%       	    	    TPM_Quote(k,n,cons(p,null)))
% 		    (state) IN 
% %	checkKeyRoot(k,srk(state)) => 
% 	LET pcrs = cons(s`pcrs(p),null) IN
%         a = OUT_Quote(pcrs,
% 		     tpmQuote(pcrs,n,
% 			      signed(private(k),clear)),
% 		     TPM_SUCCESS)
% 	AND s = state
      
%   quote_with_prev_key: THEOREM
%     FORALL (state:(afterStartup?),pk,k:(tpmKey?),n:(tpmNonce?),pm:PCR_SELECTION) :
%       LET (a,s) = runState(
% 		  TPM_CreateWrapKey(pk,k)
% 		  >>=CPU_saveOutput(0)
% 		  >>= (LAMBDA (a:tpmAbsOutput) : 
% 		       CASES a OF 
% 		         OUT_CreateWrapKey(wk,m) : TPM_Quote(wk,n,pm) 
% 			 ELSE TPM_Noop(a) 
% 		       ENDCASES))
% 		  (state) IN
% 	OUT_CreateWrapKey?(memory(s)(0)) => LET key=wrappedKey(memory(s)(0)) IN
%  	createWrapKey?(pk,k) => 
%         a=OUT_Quote(map(pcrs(state),pm),
% 	            tpmQuote(map(pcrs(state),pm),n,signed(private(key),clear)),
% 		    TPM_SUCCESS)
	

  %% Monotonicity of locality
  %% Assuming that we're not resetting or powering on, locality goes down
  %% or remains the same
  %% proved - Fri Sep 21 15:07:30 CDT 2012
  monotonic_locality: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c)) =>
        locality(s) >= locality(executeCom(s,c));

  pcrs_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR
	  ABS_sinit?(c) OR 
	  ABS_senter?(c) OR 
	  ABS_Extend?(c)) =>
      pcrs(s) = pcrs(executeCom(s,c));

  srk_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) Or
      	  ABS_TakeOwnership?(c)) =>
        srk(s) = srk(executeCom(s,c));

  ek_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR
          ABS_CreateEndorsementKeyPair?(c) OR
	  ABS_CreateRevocableEK?(c) OR
	  ABS_RevokeTrust?(c) ) =>
        ek(s) = ek(executeCom(s,c));

  keys_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR 
    	  ABS_LoadKey2?(c) OR
	  ABS_ActivateIdentity?(c) OR
	  ABS_OwnerClear?(c) OR
	  ABS_ForceClear?(c) OR
	  ABS_RevokeTrust?(c)) =>
      keys(s) = keys(executeCom(s,c));

  postInit_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c)) =>
        postInitialize(stanyFlags(s)) = 
		postInitialize(stanyFlags(executeCom(s,c)));

  disableForceClear_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR
      	  ABS_DisableForceClear?(c)) =>
        disableForceClear(s) = disableForceClear(executeCom(s,c));

  restore_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR
      	  ABS_SaveState?(c)) =>
        restore(s) = restore(executeCom(s,c));

  memory_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) OR ABS_Init?(c) OR
      	  ABS_save?(c)) =>
        memory(s) = memory(executeCom(s,c));

  permFlags_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c) OR
          ABS_DisableOwnerClear?(c) OR 
	  ABS_ForceClear?(c) OR
	  ABS_OwnerClear?(c) OR 
	  ABS_TakeOwnership?(c) OR
	  ABS_CreateEndorsementKeyPair?(c) OR
	  ABS_CreateRevocableEK?(c) OR
	  ABS_RevokeTrust?(c)) =>
        permFlags(s) = permFlags(executeCom(s,c));

  permData_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c) OR
      	  ABS_CreateRevocableEK?(c)) =>
        permData(s) = permData(executeCom(s,c));
  

  keyGenCnt_unchanged: THEOREM
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c) OR
      	  ABS_CreateWrapKey?(c) OR ABS_certify?(c) OR
	  ABS_MakeIdentity?(c)) =>
        keyGenCnt(s) = keyGenCnt(executeCom(s,c));
  

  %% Prove that skipping SENTER is detectable by showing the quote following
  %% a command differs when SENTER is excluded.
  %% proved - Tue Jun 12 15:34:24 CDT 2012
  no_senter: THEOREM 
    FORALL (state:tpmAbsState,k:(tpmKey?),hv:HV,n:(tpmNonce?),pm:PCR_SELECTION,i:PCRINDEX) :
      runState(
	TPM_Init
      	>> TPM_Startup(TPM_ST_CLEAR)
      	>> CPU_senter
      	>> CPU_sinit
      	>> TPM_Extend(i,hv)
      	>> TPM_Quote(k,n,pm))
      	(state)
      /=
      runState(
	TPM_Init
	>> TPM_Extend(i,hv)
	>> TPM_Quote(k,n,pm))
	(state)

%   %% TPMs will not lie about who they are.  If the AIK cannot be installed
%   %% then no quote will be generated
%   %% proved - Wed Jul 11 11:28:46 EDT 2012
%   aik_binding: THEOREM
%     FORALL (aik:(tpmKey?),b:(tpmNonce?),pm:PCR_SELECTION,state:tpmAbsState) :
%       LET (a,s) = runState(
%                   TPM_Init
%       		  >> TPM_Startup(TPM_ST_CLEAR)
% 		  >> CPU_senter
% 		  >> CPU_sinit
% 		  >> TPM_Quote(aik,b,pm))
% 		  (state) IN
%        %NOT checkKeyRoot(aik,srk(s)) => 
%        a=OUT_Error(TPM_INVALID_KEYUSAGE);

   %% Simple verification of the quote generation process from init
   %% through generation of the appraiser's quote.  Yay.  This is what
   %% I was after!!
   %%
   %% Memory map:  
   %% 0 -> identity
   %% 1 -> CA cert
   %% 2 -> TPM quote
   %%
   %% Note that the identity is not used in building the final
   %% appraiser's quote
   %% proved Sat Jul 14 11:19:56 CDT 2012
   cert_and_quote_with_prev_key : THEOREM
   FORALL (state:(afterStartup?)
   	  ,n:(tpmNonce?)
	  ,pm:PCRMASK
	  ,idKey:(tpmKey?)
	  ,caDig:(tpmDigest?)) :
    LET (a,s) = runState(
    	      	TPM_MakeIdentity(caDig,idKey)
		>>= CPU_saveOutput(0)
		>>= (LAMBDA (a:tpmAbsOutput) : 
		     CASES a OF
		     OUT_MakeIdentity(aik,idBind,m) : CA_certify(aik,idBind)
		     ELSE TPM_Noop(a)
		     ENDCASES)
% 		>>= CPU_saveOutput(1)
		>>= (LAMBDA (a:tpmAbsOutput) : 
		     CASES a OF
		     OUT_Certify(data,m) : TPM_ActivateIdentity(idKey,data)
		     ELSE TPM_Noop(a)
		     ENDCASES)
		>> CPU_read(0)
		>>= (LAMBDA (a:tpmAbsOutput) : 
		     CASES a OF
		     OUT_MakeIdentity(aik,idBind,m) : TPM_Quote(aik,n,pm)
		     ELSE TPM_Noop(a)
		     ENDCASES)
		>>= CPU_saveOutput(2)
		>> CPU_BuildQuoteFromMem(2,0))
		(state) IN
	makeIdentity?(state,caDig,idKey)
	AND OUT_MakeIdentity?(memory(s)(0)) 
	AND OUT_Quote?(memory(s)(2))
	AND private(idKey)=key(idKey(memory(s)(0)))
	AND caDig=idBinding(memory(s)(0)) =>
	LET pcrs = getPCRs(s`pcrs,pm) IN
	a=OUT_FullQuote(tpmQuote(pcrs,n,signed(private(idKey),clear)),
			tpmIdContents(caDig,idKey,signed(private(idKey),clear)),
			CPU_SUCCESS)
	   
END tpm
