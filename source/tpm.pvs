%% ----
%%
%% TPM Theory
%%
%% Author: Perry Alexander, Brigid Halling
%% Date: Mon Nov 28 01:09:39 CST 2011
%%
%% Description: Basic model of a TPM using a monadic state model
%% 
%% Dependencies:
%%  StateMonad.pvs
%%  key.pvs
%%  pcr.pvs
%%
%% Todo: (key - => pending, + => done)
%% ----

%% Standard Error IDs
%%  0 = "Bad identity record"
%%  1 = "Bad input key"
%%  2 = "bad session key"
%%  4 = "bad quote parts"
%%  5 = "Clear Disabled"

tpm [ B:TYPE+ % BLOB
      , HV:TYPE+ % Hash value
      , hash:[B->HV] % Hash function
%      , K:TYPE+ % Key
     ] : THEORY

  BEGIN

  ASSUMING
    % Assume that different blobs always have different hashes
    unique_hash: ASSUMPTION
      FORALL (b0,b1:B) : hash(b0)=hash(b1) iff b0=b1;
  ENDASSUMING

  K : TYPE = nat;

  IMPORTING pcr[HV];
  IMPORTING key[B,K,HV];
  IMPORTING ReturnCodes;
  IMPORTING startupData[B,K,HV];
  IMPORTING PermanentFlags;
  IMPORTING PermanentData[HV];

  SML : TYPE = list[HV];

  %% State monad output type
  tpmAbsOutput : DATATYPE
  BEGIN
    outNothing : outNothing?
    outError(m:ReturnCode) : outError?
    outQuote(oqk:KEY,oqnon:BLOB,oqpcrs:list[PCR],m:ReturnCode) : outQuote?
    outWrapKey(owk:wrapKey,m:ReturnCode) : outWrapKey?
    outAsymKey(oask:KEY,m:ReturnCode) : outAsymKey?
    outSymKey(osk:KEY,m:ReturnCode) : outSymKey?
    outBlob(obl:BLOB,m:ReturnCode) : outBlob?
    outCertReq(ocertaik:wrapKey,ocertek:(asymKey?), m:ReturnCode) : outCertReq?
    outIdentity(oidentaik:wrapKey,oidentc:(outCertReq?),
                m:ReturnCode) : outIdentity?
    outIdentActivation(oactc:(certBlob?),osessk:(symKey?),oactek:(asymKey?),
                       m:ReturnCode) : outIdentActivation?
    outFullQuote(ofullqc:(certBlob?),ofullqsml:SML,ofullqq:(outQuote?),
                 m:ReturnCode) : outFullQuote?
    outPCR(pcr:PCR,m:ReturnCode) : outPCR?
  END tpmAbsOutput;

  IMPORTING memory[tpmAbsOutput,outNothing];

  %% State monad input type.  All inputs are in the form of a command with
  %% parameters.
  tpmAbsInput : DATATYPE
  BEGIN
  %% Startup commands
    ABS_Reset : ABS_Reset? %unimplemented
    ABS_Init : ABS_Init? 
    ABS_SaveState : ABS_SaveState?
    ABS_Startup(startupType : TPM_STARTUP_TYPE) : ABS_Startup?
  %% Protected Storage Commands
    ABS_Seal(sk:(asymKey?),data:BLOB) : ABS_Seal?
    ABS_Unseal(s:(sealBlob?),uk:(asymKey?)) : ABS_Unseal?   
    ABS_UnBind(inData:(encryptBlob?),dk:(asymKey?)) : ABS_UnBind?
    ABS_CreateWrapKey(parentk:(asymKey?),wk_auth:AUTHDATA): ABS_CreateWrapKey?  
  %% Key Management Commands
    ABS_LoadKey2(lk:wrapKey): ABS_LoadKey2? 
  %% Measurement Collection Commands
    ABS_Extend(h:HV,i:PCRINDEX) : ABS_Extend?
  %% Measurement Reporting Commands
    ABS_PcrRead(ind:PCRINDEX) : ABS_PcrRead?
    ABS_Quote(aik:wrapKey,nonce:BLOB,pm:PCRMASK) : ABS_Quote?
  %% AIK Commands
    ABS_MakeIdentity(auth:AUTHDATA) : ABS_MakeIdentity?
    ABS_ActivateIdentity(caik:wrapKey,k:(symKey?)) : ABS_ActivateIdentity?
  %% Cryptographic Commands
    ABS_Sign(sk:KEY,saik:wrapKey,sb:BLOB) : ABS_Sign?
  %% TPM Ownership Commands
    ABS_TakeOwnership : ABS_TakeOwnership?
  %% Operational Flags Commands
    ABS_OwnerClear(authK:(asymKey?)) : ABS_OwnerClear? 
    ABS_ForceClear : ABS_ForceClear? 
    ABS_DisableOwnerClear : ABS_DisableOwnerClear? 
    ABS_DisableForceClear : ABS_DisableForceClear? 
  %% Software Commands
    ABS_senter : ABS_senter? % implemented all actions as one senter
    ABS_sinit : ABS_sinit? % partially implemented
    ABS_save(i:nat,v:tpmAbsOutput) : ABS_save?
    ABS_read(i:nat) : ABS_read?
    ABS_Data_Bind(k:KEY,d:BLOB) : ABS_Data_Bind?
  %% CA Commands
    ABS_certify(aik:wrapKey,ek:(asymKey?)) : ABS_certify?
  %% Invented, imaginary Commands
    noopCom : noopCom?
  END tpmAbsInput;

  %% sinit blob instance for measurement
  sinit : B;

  %% mle blob instance for measurement
  mle : B;

  %% Initial key values not generated by TPM
  ekKeyVal : K = 0;
  srkKeyVal : K = 1;
  caKeyVal : K = 2;

  %% Initial key count value for initializing TPM
  initKeyVal : K = 100;

  %% Key definitions that make ek and srk values asymmetric keys.
  ekVal : KEY = asymKey(ekKeyVal);
  srkVal : KEY = asymKey(srkKeyVal);
  caVal : KEY = asymKey(caKeyVal); % Certificate Authority key

  %% Abstract TPM State with keys, PCR array and locality
  tpmAbsState : TYPE = [#
  	      	       restore : restoreStateData,
                       memory : mem,
                       postInit : bool,
                       srk : (asymKey?),
		       ek : (asymKey?),
		       keyGenCnt : K,
		       keys : KEYSET,
                       pcrs : PCRS,
		       locality : LOCALITY,
		       permFlags : PermFlags,
		       permData : PermData,
		       disableForceClear : bool
		    #];

  %% Well formedness condition for abstract states.  Currently unused, but we
  %% should show that forall commands, well formed input generates well formed
  %% output.

  wellFormed?(s:tpmAbsState):bool = wellFormedRestore?(restore(s));

  IMPORTING StateMonad[tpmAbsOutput,tpmAbsState];

  %% Define some common TPM states and state operations
  
  %% Unknown state
  tpmUnknown : tpmAbsState

  %% Power on state after init is raised by hardware.
  tpmPostInit : (wellFormed?) = (#
                         pcrs:=pcrsPower
			 , postInit:=true
                         , locality:=4
			 , keys:=emptyset
			 , srk:=private(srkVal)
			 , ek:=private(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=initSaveData
			 , permFlags:=permFlagsInit
			 , permData:=permDataInit
			 , disableForceClear:=FALSE
			 #);

  %% Standard initial state following startup command with the TPM_ST_CLEAR
  %% option set.  Note that this should be checked against the spec before
  %% asserting goodness.
  tpmStartup : (wellFormed?) = (#
                         pcrs:=pcrsReset(allResetAccess)
			 , postInit:=false
			 , locality:=4
			 , keys:=emptyset
			 , srk:=private(srkVal)
			 , ek:=private(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=initSaveData
			 , permFlags:=permFlagsInit
			 , permData:=permDataInit
			 , disableForceClear:=FALSE
			 #);

  %% Generate a new state from restore data.  Basically this is a clear
  %% restart with pcrs, keys, and pcr flags coming from the restore
  %% data.  Note that this function assumes valid data and will behave
  %% badly otherwise
  tpmRestore(rd:(wellFormedRestore?)) : (wellFormed?) = (#
                         pcrs:=pcrs(rd)
			 , postInit:=false
			 , locality:=4
			 , keys:=keys(rd)
			 , srk:=private(srkVal)
			 , ek:=private(ekVal)
		         , keyGenCnt:=initKeyVal
			 , memory:=empty
			 , restore:=rd
			 , permFlags:=permFlags(rd)
			 , permData:=permData(rd)
			 , disableForceClear:=FALSE
                         #)

  %% Predicate to determine if startup has occured.  Used as types
  %% (afterInit?) is the set of states occuring immediately after TPM_Init
  %% (afterStartup?) is the set of states occuring immediately after
  %% TPM_Startup
  afterInit?(s:tpmAbsState):bool = postInit(s);
  afterStartup?(s:tpmAbsState):bool = NOT postInit(s);

  %% Standard operations on TPM state definition above.  All such
  %% functions end with State to indicate they operate on the state
  %% value rather than on the TPM monad.  Note that key set and pcr
  %% manipulation functions are defined externally in key.pvs and
  %% pcr.pvs respectively

  %% Reset PCRs as performed by SENTER.
  pcrsResetSenterState(s:tpmAbsState) : tpmAbsState =
    s WITH [`pcrs := pcrsSenter(pcrs(s),pcrAttrib(permData(s)))];

  %% Decrease locality value
  changeLocalityState(s:tpmAbsState) : tpmAbsState =
    s WITH [`locality := IF locality(s) > 0
                         THEN locality(s) - 1
			 ELSE 0
			 ENDIF];
  
  %% Generate a new key
  genKeyState(s:tpmAbsState) : tpmAbsState =
    s WITH [`keyGenCnt := keyGenCnt(s)+1];

  %% Revoke key operation on TPM state
  revokeKeyState(s:tpmAbsState,k:wrapKey) : tpmAbsState =
    s WITH [`keys := removeKey(k,keys(s))];

  %% Install key operation on TPM state.
  loadKey2State(s:tpmAbsState,k:wrapKey) : tpmAbsState =
    s WITH [`keys := addKey(k,srk(s),keys(s))];

  %% Extend operation on TPM state
  extendState(s:tpmAbsState,n:PCRINDEX,h:HV) : tpmAbsState =
    s WITH [`pcrs := pcrsExtend(pcrs(s),n,h)];

  % Use an AIK.  This is currently unimplemented.
  activateIdentityState(s:tpmAbsState,a:wrapKey) : tpmAbsState =
    loadKey2State(s,a);

  clear(s:tpmAbsState) : tpmAbsState = %not fully implemented
    s WITH [`keys:=emptyset]

  ownerClearState(s:tpmAbsState,auth:(asymKey?)) : tpmAbsState =
    IF auth = private(srk(s)) AND disableOwnerClear(permFlags(s))=FALSE
      THEN clear(s)
      ELSE s
    ENDIF

  forceClearState(s:tpmAbsState) : tpmAbsState = 
    IF s`disableForceClear=FALSE
      THEN clear(s)
      ELSE s
    ENDIF
  
  disableOwnerClearState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`permFlags(disableOwnerClear):=TRUE];

  disableForceClearState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`disableForceClear:=TRUE];

  saveState(s:tpmAbsState) : tpmAbsState =
    s WITH [`restore:=saveState(keys(s)
                                , ek(s)
		      		, srk(s)
				, keyGenCnt(s)
		      		, pcrs(s)
		      		, permFlags(s)
		      		, permData(s)
		      		)];

  restoreState(s:tpmAbsState) : tpmAbsState =
    IF valid?(restore(s))
       THEN LET rs=restore(s) IN
             (#
              restore := rs
	      , memory := memory(s)
	      , postInit := FALSE
	      , ek := ek(rs)
	      , srk := srk(rs)
	      , pcrs := pcrs(rs)
	      , keys := keys(rs)
	      , keyGenCnt:=keyGenCnt(rs)
	      , locality := 3
	      , permFlags := permFlags(rs)
	      , permData := permData(rs)
	      , disableForceClear := FALSE
            #)
       ELSE s
    ENDIF;

  % deactivate by going back to init.  Not sure this is correct.
  deactivateState(s:tpmAbsState) : tpmAbsState = 
    s WITH [`postInit := TRUE];

  % save a value to external memory
  saveToMemState(s:tpmAbsState,i:nat,v:tpmAbsOutput) : tpmAbsState =
    s WITH [`memory := updateLoc(memory(s),i,v)];

  %% What we want to generate with each command is a pair of type
  %% [tpmAbsOut,tpmAbsState].  executeCom generates the the state
  %% from a TPM state and command while the upcoming outputCom
  %% generates the corresponding output.  Thus, to execute any
  %% operation, both executeCom and outputCom must be used

  %% Run if TPM_Init has run but TPM_Startup has not
  executeComPostInit(s:(afterInit?),c:tpmAbsInput) : tpmAbsState =
    CASES c OF
      ABS_Startup(t) : CASES t OF 
      		        TPM_ST_CLEAR : tpmStartup,
    			TPM_ST_STATE : restoreState(s),
    			TPM_ST_DEACTIVATED : deactivateState(s)
                       ENDCASES
      ELSE s
    ENDCASES;

  %% Run if ABS_Startup has run after TPM_Init
  executeComStartup(s:(afterStartup?),c:tpmAbsInput) : tpmAbsState = 
    CASES c OF
      ABS_LoadKey2(k): loadKey2State(s,k), 
      ABS_Extend(h,n) : extendState(s,n,h),
      ABS_ActivateIdentity(a,k) : activateIdentityState(s,a),
      ABS_Init : tpmPostInit,
      ABS_CreateWrapKey(parent,k_auth) : genKeyState(s),
      ABS_MakeIdentity(auth) : genKeyState(s), 
      ABS_certify(aik,ek) : genKeyState(s),
      ABS_SaveState : saveState(s),
      ABS_OwnerClear(k): ownerClearState(s,k),
      ABS_ForceClear: forceClearState(s),
      ABS_DisableOwnerClear: disableOwnerClearState(s),
      ABS_DisableForceClear: disableForceClearState(s),
      ABS_senter : 
        changeLocalityState(extendState(pcrsResetSenterState(s),0,hash(sinit))),
      ABS_sinit : changeLocalityState(extendState(s,0,hash(mle))),
      ABS_save(i,v) : saveToMemState(s,i,v)
      ELSE s
  ENDCASES;
  
  %% Execute a command on state generating a new state.  Commands execution
  %% should be blocked if startup has not run and postInit=true.
  executeCom(s:tpmAbsState,c:tpmAbsInput) : tpmAbsState =
    IF afterInit?(s)
       THEN executeComPostInit(s,c)
       ELSE executeComStartup(s,c)
    ENDIF;

  
  % Output secret sealed with asymetric key 
  sealOut(s:tpmAbsState,k:(asymKey?),data:BLOB) : tpmAbsOutput = 
    IF data = nothing
      THEN outError(TPM_BAD_PARAMETER)
      ELSE outBlob(sealBlob(k,pcrs(s),data),TPM_SUCCESS)
    ENDIF

  % Output secret unsealed with an asymetric key and PCRs 
  unsealOut(s:tpmAbsState,d:(sealBlob?),k:(asymKey?)) : tpmAbsOutput = 
    LET b:BLOB = unseal(d,pcrs(s),k) IN
    IF nothing?(b)
      THEN outError(TPM_NOTSEALED_BLOB)
      ELSE outBlob(b,TPM_SUCCESS)
    ENDIF

  % Output decrypted key
  unBindOut(s:tpmAbsState,d:(encryptBlob?),k:(asymKey?)) : tpmAbsOutput =
    LET b:BLOB = decrypt(d,k) IN
%% TODO: double check command specificiations... this might be okay without IF stmt
%      IF nothing?(b)
%        THEN outError()
%        ELSE 
       outBlob(b,TPM_SUCCESS)
%      ENDIF
    

  % Generate a NEW RANDOM key pair.
  createWrapKeyOut(s:tpmAbsState,parent:(asymKey?),a:AUTHDATA):tpmAbsOutput = 
     LET wk:wrapKey = (#
     	 	      parentKey:=parent, 
		      childKey:=asymKey(keyGenCnt(s))
		      #)
     IN outWrapKey(wk,TPM_SUCCESS)

  % Output PCR of given index
  pcrReadOut(s:tpmAbsState,ind:PCRINDEX) : tpmAbsOutput = 
  %% TODO: will ind not be allowed to be > 23 because of defn of PCRINDEX?
%     IF ind > 23
%       THEN outError(TPM_BADINDEX) 
%       ELSE 
      	   LET p = pcrs(s) IN outPCR(p(ind),TPM_SUCCESS)
%     ENDIF;

  % Output PCRs from a state as quote
  quoteOut(s:tpmAbsState,k:wrapKey,n:BLOB,pm:PCRMASK) : tpmAbsOutput =
  %% TODO: will pm be allowed to have elements > 23? see pcrReadOut 
%     IF some((LAMBDA (x:nat):x>23),pm)
%       THEN outError(TPM_INVALID_PCR_INFO)
%       ELSE 
      	   IF checkKeyRoot(k,srk(s))
      	     THEN outQuote(private(childKey(k)),n,getPCRs(s`pcrs,pm),TPM_SUCCESS)
      	     ELSE outError(TPM_INVALID_KEYUSAGE) %% TODO: double check this
	   ENDIF
%     ENDIF;


  % Output a newly generated AIK.  Note that a simulates the new aik.
  makeIdentityOut(s:tpmAbsState,auth:AUTHDATA) : tpmAbsOutput =
    LET waik:wrapKey = (# 
    		       parentKey:=srk(s),
		       childKey:=asymKey(keyGenCnt(s))
		       #) 
    IN outIdentity(waik,outCertReq(waik,ekVal,TPM_SUCCESS),TPM_SUCCESS);

  % Retrieve a key if a can be installed
  %% TODO: Activiate identity needs more work
  activateIdentityOut(s:tpmAbsState,a:wrapKey,k:(symKey?)) : tpmAbsOutput =
    IF checkKeyRoot(a,srk(s)) 
      THEN outSymKey(k,TPM_SUCCESS) 
      ELSE outError(TPM_BAD_PARAMETER)
    ENDIF;

  % Sign a blob if signing key isn't aik
  signOut(s:tpmAbsState,sk:KEY,aik:wrapKey,sb:BLOB) : tpmAbsOutput =
    IF sk /= childKey(aik)
     THEN outBlob(signBlob(sk,sb),TPM_SUCCESS)
     ELSE outError(TPM_INVALID_KEYUSAGE)
    ENDIF;
    
  % NEED TO ENSURE NEW, RANDOM SRK KEY PAIR
  takeOwnershipOut : tpmAbsOutput =
  %% TODO: Lots of flags for this one.
    outAsymKey(srkVal,TPM_SUCCESS);

  ownerClearOut(s:tpmAbsState,auth:(asymKey?)) : tpmAbsOutput = 
    IF auth = private(srk(s))
      THEN IF disableOwnerClear(permFlags(s))
      	    THEN outError(TPM_CLEAR_DISABLED)
	    ELSE outNothing
	   ENDIF
      ELSE outError(TPM_AUTHFAIL)
    ENDIF

  forceClearOut(s:tpmAbsState) : tpmAbsOutput =
    IF disableForceClear(s)
      THEN outError(TPM_CLEAR_DISABLED)
      ELSE outNothing
    ENDIF

  % Generate a certified AIK from an AIK.  Certification assumes that the
  % EK really does belong to the TPM.  We're abstracting away that check.
  certOut(s:tpmAbsState,aik:wrapKey,ek:(asymKey?)) : tpmAbsOutput =
    outIdentActivation(certBlob(private(caVal),aik),symKey(keyGenCnt(s)),ek,TPM_SUCCESS);

  % Read a value and output
  readOut(s:tpmAbsState,i:nat) : tpmAbsOutput =
    memory(s)(i);
  
  dataBindOut(s:tpmAbsState,k:KEY,d:BLOB) : tpmAbsOutput = 
    outBlob(encryptBlob(k,d),TPM_SUCCESS);

  %% Run if TPM_Init has run but TPM_Startup has not
  outputComPostInit(s:(afterInit?),c:tpmAbsInput) : tpmAbsOutput =
    outNothing;

  %% Generate output from a command and state 
  %% Run if ABS_Startup has run after TPM_Init
  outputComStartup(s:(afterStartup?),c:tpmAbsInput) : tpmAbsOutput = 
    CASES c OF
      ABS_Seal(k,data) : sealOut(s,k,data),
      ABS_Unseal(d,k) : unsealOut(s,d,k),
      ABS_UnBind(d,k) : unBindOut(s,d,k),
      ABS_CreateWrapKey(parent,k_auth) : createWrapKeyOut(s,parent,k_auth),
      ABS_PcrRead(ind) : pcrReadOut(s,ind),
      ABS_Quote(k,n,pm) : quoteOut(s,k,n,pm),
      ABS_MakeIdentity(auth) : makeIdentityOut(s,auth), 
      ABS_ActivateIdentity(a,k) : activateIdentityOut(s,a,k),
      ABS_Sign(sk,aik,sb) : signOut(s,sk,aik,sb),
      ABS_TakeOwnership : takeOwnershipOut,
      ABS_OwnerClear(k) : ownerClearOut(s,k),
      ABS_ForceClear : forceClearOut(s),
      ABS_certify(aik,ek) : certOut(s,aik,ek),
      ABS_read(i) : readOut(s,i),
      ABS_Data_Bind(k,d) : dataBindOut(s,k,d)
    ELSE outNothing
  ENDCASES;
  
  %% Execute a command on state generating a new state.  Commands execution
  %% should be blocked if startup has not run and postInit=true.
  outputCom(s:tpmAbsState,c:tpmAbsInput) : tpmAbsOutput =
    IF afterInit?(s)
       THEN outputComPostInit(s,c)
       ELSE outputComStartup(s,c)
    ENDIF;



  %% CPU Command Definitions

  %% Requires use of bind
  CPU_saveOutput(i:nat) : [tpmAbsOutput -> State] =
      useOutputStateOutput(outNothing,
               (LAMBDA (a:tpmAbsOutput):
                  (LAMBDA (s:tpmAbsState):
		    executeCom(s,ABS_save(i,a)))),
               (LAMBDA (a:tpmAbsOutput):
                  (LAMBDA (s:tpmAbsState):
		    a)));

  CPU_read(i:nat) : State =
     output(outNothing,
            (LAMBDA (s:tpmAbsState): outputCom(s,ABS_read(i))));

  %% Call SENTER 
  CPU_senter : State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_senter)));

  %% Reset the TPM by senter call - depreciated - DO NOT USE
  senterResetTPM : State = put(outNothing,tpmStartup);

  %% Measure sinit by senter call - depreciated - DO NOT USE
  %senterHashSinitTPM : State = TPM_Extend(hash(sinit),0);

  %% Call sinit for initial measurements
  CPU_sinit : State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_sinit)));
 
  %% Build a quote for the appraiser from the quote, cert, and log
  buildQuote(q:(outQuote?),ca:(outIdentActivation?),sml:SML,
             sessk:(symKey?)):tpmAbsOutput =
    IF sessk=osessk(ca)
     THEN outFullQuote(oactc(ca),sml,q,TPM_SUCCESS)
     ELSE outError(TPM_INAPPROPRIATE_SIG) %% TODO: Double check this
    ENDIF;

  CPU_BuildQuoteFromMem(q,ca,sessk:nat,sml:SML):State =
    output(outNothing,
            (LAMBDA (s:tpmAbsState) :
	       LET theMem = memory(s) IN
	         IF outIdentActivation?(theMem(sessk))
		    AND outIdentActivation?(theMem(ca))
		    AND outQuote?(theMem(q))
                 THEN buildQuote(theMem(q),theMem(ca),sml,osessk(theMem(sessk)))
		 ELSE outError(TPM_FAIL) %% TODO: Incorrect
		 ENDIF));

  %% CA Command Definitions
  %% Invoke the certification authority
  CA_certify(cr:(outCertReq?)) : State =
     modifyOutput(outNothing,
            (LAMBDA (s:tpmAbsState) :
	       executeCom(s,ABS_certify(ocertaik(cr),ocertek(cr)))),
            (LAMBDA (s:tpmAbsState) :
               outputCom(s,ABS_certify(ocertaik(cr),ocertek(cr)))));

  %% Assure the CA generates an appropriate cert from the AIK and Ek
  %% proved - Wed Jul 11 13:14:11 EDT 2012
  gen_cert: THEOREM 
    FORALL (aik:wrapKey,ek:(asymKey?),state:(afterStartup?),k:(symKey?)) :
      LET (a,s) = runState(
      	  	  CA_certify(outCertReq(aik,ek,TPM_SUCCESS)))
		  (state) IN
        a = outIdentActivation(
                 certBlob(private(asymKey(caKeyVal)),aik),
                 symKey(keyGenCnt(state)),
                 ek,
		 TPM_SUCCESS)
    AND s = state WITH [`keyGenCnt := keyGenCnt(state)+1];


  %% TPM Command Definitions - Note that all commands used by the TPM
  %% have the TPM suffix to distinguish from operations on tpm state.
  %% Commands thus far are defined as state transforming or output
  %% generating.  This does not exclude the eventuality of doing both.

  %% No-op - not a real TPM command
  TPM_Noop : [tpmAbsOutput -> State] =
    (LAMBDA (a:tpmAbsOutput): state((LAMBDA(s:tpmAbsState) : (a,s))));

  %% TPM is off - not a real TPM command
  TPM_Off : State = put(outNothing,tpmUnknown);

  %% Power up the TPM and hit the TPM_Init signal
  TPM_Init : State = put(outNothing,tpmPostInit);

  %% Save the TPM state in preparation for restore at startup
  TPM_SaveState : State =
    modify(outNothing,
            (LAMBDA (s:tpmAbsState):executeCom(s,ABS_SaveState)))
  
  %% Save state actually saves the correct information.
  %% proved - Fri Sep 14 11:20:25 CDT 2012
  save_state_post : THEOREM
    FORALL (s0:(afterStartup?)) : 
      LET (a,s) = runState(TPM_SaveState)(s0) IN
       LET save = restore(s) IN
        valid?(save)
	AND keys(save) = keys(s0)
	AND ek(save) = ek(s0)
	AND srk(save) = srk(s0)
	AND FORALL (i:PCRINDEX) : 
	      IF pcrReset(pcrAttrib(permData(save))(i))
	         THEN pcrs(save)(i) = resetOne
		 ELSE pcrs(save)(i) = pcrs(s0)(i)
	      ENDIF
	AND permFlags(save) = permFlags(s0)
	AND permData(save) = permData(s0)

  %% Start up the TPM after TPM_Init
  TPM_Startup(st:TPM_STARTUP_TYPE) : State =
    modify(outNothing,
            (LAMBDA (s:tpmAbsState):executeCom(s,ABS_Startup(st))));

  %% TPM_Startup post condition covering three major cases: clear, restore
  %% state and deactivate.
  %% proved - Sat Sep 15 09:58:36 CDT 2012
  startup_post : THEOREM
    FORALL (s0:(afterInit?), f:TPM_STARTUP_TYPE) : 
      LET (a,s) = runState(TPM_Startup(f))(s0) IN
       LET save = restore(s) IN
        CASES f OF
          TPM_ST_CLEAR : s = tpmStartup,
	  TPM_ST_STATE : valid?(save) AND wellFormedRestore?(save) =>
	                      keys(save) = keys(s)
			      AND ek(save) = ek(s)
			      AND srk(save) = srk(s)
			      AND FORALL (i:PCRINDEX) : 
	      		      	    IF pcrReset(pcrAttrib(permData(save))(i))
	         		    THEN pcrs(save)(i) = resetOne
		 		    ELSE pcrs(save)(i) = pcrs(s)(i)
	      			    ENDIF
			      AND permFlags(save) = permFlags(s)
			      AND permData(save) = permData(s),
	  TPM_ST_DEACTIVATED : postInit(s)
        ENDCASES

  %% Prove that the only command that can run and do anyting folling a
  %% TPM_Init is TPM_Startup.  If anything else tries to run, nothing happens. 
  %% Note the use of an "anything" command in the first command sequence.
  startup_after_init: THEOREM 
    FORALL (s:tpmAbsState,a:tpmAbsOutput,c:tpmAbsInput) :
      NOT ABS_Startup?(c) =>
        LET (a0,s0) = runState(TPM_Init >> state(LAMBDA (s:tpmAbsState):(a,executeCom(s,c))))(s) IN
          LET (a1,s1) = runState(TPM_Init)(s) IN
	      s0=s1


  %% Prove that senter after power up results in reset PCRs followed by sinit
  %% measurement.
  %% proved - Tue Jun 12 15:31:12 CDT 2012
  resetMonad: THEOREM 
    FORALL (hv:HV, state:tpmAbsState) :
      LET (a,s) = runState(
      	          TPM_Init
      		  >> TPM_Startup(TPM_ST_CLEAR)
      		  >> CPU_senter
      		  >> CPU_sinit)
      		  (state)
      IN s = changeLocalityState(
               changeLocalityState(
                 extendState(
                   extendState(pcrsResetSenterState(tpmStartup),0,hash(sinit)),0,hash(mle))))
      AND a = outNothing

  %% Extend PCR n with hash value h.
  TPM_Extend(h:HV,n:PCRINDEX):State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_Extend(h,n))));

  %% Extend is antisymmetric if the hash values used for extension are
  %% not equal.  In this example we use the LET form to define
  %% commands directly with monad functions defined in StateMonad.pvs
  antisymmetryMonad: THEOREM 
    FORALL (hv0,hv1:HV,state:(afterStartup?)) :
      LET f1:State =
          modify(outNothing,
                 (LAMBDA (s:tpmAbsState):
		   s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv0)])),
      	f2:State =
          modify(outNothing,
                 (LAMBDA (s:tpmAbsState):
		   s WITH [`pcrs:=pcrsExtend(pcrs(s),0,hv1)])) IN
      hv0/=hv1 =>
        runState(
          f2 >>= (LAMBDA (x:tpmAbsOutput): f1))(tpmStartup)
        /=
        runState(
          f1 >>= (LAMBDA (x:tpmAbsOutput): f2))(tpmStartup)

  %% Extending a reset PCR is antisymmetric if the two values are not equal
  %% Let form used to defined commands for bind.  Will use command forms
  %% later in antisymmetryMonad3
  antisymmetryMonad2: THEOREM 
    FORALL (hv0,hv1:HV) :
      LET 
        f1:State = TPM_Extend(hv0,0),
      	f2:State = TPM_Extend(hv1,0) IN
      (hv0/=hv1 =>
        runState(f2 >> f1)(tpmStartup)
        /=
        runState(f1 >> f2)(tpmStartup))

  %% Extending a reset PCR is antisymmetric if the two values are not equal.
  %% No let form - commands appear directly in bind
  %% Theorem is now false when PCRs other than PCR0 are included.
  antisymmetryMonad3: THEOREM 
    FORALL (hv0,hv1:HV) :
      hv0/=hv1 =>
         runState(TPM_Extend(hv1,0)
		>> TPM_Extend(hv0,0))
	   (tpmStartup)
       /=
         runState(TPM_Extend(hv0,0)
		>> TPM_Extend(hv1,0))
	   (tpmStartup)


  %% Establish SRK
  TPM_TakeOwnership : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_TakeOwnership)));

  take_ownership_post: THEOREM 
    FORALL (state:(afterStartup?)) : 
      LET (a,s) = runState(
		 TPM_TakeOwnership)
		 (state) IN
          a = outAsymKey(srkVal,TPM_SUCCESS)
      AND s = state;

  TPM_OwnerClear(auth:(asymKey?)) : State = 
     modifyOutput(outNothing,
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_OwnerClear(auth))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_OwnerClear(auth)))
	    );

  owner_clear_post: THEOREM FORALL (state:(afterStartup?),k:(asymKey?)) : 
    LET(a,s) = runState(
	       TPM_OwnerClear(k))
	       (state) IN   
    IF k=private(srk(s))
      THEN IF disableOwnerClear(permFlags(s))
      	    THEN a=outError(TPM_CLEAR_DISABLED) AND keys(s)=keys(state)
	    ELSE a=outNothing AND keys(s) = emptyset
	   ENDIF
      ELSE a=outError(TPM_AUTHFAIL) AND keys(s)=keys(state)
    ENDIF

  TPM_ForceClear : State = 
     modifyOutput(outNothing,
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_ForceClear)),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_ForceClear))
	    );

  force_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
	       TPM_ForceClear)
	       (state) IN
	IF disableForceClear(state)
      	  THEN a=outError(TPM_CLEAR_DISABLED) AND keys(s)=keys(state)
      	  ELSE a=outNothing and keys(s)=emptyset
    	ENDIF

  TPM_DisableOwnerClear : State = 
     modify(outNothing,
		(LAMBDA (s:tpmAbsState) : executeCom(s,ABS_DisableOwnerClear)));

  disable_owner_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
    	       TPM_DisableOwnerClear)
	       (state) IN
      disableOwnerClear(permFlags(s)) = TRUE
      AND a = outNothing;

  TPM_DisableForceClear : State =
     modify(outNothing,
		(LAMBDA (s:tpmAbsState) : executeCom(s,ABS_DisableForceClear)));

  disable_force_clear_post: THEOREM FORALL (state:(afterStartup?)) : 
    LET(a,s) = runState(
    	       TPM_DisableForceClear)
	       (state) IN
      disableForceClear(s) = TRUE
      AND a = outNothing;


  %% Wrap new key k with parent key
  TPM_CreateWrapKey(parent:(asymKey?),k_auth:AUTHDATA) : State = 
     modifyOutput(outNothing,
	  (LAMBDA (s:tpmAbsState) :
	      executeCom(s,ABS_CreateWrapKey(parent,k_auth))),
          (LAMBDA (s:tpmAbsState) :
	      outputCom(s,ABS_CreateWrapKey(parent,k_auth)))
	      );

  create_wrap_key_post: THEOREM 
    FORALL (p,k:(asymKey?),a:AUTHDATA,state:(afterStartup?)) : 
      LET (a,s) = runState(
     	          TPM_CreateWrapKey(p,a))
		  (state) IN
        LET wk : wrapKey = (# parentKey:=p,
                              childKey:=asymKey(keyGenCnt(state)) #) IN
           a = outWrapKey(wk,TPM_SUCCESS)
           AND keyGenCnt(s) = keyGenCnt(state)+1;


  %% Install key k in a TPM
  TPM_LoadKey2(k:wrapKey):State =
    modify(outNothing,
           (LAMBDA (s:tpmAbsState):executeCom(s,ABS_LoadKey2(k))));

  % A key is installed if it is wrapped with SRK
  load_key_post: THEOREM 
    FORALL (k:wrapKey,state:(afterStartup?)) :
      LET (out,s) = runState(
    		    TPM_LoadKey2(k))
		    (state) IN
	checkKey(parentKey(k),srk(state),keys(state))
		      => member(childKey(k),keys(s))
%       IF checkKey(parentKey(k),srk(state),keys(state))
% 		AND not(member(childKey(k),keys(state)))
%          THEN member(childKey(k),keys(s))
% 	 ELSE not(member(childKey(k),keys(s)))
%       ENDIF
	%% TODO: Check bad conditions? Necessary for all commands?
      AND out = outNothing;

  %% A key is installed if it is wrapped with an installed key
  %% proved - Tue Jun 12 15:38:22 CDT 2012
  load_key_post2: THEOREM 
    FORALL (j,k:wrapKey,state:(afterStartup?)) :
      LET (out,s) = runState(
      	  	  TPM_LoadKey2(k)
		  >> TPM_LoadKey2(j))
		  (state) IN
        parentKey(j) = childKey(k) AND parentKey(k) = srk(state) =>
           member(childKey(j),keys(s));
	
  load_key_prev_post: THEOREM 
    FORALL (k,p:(asymKey?),auth:AUTHDATA,state:(afterStartup?)) :
      LET (out,s) = runState(
      	  	    TPM_CreateWrapKey(p,auth)
		    >>= (LAMBDA (a:tpmAbsOutput) :
		    	 CASES a OF
		           outWrapKey(wk,m) : TPM_LoadKey2(wk)
			   ELSE TPM_Noop(a)
			 ENDCASES))
		    (state) IN 
      checkKey(p,srk(state),keys(state)) =>
      		member(asymKey(keyGenCnt(state)),keys(s))
%       IF not(member(k,keys(state))) AND checkKey(p,srk(state),keys(state))
%       	 THEN member(k,keys(s))
% 	 ELSE not(member(k,keys(s)))
%       ENDIF
      AND out = outNothing

  %%install nested wrapped keys?
  nested_wrapped_keys_post: THEOREM 
    FORALL (p:(asymKey?),a1,a2:AUTHDATA,state:(afterStartup?)) :
      LET (a,s) = runState(
		  TPM_CreateWrapKey(p,a1)
		  >>= CPU_saveOutput(0)
		  >>= (LAMBDA (a:tpmAbsOutput) : 
		       CASES a OF 
		         outWrapKey(wk,m) : TPM_LoadKey2(wk) 
			 ELSE TPM_Noop(a) 
		       ENDCASES)
		  >>= (LAMBDA (a:tpmAbsOutput) :
		       CASES a OF
		         outWrapKey(wk,m) : TPM_CreateWrapKey(childKey(wk),a2)
			 ELSE TPM_Noop(a)
		       ENDCASES)
		  >>= CPU_saveOutput(1)
		  >>= (LAMBDA (a:tpmAbsOutput) : 
		       CASES a OF
		         outWrapKey(wk,m) : TPM_LoadKey2(wk) 
			 ELSE TPM_Noop(a) 
		       ENDCASES))
		  (state) IN
	checkKey(p,srk(s),keys(s)) AND outWrapKey?(memory(s)(1)) =>
		 member(childKey(owk(memory(s)(1))),keys(s)) 
% 	AND member(k,keys(s))
	AND a = outNothing



  %% Make a new identity and output it
  TPM_MakeIdentity(a:AUTHDATA) : State =
     modifyOutput(outNothing,
	    (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_MakeIdentity(a))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_MakeIdentity(a)))
	    );

  make_identity_post: THEOREM 
    FORALL (auth:AUTHDATA,state:(afterStartup?)) :
      LET (a,s) = runState(
     	 	   TPM_MakeIdentity(auth))
		 (state) IN
        LET waik:wrapKey = (# parentKey:=srk(s),childKey:=asymKey(keyGenCnt(state)) #) IN
            a = outIdentity(waik,outCertReq(waik,ekVal,TPM_SUCCESS),TPM_SUCCESS)
	AND
	s = state WITH [`keyGenCnt := keyGenCnt(state)+1];
   
  %% Use an AIK
  TPM_ActivateIdentity(a:wrapKey,k:(symKey?)) : State =
     modifyOutput(outNothing,
            (LAMBDA (s:tpmAbsState) : executeCom(s,ABS_ActivateIdentity(a,k))),
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_ActivateIdentity(a,k)))
	    );

  %% Assure that activate idenity installs its AIK and returns K if AIK can
  %% be installed.
  activate_identity_post: THEOREM 
    FORALL (aik:wrapKey,k:(symKey?),state:(afterStartup?)) :
      LET (a,s) = runState(
                  TPM_ActivateIdentity(aik,k))
		  (state) IN
      a = IF checkKeyRoot(aik,srk(state))
            THEN outSymKey(k,TPM_SUCCESS)
	    ELSE outNothing
	  ENDIF
      AND checkKeyRoot(aik,srk(s)) => member(childKey(aik),keys(s));

  activate_prev_post: THEOREM 
    FORALL (aik:(asymKey?),auth:AUTHDATA,state:(afterStartup?),k:(symKey?)) :
      LET  (out,s) = runState(
 		     TPM_MakeIdentity(auth) % identity is output
		     >>= (LAMBDA (a:tpmAbsOutput) : 
		       	  CASES a OF
		            outIdentity(oidentaik,oidentc,m) : TPM_ActivateIdentity(oidentaik,k)
			    ELSE TPM_Noop(a)
			  ENDCASES))
		  (state) IN
      out = outSymKey(k,TPM_SUCCESS);

  %% Generate and output a signature
  TPM_Sign(k:KEY,aik:wrapKey,b:BLOB) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_Sign(k,aik,b))));
	   
  sign_post: THEOREM 
    FORALL (k:KEY,aik:wrapKey,b:BLOB,state:(afterStartup?)) :
      LET(out,s) = runState(
     		  TPM_Sign(k,aik,b))
		  (state) IN
	IF k /= childKey(aik)
	   THEN out = outBlob(signBlob(k,b),TPM_SUCCESS)
	   ELSE out = outError(TPM_INVALID_KEYUSAGE)
	ENDIF
	AND s = state;
% TODO: Need to test to make sure aik parameter is actual aik?

	           	  
  %% Output PCR(i)
  TPM_PcrRead(i:PCRINDEX) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_PcrRead(i))));

  pcr_read_post: THEOREM
    FORALL (i:PCRINDEX,state:(afterStartup?)) : 
      LET(a,s) = runState(
     		  TPM_PcrRead(i))
		  (state) IN
	a = outPCR(pcrs(s)(i),TPM_SUCCESS)
	AND s = state;


  %% Generate and output a quote
  TPM_Quote(k:wrapKey,n:BLOB,pm:PCRMASK) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState) : outputCom(s,ABS_Quote(k,n,pm))));

  %% If nonces don't match, quotes don't match.  We don't care about this
  %% if the a quote cannot be produced.
  %% proved - Fri Jun 22 16:55:16 CDT 2012
  bad_nonce: THEOREM
    FORALL (k:wrapKey, n1,n2:BLOB, pm:PCRMASK, s:tpmAbsState) :
      n1/=n2 AND checkKeyRoot(k,srk(s)) 
      AND afterStartup?(s) =>
       runState(
         TPM_Quote(k,n1,pm))
	 (s)
       /=
       runState(
	 TPM_Quote(k,n2,pm))
	 (s);
  
  %% Bad Signing Key - Man in the Middle Attack - we don't care about this
  %% if either key won't produce a quote.
  %% proved - Fri Jun 22 16:55:56 CDT 2012
  bad_signing_key: THEOREM
    FORALL (n:BLOB, pm:PCRMASK, k0,k1:wrapKey, s:tpmAbsState) :
      LET (a0,s0) = runState(TPM_Quote(k0,n,pm))(s) IN
        LET (a1,s1) = runState(TPM_Quote(k1,n,pm))(s) IN
          private(childKey(k0)) /= private(childKey(k1)) 
	  AND checkKeyRoot(k0,srk(s))
	  AND checkKeyRoot(k1,srk(s))
	  AND afterStartup?(s)
          =>
	  a0 /= a1;
     
  %% Output after going through tpm commands is same as grabbing pcrs
  %% This is one of those theorems where assert must be called before grind
  %% proved - Fri Jun 22 16:56:08 CDT 2012
  check_PCRS: THEOREM (
    FORALL (k:wrapKey,hv:HV,pm:PCRMASK,n:BLOB,state:(afterStartup?)) :
      LET (a,s) = runState(
        	  TPM_Extend(hv,0)
        	  >> TPM_Quote(k,n,pm))
      		  (state) IN
    checkKeyRoot(k,srk(s)) => 
      a = outQuote(private(childKey(k)),n,map(s`pcrs,pm),TPM_SUCCESS));

  %% Prove that quote generation returns the correct PCR.  This theorem
  %% needs to be updated with something cleaner.
  %% proven - Wed Jul 11 10:40:28 EDT 2012
  quote_post: THEOREM 
    FORALL (k:wrapKey,n:BLOB,p:PCRINDEX,state:(afterStartup?)) :
        LET (a,s) = runState(
      	    	    TPM_Quote(k,n,cons(p,null)))
		    (state) IN 
	checkKeyRoot(k,srk(state)) => 
        a = outQuote(private(childKey(k)),
	             n,
		     cons(s`pcrs(p),null),TPM_SUCCESS)
	AND s = state
      
  quote_with_prev_key: THEOREM
    FORALL (k:(asymKey?),state:tpmAbsState,n:BLOB,
            pm:PCRMASK,auth:AUTHDATA) :
      LET (a,s) = runState(
      	  	  TPM_Init
		  >> TPM_Startup(TPM_ST_CLEAR)
		  >> CPU_senter
		  >> CPU_sinit
		  >> TPM_MakeIdentity(auth)
		  >>= (LAMBDA (a:tpmAbsOutput) : 
		       CASES a OF 
		         outIdentity(oidentaik,oidentc,m) : TPM_Quote(oidentaik,n,pm) 
			 ELSE TPM_Noop(a) 
		       ENDCASES))
		  (state) IN
        a = outQuote(private(asymKey(100)),
	             n,
                     map((pcrsSenter(pcrsReset(pcrAttrib(permData(s))),allResetAccess) WITH [(0) := extend(
                                                     extend(reset,hash(sinit)),
                                                     hash(mle))]),
	                 pm),
		     TPM_SUCCESS);


  %% Seal and output a blob (should be binary or data)
  TPM_Seal(k:(asymKey?),data:BLOB) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState): outputCom(s,ABS_Seal(k,data))));

  %% Seal a secret successfully
  seal_post: THEOREM
    FORALL (k:(asymKey?),b:BLOB,state:(afterStartup?)) :
      LET (a,s) = runState(
     	 	  TPM_Seal(k,b))
 		  (state) IN
	IF nothing?(b) 
	  THEN a = outError(TPM_BAD_PARAMETER) 
	  ELSE a = outBlob(sealBlob(k,s`pcrs,b),TPM_SUCCESS)
	ENDIF
	AND s = state


  %% Unseal and output a blob (should be binary or data)
  TPM_Unseal(d:(sealBlob?),k:(asymKey?)) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState): outputCom(s,ABS_Unseal(d,k))));

  unseal_post: THEOREM
    FORALL (j,k:(asymKey?),b:BLOB,pcrs:PCRS,state:(afterStartup?)) :
      LET (out,s) = runState(
                    TPM_Unseal(sealBlob(k,pcrs,b),j))
		    (state) IN
      IF j=private(k) AND pcrs=pcrs(s) AND not(nothing?(b))
         THEN out=outBlob(b,TPM_SUCCESS)
         ELSE out=outError(TPM_NOTSEALED_BLOB) 
      ENDIF 
      AND s = state;  

  unseal_prev_post: THEOREM
    FORALL (k,j:(asymKey?),b:BLOB,pcrs:PCRS,state:(afterStartup?)) :
      LET (out,s) = runState(
      	  	  TPM_Seal(k,b)
		  >>= (LAMBDA (a:tpmAbsOutput) : 
		       CASES a OF
		         outBlob(obl,m) : CASES obl OF
			 		    sealBlob(key,pcrs,blob) :
		       			    	TPM_Unseal(obl(a),j) 
		       				ELSE TPM_Noop(a)
						ENDCASES
			 ELSE TPM_Noop(a)
		       ENDCASES))
		  (state) IN  
	j=private(k) AND pcrs=pcrs(s) AND not(nothing?(b))
	   => out = outBlob(b,TPM_SUCCESS)      
	AND s = state


  %% UnBind encrypted blob (decrypt)
  TPM_UnBind(d:(encryptBlob?),k:(asymKey?)) : State = 
     output(outNothing,
	    (LAMBDA (s:tpmAbsState): outputCom(s,ABS_UnBind(d,k))));

  %% UnBind an encrypted blob successfully
  unBind_post: THEOREM
    FORALL (k,j:(asymKey?),b:BLOB,state:(afterStartup?)) : 
      LET (a,s) = runState(
		  TPM_UnBind(encryptBlob(j,b),k))
		  (state) IN
      j = private(k) =>
         a = outBlob(b,TPM_SUCCESS)
     AND s = state

	
  Tspi_Data_Bind(k:KEY,d:BLOB) : State = 
     output(outNothing,
            (LAMBDA (s:tpmAbsState): outputCom(s,ABS_Data_Bind(k,d))));

  %% UnBind an encrypted blob successfully
  unBind_prev_post: THEOREM 
    FORALL (d:BLOB,k,j:(asymKey?),auth:AUTHDATA,state:tpmAbsState) : 
      LET (a,s) = runState(
                  TPM_Init
      		  >> TPM_Startup(TPM_ST_CLEAR)
		  >> CPU_senter
		  >> CPU_sinit
		  >> TPM_CreateWrapKey(j,auth)
		  >>= LAMBDA (a:tpmAbsOutput) : 
		      CASES a OF 
		        outWrapKey(owk,m) : TPM_LoadKey2(owk) 
			ELSE TPM_Noop(a) 
			ENDCASES
		  >> Tspi_Data_Bind(k,d)
		  >>= LAMBDA (a:tpmAbsOutput) : 
		      CASES a OF
		        outBlob(obl,m) : CASES obl OF
				           encryptBlob(key,blob) : 
					   	TPM_UnBind(obl,private(k)) 
						ELSE TPM_Noop(a) ENDCASES
			ELSE TPM_Noop(a) 
		      ENDCASES)
 		  (state) IN 
 	  j = srk(s) OR  member(j,keys(s)) => 
	  a = outBlob(d,TPM_SUCCESS)
	

  %% Monotonicity of locality
  %% Assuming that we're not resetting or powering on, locality goes down
  %% or remains the same
  %% proved - Fri Sep 21 15:07:30 CDT 2012
  monotonic_locality: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Init?(c) or ABS_Startup?(c)) =>
        locality(s) >= locality(executeCom(s,c));

  pcrs_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Extend?(c) or ABS_Startup?(c) or 
	  ABS_sinit?(c) or ABS_senter?(c) or 
	  ABS_Init?(c)) =>
      pcrs(s) = pcrs(executeCom(s,c));

  srk_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c)) =>
        srk(s) = srk(executeCom(s,c));

  ek_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c)) =>
        ek(s) = ek(executeCom(s,c));

  keys_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c) or 
    	  ABS_LoadKey2?(c) or ABS_ActivateIdentity?(c) or
	  ABS_OwnerClear?(c) or ABS_ForceClear?(c)) =>
      keys(s) = keys(executeCom(s,c));

  postInit_unchanged: THEOREM 
    FORALL (s:tpmAbsState,c:tpmAbsInput) :
      not(ABS_Startup?(c) or ABS_Init?(c)) =>
        postInit(s) = postInit(executeCom(s,c));

  
  %% Prove that skipping SENTER is detectable by showing the quote following
  %% a command differs when SENTER is excluded.
  %% proved - Tue Jun 12 15:34:24 CDT 2012
  no_senter: THEOREM 
    FORALL (k:wrapKey,hv:HV,n:BLOB,pcrMask:PCRMASK,state:tpmAbsState) :
      runState(
	TPM_Init
      	>> TPM_Startup(TPM_ST_CLEAR)
      	>> CPU_senter
      	>> CPU_sinit
      	>> TPM_Extend(hv,0)
      	>> TPM_Quote(k,n,pcrMask))
      	(state)
      /=
      runState(
	TPM_Init
	>> TPM_Extend(hv,0)
	>> TPM_Quote(k,n,pcrMask))
	(state)

  %% TPMs will not lie about who they are.  If the AIK cannot be installed
  %% then no quote will be generated
  %% proved - Wed Jul 11 11:28:46 EDT 2012
  aik_binding: THEOREM
    FORALL (aik:wrapKey,b:BLOB,pm:PCRMASK,state:tpmAbsState) :
      LET (out,s) = runState(
                  TPM_Init
      		  >> TPM_Startup(TPM_ST_CLEAR)
		  >> CPU_senter
		  >> CPU_sinit
		  >> TPM_Quote(aik,b,pm))
		  (state) IN
       NOT checkKeyRoot(aik,srk(s)) => out=outError(TPM_INVALID_KEYUSAGE);

   %% Simple verification of the quote generation process from init
   %% through generation of the appraiser's quote.  Yay.  This is what
   %% I was after!!
   %%
   %% Memory map:  
   %% 0 -> identity
   %% 1 -> CA cert
   %% 2 -> TPM quote
   %%
   %% Note that the identity is not used in building the final
   %% appraiser's quote
   %% proved Sat Jul 14 11:19:56 CDT 2012
   cert_and_quote_with_prev_key: THEOREM
     FORALL (state:tpmAbsState,
	     n:BLOB,
	     pm:PCRMASK,
	     sml:SML,
	     auth:AUTHDATA) :
       LET (out,s) = runState(
                   TPM_Init
 		   >> TPM_Startup(TPM_ST_CLEAR)
 		   >> CPU_senter
 		   >> CPU_sinit
 		   >> TPM_MakeIdentity(auth) % identity is output
		   >>= CPU_saveOutput(0)
		   >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF
			   outIdentity(x,oic,rc) : CA_certify(oic)
			   ELSE TPM_Noop(a)
			 ENDCASES)
	           >>= CPU_saveOutput(1)
	           >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF
			   outIdentActivation(actc,sk,actek,rc) : TPM_ActivateIdentity(wkey(actc),sk)
			   ELSE TPM_Noop(a)
			 ENDCASES)
		   >> CPU_read(0)
		   >>= (LAMBDA (a:tpmAbsOutput) :
		         CASES a OF 
			   outIdentity(aik,ic,rc) : TPM_Quote(aik,n,pm)
			   ELSE TPM_Noop(a)
			 ENDCASES)
		   >>= CPU_saveOutput(2) % Quote is saved in 2
		   >> CPU_BuildQuoteFromMem(2,1,1,sml) % Build the quote
		   )
 		   (state) IN
		   LET wk:wrapKey = (# parentKey:= private(asymKey(srkKeyVal)),
                                       childKey := asymKey(100) #)
				       IN
         out = outFullQuote(certBlob(private(asymKey(caKeyVal)),wk),
                               sml,
                               outQuote(private(asymKey(100)),
                                        n,
                                        map
                                        ((pcrsSenter(pcrsReset(pcrAttrib(permData(s))),pcrAttrib(permData(s)))
                                          WITH [(0)
                                                := extend
                                                   (extend
                                                    (reset, hash(sinit)),
                                                    hash(mle))]),
                                         pm),
					 TPM_SUCCESS),
				TPM_SUCCESS)	    
END tpm
