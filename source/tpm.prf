(tpm
 (unique_hash 0
  (unique_hash-1 nil 3559055101 ("" (postpone) nil nil) nil shostak))
 (tpmPostInit_TCC1 0
  (tpmPostInit_TCC1-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((ekKeyVal const-decl "K" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" key nil)
    (ekVal const-decl "KEY" tpm nil))
   nil))
 (tpmPostInit_TCC2 0
  (tpmPostInit_TCC2-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((srkKeyVal const-decl "K" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" key nil)
    (srkVal const-decl "KEY" tpm nil))
   nil))
 (tpmPostInit_TCC3 0
  (tpmPostInit_TCC3-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((srkKeyVal const-decl "K" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" key nil)
    (srkVal const-decl "KEY" tpm nil) (ekKeyVal const-decl "K" tpm nil)
    (ekVal const-decl "KEY" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (permFlagsInit const-decl "PermFlags" PermanentFlags nil)
    (permDataInit const-decl "PermData" PermanentData nil)
    (initSaveData const-decl "(wellFormedRestore?)" startupData nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (wellFormed? const-decl "bool" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (tpmStartup_TCC1 0
  (tpmStartup_TCC1-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((srkKeyVal const-decl "K" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" key nil)
    (srkVal const-decl "KEY" tpm nil) (ekKeyVal const-decl "K" tpm nil)
    (ekVal const-decl "KEY" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (permFlagsInit const-decl "PermFlags" PermanentFlags nil)
    (permDataInit const-decl "PermData" PermanentData nil)
    (initSaveData const-decl "(wellFormedRestore?)" startupData nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (wellFormed? const-decl "bool" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   nil))
 (tpmRestore_TCC1 0
  (tpmRestore_TCC1-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((srkKeyVal const-decl "K" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (keyFlagsF const-decl "KEY_FLAGS" key nil)
    (srkVal const-decl "KEY" tpm nil) (ekKeyVal const-decl "K" tpm nil)
    (ekVal const-decl "KEY" tpm nil)
    (initKeyVal const-decl "K" tpm nil)
    (wellFormed? const-decl "bool" tpm nil))
   nil))
 (changeLocalityState_TCC1 0
  (changeLocalityState_TCC1-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (executeCom_TCC1 0
  (executeCom_TCC1-1 nil 3558896333 ("" (subtype-tcc) nil nil)
   ((afterInit? const-decl "bool" tpm nil)
    (afterStartup? const-decl "bool" tpm nil))
   nil))
 (loadKey2Out_TCC1 0
  (loadKey2Out_TCC1-1 nil 3560011717 ("" (subtype-tcc) nil nil) nil
   nil))
 (loadKey2Out_TCC2 0
  (loadKey2Out_TCC2-1 nil 3560012009 ("" (subtype-tcc) nil nil) nil
   nil))
 (save_state_post 0
  (save_state_post-1 nil 3559054449 ("" (grind) nil nil)
   ((afterStartup? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (saveState const-decl "(wellFormedRestore?)" startupData nil)
    (saveState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRS type-eq-decl nil pcr nil) (mem type-eq-decl nil memory nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEY type-decl nil key nil) (tpmAbsOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (TPM_SaveState const-decl "State" tpm nil))
   shostak))
 (startup_post 0
  (startup_post-1 nil 3559054449 ("" (grind))
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (restoreState const-decl "tpmAbsState" tpm nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (deactivateState const-decl "tpmAbsState" tpm nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRS type-eq-decl nil pcr nil) (mem type-eq-decl nil memory nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmData type-decl nil key nil) (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (TPM_Startup const-decl "State" tpm nil))
   shostak))
 (load_key_post 0
  (load_key_post-1 nil 3560011753 ("" (grind) nil nil)
   ((TPM_LoadKey2 const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil) (KEY type-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil pcr nil) (tpmData type-decl nil key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (mem type-eq-decl nil memory nil) (PCRS type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (loadKey2Out const-decl "tpmAbsOutput" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (loadKey2State const-decl "tpmAbsState" tpm nil)
    (childKey const-decl "(asymKey?)" key nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (K type-eq-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wrapKey? const-decl "bool" key nil)
    (afterStartup? const-decl "bool" tpm nil))
   shostak))
 (load_key_pred_test_TCC1 0
  (load_key_pred_test_TCC1-1 nil 3560012117 ("" (subtype-tcc) nil nil)
   nil nil))
 (load_key_pred_test 0
  (load_key_pred_test-1 nil 3560012072 ("" (grind) nil nil)
   ((addKey const-decl "KEYSET" key nil)
    (checkKey const-decl "bool" key nil)
    (member const-decl "bool" sets nil)
    (loadKey? const-decl "bool" tpm nil)
    (TPM_LoadKey2 const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil) (KEY type-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil pcr nil) (tpmData type-decl nil key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (mem type-eq-decl nil memory nil) (PCRS type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (loadKey2Out const-decl "tpmAbsOutput" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (loadKey2State const-decl "tpmAbsState" tpm nil)
    (childKey const-decl "(asymKey?)" key nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (K type-eq-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wrapKey? const-decl "bool" key nil)
    (afterStartup? const-decl "bool" tpm nil))
   shostak))
 (load_key_post2 0
  (load_key_post2-1 nil 3560012127 ("" (grind) nil nil)
   ((afterStartup? const-decl "bool" tpm nil)
    (wrapKey? const-decl "bool" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (checkKey const-decl "bool" key nil)
    (addKey const-decl "KEYSET" key nil)
    (add const-decl "(nonempty?)" sets nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (childKey const-decl "(asymKey?)" key nil)
    (loadKey2State const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (loadKey2Out const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRS type-eq-decl nil pcr nil) (mem type-eq-decl nil memory nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmData type-decl nil key nil) (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEY type-decl nil key nil) (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_LoadKey2 const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (loadKey? const-decl "bool" tpm nil)
    (member const-decl "bool" sets nil))
   shostak))
 (bad_nonce 0
  (bad_nonce-1 nil 3559055017
   ("" (grind)
    (("" (decompose-equality -8) (("" (decompose-equality) nil nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pcrData adt-accessor-decl "[(OUT_Quote?) -> list[PCR]]" tpm nil)
    (tpmQuote? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (ReturnCode type-decl nil ReturnCodes nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (CRYPTOSTATUS type-decl nil key nil)
    (tpmQuote adt-constructor-decl
     "[[list[PCR], nat, CRYPTOSTATUS] -> (tpmQuote?)]" key nil)
    (signed? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (signed adt-constructor-decl
     "[[(asymKey?), CRYPTOSTATUS] -> (signed?)]" key nil)
    (private const-decl "(asymKey?)" key nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tpmSymKey? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (symKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (key adt-accessor-decl
     "[d: {x: tpmData | tpmSymKey?(x) OR tpmKey?(x)} ->
   {x: KEY | IF tpmSymKey?(d) THEN symKey?(x) ELSE asymKey?(x) ENDIF}]"
     key nil)
    (clear? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (clear adt-constructor-decl "(clear?)" key nil)
    (TPM_SUCCESS? adt-recognizer-decl "[ReturnCode -> boolean]"
     ReturnCodes nil)
    (TPM_SUCCESS adt-constructor-decl "(TPM_SUCCESS?)" ReturnCodes nil)
    (sig adt-accessor-decl "[(OUT_Quote?) -> (tpmQuote?)]" tpm nil)
    (m shared-adt-accessor-decl
     "[{x: tpmAbsOutput | OUT_Error?(x) OR OUT_Quote?(x) OR OUT_LoadKey2?(x)} ->
   ReturnCode]" tpm nil)
    (digest adt-accessor-decl "[(tpmQuote?) -> list[PCR]]" key nil)
    (nonce adt-accessor-decl "[(tpmQuote?) -> nat]" key nil)
    (tpmID? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmAuthData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmCertReq? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (crs shared-adt-accessor-decl "[{x: tpmData |
              tpmSymKey?(x) OR tpmID?(x) OR tpmAuthData?(x) OR tpmKey?(x)
           OR tpmDigest?(x) OR tpmQuote?(x) OR tpmCertReq?(x)} ->
   CRYPTOSTATUS]" key nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PCRMASK type-eq-decl nil pcr nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wrapKey? const-decl "bool" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TPM_Quote const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil) (KEY type-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil pcr nil) (tpmData type-decl nil key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (mem type-eq-decl nil memory nil) (PCRS type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (childKey const-decl "(asymKey?)" key nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (afterStartup? const-decl "bool" tpm nil)
    (checkKeyRoot const-decl "bool" key nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (K type-eq-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (bad_signing_key 0
  (bad_signing_key-1 nil 3559055017
   ("" (grind)
    (("" (decompose-equality -11)
      (("" (grind)
        (("" (decompose-equality) (("" (decompose-equality) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pcrData adt-accessor-decl "[(OUT_Quote?) -> list[PCR]]" tpm nil)
    (tpmQuote? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (ReturnCode type-decl nil ReturnCodes nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (CRYPTOSTATUS type-decl nil key nil)
    (tpmQuote adt-constructor-decl
     "[[list[PCR], nat, CRYPTOSTATUS] -> (tpmQuote?)]" key nil)
    (signed? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (signed adt-constructor-decl
     "[[(asymKey?), CRYPTOSTATUS] -> (signed?)]" key nil)
    (private const-decl "(asymKey?)" key nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (tpmSymKey? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (symKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (key adt-accessor-decl
     "[d: {x: tpmData | tpmSymKey?(x) OR tpmKey?(x)} ->
   {x: KEY | IF tpmSymKey?(d) THEN symKey?(x) ELSE asymKey?(x) ENDIF}]"
     key nil)
    (clear? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (clear adt-constructor-decl "(clear?)" key nil)
    (TPM_SUCCESS? adt-recognizer-decl "[ReturnCode -> boolean]"
     ReturnCodes nil)
    (TPM_SUCCESS adt-constructor-decl "(TPM_SUCCESS?)" ReturnCodes nil)
    (sig adt-accessor-decl "[(OUT_Quote?) -> (tpmQuote?)]" tpm nil)
    (m shared-adt-accessor-decl
     "[{x: tpmAbsOutput | OUT_Error?(x) OR OUT_Quote?(x) OR OUT_LoadKey2?(x)} ->
   ReturnCode]" tpm nil)
    (crs shared-adt-accessor-decl "[{x: tpmData |
              tpmSymKey?(x) OR tpmID?(x) OR tpmAuthData?(x) OR tpmKey?(x)
           OR tpmDigest?(x) OR tpmQuote?(x) OR tpmCertReq?(x)} ->
   CRYPTOSTATUS]" key nil)
    (tpmCertReq? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmAuthData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmID? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (nonce adt-accessor-decl "[(tpmQuote?) -> nat]" key nil)
    (digest adt-accessor-decl "[(tpmQuote?) -> list[PCR]]" key nil)
    (encrypted? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key
     nil)
    (wrapped? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (sealed? adt-recognizer-decl "[CRYPTOSTATUS -> boolean]" key nil)
    (key shared-adt-accessor-decl "[{x: CRYPTOSTATUS |
          encrypted?(x) OR signed?(x) OR wrapped?(x) OR sealed?(x)} ->
   (asymKey?)]" key nil)
    (crstat shared-adt-accessor-decl "[{x: CRYPTOSTATUS |
          encrypted?(x) OR signed?(x) OR wrapped?(x) OR sealed?(x)} ->
   CRYPTOSTATUS]" key nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (wrapKey? const-decl "bool" key nil)
    (PCRMASK type-eq-decl nil pcr nil) (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (afterStartup? const-decl "bool" tpm nil)
    (TPM_Quote const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil) (KEY type-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil pcr nil) (tpmData type-decl nil key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (mem type-eq-decl nil memory nil) (PCRS type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (childKey const-decl "(asymKey?)" key nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (checkKeyRoot const-decl "bool" key nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (K type-eq-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (afterInit? const-decl "bool" tpm nil))
   shostak))
 (quote_post 0
  (quote_post-1 nil 3559055017 ("" (grind) nil nil)
   ((afterStartup? const-decl "bool" tpm nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (wrapKey? const-decl "bool" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (afterInit? const-decl "bool" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (parentKey const-decl "(asymKey?)" key nil)
    (checkKeyRoot const-decl "bool" key nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (childKey const-decl "(asymKey?)" key nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRS type-eq-decl nil pcr nil) (mem type-eq-decl nil memory nil)
    (tpmNoData adt-constructor-decl "(tpmNoData?)" key nil)
    (tpmNoData? adt-recognizer-decl "[tpmData -> boolean]" key nil)
    (tpmData type-decl nil key nil) (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEY type-decl nil key nil) (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (TPM_Quote const-decl "State" tpm nil))
   shostak))
 (monotonic_locality 0
  (monotonic_locality-1 nil 3559055018 ("" (grind))
   ((saveToMemState const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil))
   shostak))
 (pcrs_unchanged 0
  (pcrs_unchanged-1 nil 3559055018 ("" (grind))
   ((saveToMemState const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil))
   shostak))
 (srk_unchanged 0
  (srk_unchanged-1 nil 3559055019 ("" (grind))
   ((saveToMemState const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil))
   shostak))
 (ek_unchanged 0
  (ek_unchanged-1 nil 3559055019 ("" (grind))
   ((saveToMemState const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil))
   shostak)))

