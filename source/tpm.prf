(tpm
 (unique_hash 0
  (unique_hash-1 nil 3535917891 ("" (postpone) nil nil) nil shostak))
 (IMP_StateMonad_TCC1 0
  (IMP_StateMonad_TCC1-1 nil 3549910453 ("" (existence-tcc) nil nil)
   nil nil))
 (tpmPower_TCC1 0
  (tpmPower_TCC1-1 nil 3535902101 ("" (grind) nil nil)
   ((ekVal const-decl "KEY" tpm nil)) nil))
 (tpmPower_TCC2 0
  (tpmPower_TCC2-1 nil 3535902101 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil)) nil))
 (changeLocalityState_TCC1 0
  (changeLocalityState_TCC1-1 nil 3548522044 ("" (grind) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (monotonic_locality 0
  (monotonic_locality-1 nil 3548612399 ("" (grind) nil nil)
   ((changeLocalityState const-decl "tpmAbsState" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (pcrsResetSenterState const-decl "tpmAbsState" tpm nil)
    (revokeKeyState const-decl "tpmAbsState" tpm nil)
    (removeKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (addKey const-decl "KEYSET" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (member const-decl "bool" sets nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (executeCom const-decl "tpmAbsState" tpm nil))
   shostak))
 (antisymmetryMonad 0
  (antisymmetryMonad-1 nil 3531432082
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (/= const-decl "boolean" notequal nil)
    (modify const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil))
   shostak))
 (antisymmetryMonad2 0
  (antisymmetryMonad2-1 nil 3531432087
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (/= const-decl "boolean" notequal nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil))
   shostak))
 (antisymmetryMonad3 0
  (antisymmetryMonad3-1 nil 3531432103
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (resetMonad 0
  (resetMonad-1 nil 3531432115 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (quoteMonad_TCC1 0
  (quoteMonad_TCC1-1 nil 3549372787 ("" (grind) nil nil)
   ((every adt-def-decl "boolean" list_adt nil)) nil))
 (quoteMonad 0
  (quoteMonad-1 nil 3549040969 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (output const-decl "State" StateMonad nil)
    (quoteTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (badNonce 0
  (badNonce-1 nil 3549294662
   ("" (grind) (("" (decompose-equality -2) nil nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (outQuote? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm nil)
    (outKey? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm nil)
    (k shared-adt-accessor-decl
     "[{x: tpmAbsOutput | outQuote?(x) OR outKey?(x)} -> KEY[B, K, HV]]"
     tpm nil)
    (BLOB type-decl nil key nil) (PCR type-decl nil pcr nil)
    (outQuote adt-constructor-decl
     "[[KEY, BLOB, list[PCR]] -> (outQuote?)]" tpm nil)
    (inverse const-decl "(asymKey?)" key nil)
    (asymKey adt-constructor-decl "[KVAL -> (asymKey?)]" key nil)
    (ekKeyVal const-decl "K" tpm nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (n adt-accessor-decl "[(outQuote?) -> BLOB[B, K, HV]]" tpm nil)
    (pcrs adt-accessor-decl "[(outQuote?) -> list[PCR]]" tpm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (PCRMASK type-eq-decl nil pcr nil)
    (quoteTPM const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (ekVal const-decl "KEY" tpm nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (badSigningKey 0
  (badSigningKey-1 nil 3549204581
   ("" (grind) (("" (decompose-equality -3) nil nil)) nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (outQuote? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm nil)
    (outKey? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm nil)
    (k shared-adt-accessor-decl
     "[{x: tpmAbsOutput | outQuote?(x) OR outKey?(x)} -> KEY[B, K, HV]]"
     tpm nil)
    (BLOB type-decl nil key nil) (PCR type-decl nil pcr nil)
    (outQuote adt-constructor-decl
     "[[KEY, BLOB, list[PCR]] -> (outQuote?)]" tpm nil)
    (inverse const-decl "(asymKey?)" key nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (asymKey adt-constructor-decl "[KVAL -> (asymKey?)]" key nil)
    (ekKeyVal const-decl "K" tpm nil)
    (n adt-accessor-decl "[(outQuote?) -> BLOB[B, K, HV]]" tpm nil)
    (pcrs adt-accessor-decl "[(outQuote?) -> list[PCR]]" tpm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (PCRMASK type-eq-decl nil pcr nil)
    (quoteTPM const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (ekVal const-decl "KEY" tpm nil))
   shostak))
 (checkPCRS 0
  (checkPCRS-1 nil 3549207319 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (output const-decl "State" StateMonad nil)
    (quoteTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (noSenter 0
  (noSenter-1 nil 3535410642 ("" (assert) (("" (grind) nil nil)) nil)
   ((pcrsPower const-decl "PCRS" pcr nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (quoteTPM const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (quoteOut const-decl "tpmAbsOutput" tpm nil)
    (getPCRs const-decl "list[PCR]" pcr nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (>> const-decl "State" StateMonad nil)
    (senterResetTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (powerTPM const-decl "State" tpm nil)
    (put const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil))
   shostak))
 (decrypt_key_fail 0
  (decrypt_key_fail-1 nil 3535901403
   ("" (skosimp*)
    (("" (assert)
      (("" (expand ">>")
        (("" (expand ">>=")
          (("" (expand "unit")
            (("" (expand "decryptTPM")
              (("" (expand "senterResetTPM")
                (("" (expand "put")
                  (("" (expand "senterHashSinitTPM")
                    (("" (expand "tpmReset")
                      (("" (expand "pcrsReset") (("" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>>= const-decl "State" StateMonad nil)
    (decryptTPM const-decl "State" tpm nil)
    (put const-decl "State" StateMonad nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (srkVal const-decl "KEY" tpm nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (decryptKeyState const-decl "BLOB" tpm nil)
    (decryptKeyOut const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (extendTPM const-decl "State" tpm nil)
    (ekVal const-decl "KEY" tpm nil)
    (emptyset const-decl "set" sets nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil))
   shostak))
 (decrypt_key_success 0
  (decrypt_key_success-1 nil 3535913649
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "powerTPM")
        (("" (assert)
          (("" (expand "tpmPower")
            (("" (assert)
              (("" (expand "senterResetTPM")
                (("" (assert)
                  (("" (expand "put")
                    (("" (assert)
                      (("" (expand "senterHashSinitTPM")
                        (("" (assert)
                          (("" (expand "installKeyTPM")
                            (("" (expand "modify")
                              ((""
                                (assert)
                                ((""
                                  (expand "unit")
                                  ((""
                                    (assert)
                                    ((""
                                      (expand "decryptTPM")
                                      ((""
                                        (expand "output")
                                        ((""
                                          (assert)
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((finite_emptyset name-judgement "finite_set" finite_sets nil)
    (modify const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (decryptTPM const-decl "State" tpm nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (>>= const-decl "State" StateMonad nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (decryptKeyOut const-decl "tpmAbsOutput" tpm nil)
    (decryptKeyState const-decl "BLOB" tpm nil)
    (add const-decl "(nonempty?)" sets nil)
    (emptyset const-decl "set" sets nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (addKey const-decl "KEYSET" key nil)
    (member const-decl "bool" sets nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (extendTPM const-decl "State" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (>> const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (output const-decl "State" StateMonad nil)
    (installKeyTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (put const-decl "State" StateMonad nil)
    (senterResetTPM const-decl "State" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (powerTPM const-decl "State" tpm nil))
   shostak))
 (install_key_success 0
  (install_key_success-1 nil 3535902541 ("" (grind) nil nil)
   ((wrapKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (member const-decl "bool" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (installKeyTPM const-decl "State" tpm nil)
    (emptyset const-decl "set" sets nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak))
 (install_key_success2 0
  (install_key_success2-1 nil 3535903981 ("" (grind) nil nil)
   ((wrapKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (member const-decl "bool" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (installKeyTPM const-decl "State" tpm nil)
    (emptyset const-decl "set" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (unseal_secret_success 0
  (unseal_secret_success-1 nil 3536975666
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "powerTPM")
        (("" (assert)
          (("" (expand "senterResetTPM")
            (("" (expand "put")
              (("" (expand "senterHashSinitTPM")
                (("" (expand "unsealTPM")
                  (("" (expand "unit")
                    (("" (assert)
                      (("" (expand ">>")
                        (("" (assert)
                          (("" (expand ">>=")
                            (("" (grind)
                              (("1"
                                (lemma "double_inverse")
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (lemma "double_inverse")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((put const-decl "State" StateMonad nil)
    (unsealTPM const-decl "State" tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (unseal const-decl "BLOB" key nil)
    (unsealOut const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil) (tpmAbsOutput type-decl nil tpm nil)
    (output const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (double_inverse formula-decl nil key nil)
    (>>= const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (powerTPM const-decl "State" tpm nil))
   shostak))
 (test1a 0
  (test1a-1 nil 3531432030 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil))
   shostak))
 (test1b 0
  (test1b-1 nil 3531432034 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil))
   shostak))
 (test1c 0
  (test1c-1 nil 3531432038 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test2 0
  (test2-1 nil 3531432046 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test3 0
  (test3-1 nil 3531432051 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test4 0
  (test4-1 nil 3531432056 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (installPrevKeyTPM_TCC1 0
  (installPrevKeyTPM_TCC1-1 nil 3549828404 ("" (subtype-tcc) nil nil)
   nil shostak))
 (install_prev_key_success 0
  (install_prev_key_success-1 nil 3549830065 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (createWrapKeyOut const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (output const-decl "State" StateMonad nil)
    (createWrapKeyTPM const-decl "State" tpm nil)
    (member const-decl "bool" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (installPrevKeyTPM const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutput const-decl "[A -> State]" StateMonad nil)
    (emptyset const-decl "set" sets nil)
    (>>= const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (add const-decl "(nonempty?)" sets nil))
   shostak)))

