(tpm
 (unique_hash 0
  (unique_hash-1 nil 3535917891 ("" (postpone) nil nil) nil shostak))
 (tpmPower_TCC1 0
  (tpmPower_TCC1-1 nil 3535902101 ("" (tcc) nil nil)
   ((ekVal const-decl "KEY" tpm nil)) nil))
 (tpmPower_TCC2 0
  (tpmPower_TCC2-1 nil 3535902101 ("" (tcc) nil nil)
   ((srkVal const-decl "KEY" tpm nil)) nil))
 (changeLocalityState_TCC1 0
  (changeLocalityState_TCC1-1 nil 3548522044 ("" (subtype-tcc) nil nil)
   nil nil))
 (antisymmetryMonad 0
  (antisymmetryMonad-1 nil 3531432082
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (/= const-decl "boolean" notequal nil)
    (modify const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil))
   shostak))
 (antisymmetryMonad2 0
  (antisymmetryMonad2-1 nil 3531432087
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (/= const-decl "boolean" notequal nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil))
   shostak))
 (antisymmetryMonad3 0
  (antisymmetryMonad3-1 nil 3531432103
   ("" (grind)
    (("" (decompose-equality)
      (("" (grind) (("" (decompose-equality) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (/= const-decl "boolean" notequal nil))
   shostak))
 (resetMonad 0
  (resetMonad-1 nil 3531432115 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (quoteMonad 0
  (quoteMonad-1 nil 3531447003 ("" (grind) nil nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (output const-decl "State" StateMonad nil)
    (quotePCR const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (noSenter 0
  (noSenter-1 nil 3535410642 ("" (assert) (("" (grind) nil nil)) nil)
   ((srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (quotePCR const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (pcrsPower const-decl "PCRS" pcr nil))
   shostak))
 (replay_detection_monad 0
  (replay_detection_monad-1 nil 3531450962
   ("" (grind)
    (("" (decompose-equality)
      (("" (decompose-equality)
        (("" (lemma "unique_hash")
          (("" (grind)
            (("" (decompose-equality)
              (("" (decompose-equality) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HV formal-nonempty-type-decl nil tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (output const-decl "State" StateMonad nil)
    (quotePCR const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (/= const-decl "boolean" notequal nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (unique_hash formula-decl nil tpm nil)
    (hash formal-const-decl "[B -> HV]" tpm nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (outQuote adt-constructor-decl "[PCRS -> (outQuote?)]" tpm nil)
    (h adt-accessor-decl "[(outQuote?) -> PCRS[HV]]" tpm nil)
    (outQuote? adt-recognizer-decl "[tpmOutput -> boolean]" tpm nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (PCR type-decl nil pcr nil) (PCRINDEX type-eq-decl nil pcr nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (bad_asp_monad 0
  (bad_asp_monad-2 "" 3531452667
   ("" (grind)
    (("" (decompose-equality)
      (("" (decompose-equality)
        (("" (use "unique_hash")
          (("" (grind)
            (("" (decompose-equality)
              (("" (decompose-equality)
                (("" (decompose-equality) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (PCRINDEX type-eq-decl nil pcr nil) (PCR type-decl nil pcr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (outQuote? adt-recognizer-decl "[tpmOutput -> boolean]" tpm nil)
    (h adt-accessor-decl "[(outQuote?) -> PCRS[HV]]" tpm nil)
    (outQuote adt-constructor-decl "[PCRS -> (outQuote?)]" tpm nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (hash formal-const-decl "[B -> HV]" tpm nil)
    (unique_hash formula-decl nil tpm nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (quotePCR const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (HV formal-nonempty-type-decl nil tpm nil))
   shostak)
  (bad_asp_monad-1 nil 3531451989
   ("" (grind)
    (("" (decompose-equality)
      (("" (decompose-equality)
        (("" (decompose-equality)
          (("" (decompose-equality)
            (("" (lemma "unique_hash") (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (outQuote adt-constructor-decl "[PCRS -> (outQuote?)]" tpm nil)
    (extend? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (extend adt-constructor-decl "[[PCR, HV] -> (extend?)]" pcr nil)
    (reset? adt-recognizer-decl "[PCR -> boolean]" pcr nil)
    (reset adt-constructor-decl "(reset?)" pcr nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (hash formal-const-decl "[B -> HV]" tpm nil)
    (unique_hash formula-decl nil tpm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (pcr adt-accessor-decl "[(extend?) -> PCR]" pcr nil)
    (hash adt-accessor-decl "[(extend?) -> HV]" pcr nil)
    (/= const-decl "boolean" notequal nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (quotePCR const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (modify const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (PCR type-decl nil pcr nil))
   shostak))
 (decrypt_key_fail 0
  (decrypt_key_fail-1 nil 3535901403
   ("" (skosimp*)
    (("" (assert)
      (("" (expand ">>")
        (("" (expand ">>=")
          (("" (expand "unit")
            (("" (expand "decryptTPM")
              (("" (expand "senterResetTPM")
                (("" (expand "put")
                  (("" (expand "senterHashSinitTPM")
                    (("" (expand "tpmReset")
                      (("" (expand "pcrsReset") (("" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>> const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (senterResetTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (emptyset const-decl "set" sets nil)
    (ekVal const-decl "KEY" tpm nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (output const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (decryptKeyState const-decl "BLOB" tpm nil)
    (add const-decl "(nonempty?)" sets nil)
    (member const-decl "bool" sets nil)
    (srkVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (put const-decl "State" StateMonad nil)
    (decryptTPM const-decl "State" tpm nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (decrypt_key_success 0
  (decrypt_key_success-1 nil 3535913649
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "powerTPM")
        (("" (assert)
          (("" (expand "tpmPower")
            (("" (assert)
              (("" (expand "senterResetTPM")
                (("" (assert)
                  (("" (expand "put")
                    (("" (assert)
                      (("" (expand "senterHashSinitTPM")
                        (("" (assert)
                          (("" (expand "installKeyTPM")
                            (("" (expand "modify")
                              ((""
                                (assert)
                                ((""
                                  (expand "unit")
                                  ((""
                                    (assert)
                                    ((""
                                      (expand "decryptTPM")
                                      ((""
                                        (expand "output")
                                        ((""
                                          (assert)
                                          (("" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerTPM const-decl "State" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (put const-decl "State" StateMonad nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (installKeyTPM const-decl "State" tpm nil)
    (output const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (extendTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (emptyset const-decl "set" sets nil)
    (decryptKeyState const-decl "BLOB" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (nonempty_add_finite application-judgement "non_empty_finite_set"
     finite_sets nil)
    (decryptTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (modify const-decl "State" StateMonad nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (install_key_success 0
  (install_key_success-1 nil 3535902541 ("" (grind) nil nil)
   ((wrapKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (installKeyTPM const-decl "State" tpm nil)
    (emptyset const-decl "set" sets nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (install_key_success2 0
  (install_key_success2-1 nil 3535903981 ("" (grind) nil nil)
   ((wrapKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmPower const-decl "tpmAbsState" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (powerTPM const-decl "State" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (member const-decl "bool" sets nil)
    (add const-decl "(nonempty?)" sets nil)
    (addKey const-decl "KEYSET" key nil)
    (installKeyState const-decl "tpmAbsState" tpm nil)
    (installKeyTPM const-decl "State" tpm nil)
    (emptyset const-decl "set" sets nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil))
   shostak))
 (unseal_secret_success 0
  (unseal_secret_success-1 nil 3536975666
   ("" (skosimp*)
    (("" (assert)
      (("" (expand "powerTPM")
        (("" (assert)
          (("" (expand "senterResetTPM")
            (("" (expand "put")
              (("" (expand "senterHashSinitTPM")
                (("" (expand "unsealTPM")
                  (("" (expand "unit")
                    (("" (assert)
                      (("" (expand ">>")
                        (("" (assert)
                          (("" (expand ">>=")
                            (("" (grind)
                              (("1"
                                (lemma "double_inverse")
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (lemma "double_inverse")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((powerTPM const-decl "State" tpm nil)
    (senterResetTPM const-decl "State" tpm nil)
    (senterHashSinitTPM const-decl "State" tpm nil)
    (unit const-decl "State" StateMonad nil)
    (>> const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (double_inverse formula-decl nil key nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (pcrsReset const-decl "PCRS" pcr nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (ekVal const-decl "KEY" tpm nil) (srkVal const-decl "KEY" tpm nil)
    (changeLocalityTPM const-decl "State" tpm nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (extendTPM const-decl "State" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (pcrsExtend const-decl "PCRS" pcr nil)
    (output const-decl "State" StateMonad nil)
    (tpmOutput type-decl nil tpm nil) (KEY type-decl nil key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil tpm nil) (PCRS type-eq-decl nil pcr nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (unsealState const-decl "BLOB" tpm nil)
    (unseal const-decl "BLOB" key nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (unsealTPM const-decl "State" tpm nil)
    (put const-decl "State" StateMonad nil))
   shostak))
 (test1a 0
  (test1a-1 nil 3531432030 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil))
   shostak))
 (test1b 0
  (test1b-1 nil 3531432034 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil))
   shostak))
 (test1c 0
  (test1c-1 nil 3531432038 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test2 0
  (test2-1 nil 3531432046 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (unit const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test3 0
  (test3-1 nil 3531432051 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (test4 0
  (test4-1 nil 3531432056 ("" (grind) nil nil)
   ((tpmAbsState type-eq-decl nil tpm nil)
    (PCRS type-eq-decl nil pcr nil) (LOCALITY type-eq-decl nil tpm nil)
    (KEYSET type-eq-decl nil key nil)
    (asymKey? adt-recognizer-decl "[KEY -> boolean]" key nil)
    (boolean nonempty-type-decl nil booleans nil)
    (KEY type-decl nil key nil)
    (HV formal-nonempty-type-decl nil tpm nil)
    (K formal-nonempty-type-decl nil tpm nil)
    (B formal-nonempty-type-decl nil tpm nil)
    (tpmOutput type-decl nil tpm nil)
    (modify const-decl "State" StateMonad nil)
    (unit const-decl "State" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (srkVal const-decl "KEY" tpm nil) (ekVal const-decl "KEY" tpm nil)
    (tpmReset const-decl "tpmAbsState" tpm nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak)))

