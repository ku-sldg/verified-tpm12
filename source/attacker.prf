(attacker
 (executeComStartup2_TCC1 0
  (executeComStartup2_TCC1-1 nil 3587927416 ("" (cases-tcc) nil nil)
   nil nil))
 (executeCom2_TCC1 0
  (executeCom2_TCC1-1 nil 3587927416 ("" (subtype-tcc) nil nil) nil
   nil))
 (outData_sequence_test_TCC1 0
  (outData_sequence_test_TCC1-1 nil 3587917940
   ("" (subtype-tcc) nil nil) nil nil))
 (outData_sequence_test 0
  (outData_sequence_test-1 nil 3587917940
   ("" (lemma ekDef)
    (("" (lemma keyGenCntDef)
      (("" (lemma notEK) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((keyGenCntDef formula-decl nil lemmas nil)
    (add const-decl "(nonempty?)" sets nil)
    (updateLoc const-decl "mem" memory nil)
    (TPM_Unseal const-decl "State" tpm nil)
    (unsealOut const-decl "tpmAbsOutput" tpm nil)
    (unsealState const-decl "tpmAbsState" tpm nil)
    (unseal? const-decl "bool" tpm nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (>>= const-decl "State" StateMonad nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (TPM_Seal const-decl "State" tpm nil)
    (sealOut const-decl "tpmAbsOutput" tpm nil)
    (sealState const-decl "tpmAbsState" tpm nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (seal? const-decl "bool" tpm nil)
    (TPM_TakeOwnership const-decl "State" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (tpmData type-decl nil data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (K type-eq-decl nil tpm nil) (KEYSET type-eq-decl nil key nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (mem type-eq-decl nil memory nil) (set type-eq-decl nil sets nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (StanyData type-eq-decl nil StanyData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (takeOwnershipOut const-decl "tpmAbsOutput" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (takeOwnershipState const-decl "tpmAbsState" tpm nil)
    (encrypt const-decl "tpmData" key nil)
    (decrypt const-decl "tpmData" key nil)
    (member const-decl "bool" sets nil)
    (private const-decl "privKVAL" key nil)
    (takeOwnership? const-decl "bool" tpm nil)
    (goodkey? const-decl "bool" keydata nil)
    (badkey const-decl "KVAL" keydata nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (invalidKey? const-decl "bool" key nil)
    (/= const-decl "boolean" notequal nil)
    (TPM_KH_EK const-decl "(tpmKey?)" key nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (inverse const-decl "integer" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (tpmPCRInfoLong? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (pcrInfoLongDefault const-decl "(tpmPCRInfoLong?)" data nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (encrypted? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (notEK formula-decl nil lemmas nil)
    (ekDef formula-decl nil lemmas nil)
    (HV formal-nonempty-type-decl nil attacker nil))
   shostak))
 (takeOwnership_SRK 0
  (takeOwnership_SRK-1 nil 3588941134 ("" (grind) nil nil)
   ((/= const-decl "boolean" notequal nil)
    (badkey const-decl "KVAL" keydata nil)
    (goodkey? const-decl "bool" keydata nil)
    (takeOwnership? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (inverse const-decl "integer" keydata nil)
    (member const-decl "bool" sets nil)
    (checkDecrypt? const-decl "bool" key nil)
    (decrypt const-decl "tpmData" key nil)
    (checkEncrypt? const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (takeOwnershipOut const-decl "tpmAbsOutput" tpm nil)
    (takeOwnershipState const-decl "tpmAbsState" tpm nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (HV formal-nonempty-type-decl nil attacker nil)
    (afterInit? const-decl "bool" tpm nil)
    (executeComPostInit2 const-decl "tpmAbsState" attacker nil)
    (executeComStartup2 const-decl "tpmAbsState" attacker nil)
    (executeCom2 const-decl "tpmAbsState" attacker nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (set type-eq-decl nil sets nil) (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil))
   shostak))
 (goodEK_TCC1 0
  (goodEK_TCC1-1 nil 3589638539 ("" (existence-tcc) nil nil) nil nil))
 (certOut_noSign_TCC1 0
  (certOut_noSign_TCC1-1 nil 3589638539 ("" (subtype-tcc) nil nil) nil
   nil))
 (certOut_noSign_TCC2 0
  (certOut_noSign_TCC2-1 nil 3589638539 ("" (subtype-tcc) nil nil) nil
   nil))
 (makeIdentityState_noSign_TCC1 0
  (makeIdentityState_noSign_TCC1-1 nil 3591452819
   ("" (subtype-tcc) nil nil) nil nil))
 (makeIdentityState_noSign_TCC2 0
  (makeIdentityState_noSign_TCC2-1 nil 3591452819
   ("" (subtype-tcc) nil nil) nil nil))
 (CA_unsigned_TCC1 0
  (CA_unsigned_TCC1-1 nil 3589644613 ("" (subtype-tcc) nil nil) nil
   nil))
 (CA_unsigned_TCC2 0
  (CA_unsigned_TCC2-1 nil 3591111153 ("" (subtype-tcc) nil nil) nil
   nil))
 (CA_unsigned_TCC3 0
  (CA_unsigned_TCC3-1 nil 3591111153 ("" (subtype-tcc) nil nil) nil
   nil))
 (CA_unsigned_TCC4 0
  (CA_unsigned_TCC4-1 nil 3591111153 ("" (subtype-tcc) nil nil) nil
   nil))
 (CA_unsigned 0
  (CA_unsigned-1 nil 3589644613
   ("" (assert)
    (("" (auto-rewrite-defs)
      (("" (bash) (("" (simplify) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((HV formal-nonempty-type-decl nil attacker nil)
    (private const-decl "privKVAL" key nil)
    (/= const-decl "boolean" notequal nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (set type-eq-decl nil sets nil) (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity const-decl "State" tpm nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (output const-decl "State" StateMonad nil)
    (CPU_read const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (member const-decl "bool" sets nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (checkEncrypt? const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (sign const-decl "tpmData" key nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (certify_noSign? const-decl "bool" attacker nil)
    (initSessKeyVal const-decl "K" tpm nil)
    (certOut_noSign const-decl "tpmAbsOutput" attacker nil)
    (CA_certify_noSign const-decl "State" attacker nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (inverse const-decl "integer" keydata nil)
    (checkDecrypt? const-decl "bool" key nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityBlob? const-decl "bool" data nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (activateIdentityState const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (updateLoc const-decl "mem" memory nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (CA_unsigned_outData_TCC1 0
  (CA_unsigned_outData_TCC1-1 nil 3591115351 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC2 0
  (CA_unsigned_outData_TCC2-1 nil 3591115351 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC3 0
  (CA_unsigned_outData_TCC3-1 nil 3591462729 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC4 0
  (CA_unsigned_outData_TCC4-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC5 0
  (CA_unsigned_outData_TCC5-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC6 0
  (CA_unsigned_outData_TCC6-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC7 0
  (CA_unsigned_outData_TCC7-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC8 0
  (CA_unsigned_outData_TCC8-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC9 0
  (CA_unsigned_outData_TCC9-1 nil 3592182107 ("" (subtype-tcc) nil nil)
   nil nil))
 (CA_unsigned_outData_TCC10 0
  (CA_unsigned_outData_TCC10-1 nil 3592182107
   ("" (subtype-tcc) nil nil) nil nil))
 (CA_unsigned_outData 0
  (CA_unsigned_outData-1 nil 3591115351
   ("" (assert)
    (("" (auto-rewrite-defs)
      (("" (bash)
        (("" (assert)
          (("" (lift-if)
            (("" (assert)
              (("" (auto-rewrite-defs)
                (("" (rewrite makeIdentityOut)
                  (("" (assert)
                    (("" (lift-if)
                      (("" (simplify)
                        (("" (assert)
                          (("" (rewrite makeIdentityState_noSign)
                            (("" (lift-if)
                              ((""
                                (simplify)
                                ((""
                                  (assert)
                                  ((""
                                    (split)
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (split)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (grind)
                                          (("1"
                                            (lemma pubInversePriv)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma pubInversePriv)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (lemma pubInversePriv)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (lemma pubInversePriv)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1" (grind) nil nil)
                                         ("2"
                                          (grind)
                                          (("1"
                                            (lemma pubInversePriv)
                                            (("1" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (lemma pubInversePriv)
                                            (("2" (grind) nil nil))
                                            nil)
                                           ("3"
                                            (lemma pubInversePriv)
                                            (("3" (grind) nil nil))
                                            nil)
                                           ("4"
                                            (lemma pubInversePriv)
                                            (("4" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HV formal-nonempty-type-decl nil attacker nil)
    (private const-decl "privKVAL" key nil)
    (/= const-decl "boolean" notequal nil)
    (member const-decl "bool" sets nil)
    (makeIdentity? const-decl "bool" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (set type-eq-decl nil sets nil) (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil) (K type-eq-decl nil tpm nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (boolean nonempty-type-decl nil booleans nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_MakeIdentity_noSign const-decl "State" attacker nil)
    (CPU_saveOutput const-decl "[tpmAbsOutput -> State]" tpm nil)
    (useOutputStateOutput const-decl "[A -> State]" StateMonad nil)
    (>>= const-decl "State" StateMonad nil)
    (wellFormedRestore? const-decl "bool" startupData nil)
    (certify_noSign? const-decl "bool" attacker nil)
    (initSessKeyVal const-decl "K" tpm nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (afterStartup? const-decl "bool" tpm nil)
    (tpmEncAuth? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmDigest? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmNonce? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (PCR_SELECTION type-eq-decl nil pcr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (genKeyState const-decl "tpmAbsState" tpm nil)
    (pubInversePriv formula-decl nil data nil)
    (goodEK const-decl "(tpmKey?)" attacker nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (tpmStoreAsymkey? adt-recognizer-decl "[tpmData -> boolean]" data
     nil)
    (integer nonempty-type-from-decl nil integers nil)
    (privKVAL type-eq-decl nil keydata nil)
    (privKey adt-accessor-decl "[(tpmStoreAsymkey?) -> privKVAL]" data
     nil)
    (encrypted? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (encData adt-accessor-decl "[(encrypted?) -> tpmData]" data nil)
    (encDat adt-accessor-decl "[(tpmKey?) -> (encrypted?)]" data nil)
    (PCRINDEX type-eq-decl nil pcr nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (decrypt const-decl "tpmData" key nil)
    (activateIdentityState const-decl "tpmAbsState" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (activateIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (activateIdentity? const-decl "bool" tpm nil)
    (checkDecrypt? const-decl "bool" key nil)
    (inverse const-decl "integer" keydata nil)
    (updateLoc const-decl "mem" memory nil)
    (certOut_noSign const-decl "tpmAbsOutput" attacker nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (saveToMemState const-decl "tpmAbsState" tpm nil)
    (makeIdentityState_noSign const-decl "tpmAbsState" attacker nil)
    (sign const-decl "tpmData" key nil)
    (encrypt const-decl "tpmData" key nil)
    (decryptADIP const-decl "(tpmSecret?)" data nil)
    (setDigAtCreation const-decl "(tpmCompositeHash?)" tpm nil)
    (makeIdentityOut const-decl "tpmAbsOutput" tpm nil)
    (badEK const-decl "(tpmKey?)" attacker nil)
    (tpmAuthData? const-decl "bool" data nil)
    (authIn type-eq-decl nil data nil)
    (TPM_ActivateIdentity const-decl "State" tpm nil)
    (TPM_Noop const-decl "[tpmAbsOutput -> State]" tpm nil)
    (CA_certify_noSign const-decl "State" attacker nil)
    (output const-decl "State" StateMonad nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak)))

