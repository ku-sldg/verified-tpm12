%% ----
%%
%% PCR Theory
%%
%% Author: Perry Alexander
%% Date: Sat Jan 14 23:30:02 CST 2012
%%
%% Description: Basic model of a TPM register file
%% 
%% Dependencies:
%%  StateMonad.pvs
%%
%% Todo: (key - => pending, + => done)
%%
%% ----

pcr [HV: TYPE+] : THEORY
  BEGIN

  %% Locality type - check with spec
  %% (8.6)
  LOCALITY : TYPE = {n:nat | n<=4};
  LOCALITY_SELECTION : TYPE = set[LOCALITY];

  %% PCR array index type - check with spec
  PCRINDEX : TYPE = {n:nat | n <=23};

  %% (8.1) 
  %% Should be bit map that indicates if a PCR is active or not.
  PCR_SELECTION : TYPE = list[PCRINDEX]; % TODO: Should we make this into an array?

  PCR : datatype
  begin
    reset : reset?
    resetOne : resetOne?
    extend(pcr:PCR,hash:HV) : extend?
  end PCR;

  PCRVALUES : TYPE = ARRAY[PCRINDEX->PCR];

  %% (8.2)
  PCR_COMPOSITE : TYPE = [#
  		% The indication of which PCR values are active
  		  select : PCR_SELECTION 
		% Array of PCRVALUE structures. 
		% The values come in the order specified by the select parameter and 
		% are concatenated into a single blob.
		, pcrValue : PCRVALUES
  		#];

  TPM_COMPOSITE_HASH : TYPE = HV;
%   compositeHash(select:PCR_SELECTION,vals:PCRVALUES) : (tpmDigest?) = 
%     LET composite : PCR_COMPOSITE = 
%     		  (# select:=select,	
% 		     pcrValue:= vals #) 


  %% (8.3)
  PCR_INFO : TYPE = [#
  	   % Selection of PCRs to which the data or key is bound
  	     pcrSelection : PCR_SELECTION
	   % Digest of the PCR indices and PCR values to verify when revealing sealed data
	   % or using a key that was wrapped to PCRs
	   , digestAtRelease  : TPM_COMPOSITE_HASH
	   % Composite digest value of the PCR values, at the time when the sealing is performed
	   , digestAtCreation : TPM_COMPOSITE_HASH
	   #];
  %% (8.4)
  PCR_INFO_LONG : TYPE = [#
  		% Locality modifier when blob is created
  		  localityAtCreation : LOCALITY_SELECTION
		% Locality modifier required to reveal sealed data or use a key that was wrapped to PCRs
		% Value must not be zero (0)
		, localityAtRelease  : LOCALITY_SELECTION
		% Selection of PCRs active when blob is created
		, creationPCRSelection : PCR_SELECTION
		% Selection of PCRs to which the key or data is bound
		, releasePCRSelection  : PCR_SELECTION
		% Composite digest value of the PCR values, when the blob is created
  		, digestAtCreation : TPM_COMPOSITE_HASH
		% Digest of PCR indices and PCR values to verify when revealing sealed data 
		% or using a key that was wrapped to PCRs
		, digestAtRelease  : TPM_COMPOSITE_HASH
  		#];

  %% (8.5)
  PCR_INFO_SHORT : TYPE = [#
  		% Selection of PCRs that specifies the digestAtRelease
		  pcrSelection  : PCR_SELECTION
		% Locality modifier required to release information
		% must not be zero (0)
		, localityAtRelease  : LOCALITY_SELECTION
		% Digest of PCR indices and PCR values to verify when revealing auth data
		, digestAtRelease  : TPM_COMPOSITE_HASH
  		#];


  %% Information associated with PCR 
  %% (8.8)
  PCR_ATTRIBUTE : TYPE = [# pcrExtendLocal : LOCALITY_SELECTION
  	    	      	  , pcrResetLocal : LOCALITY_SELECTION 
  	    	      	  , pcrReset : bool #];

  %% PCR flag array
  PCR_ATTRIBUTES : TYPE = ARRAY[PCRINDEX->PCR_ATTRIBUTE];

  allLocs : LOCALITY_SELECTION = add(0,add(1,add(2,add(3,add(4,emptyset))))); 
  %TODO: not sure this is correct... can add any real numbers to set.

  % (8.9)
  pcrDebug : PCR_ATTRIBUTES
  pcrInit : PCR_ATTRIBUTES

  % Pcr attributes are available on a per PCR basis. Differs by platform configuration
  allResetAccess : PCR_ATTRIBUTES =
    (LAMBDA (i:PCRINDEX) :
      (# 
         pcrReset := true
       , pcrResetLocal := allLocs
       , pcrExtendLocal := allLocs
      #))

  %% Some common PCR sets

  %% Power on - unknown state
  pcrsPower : PCRVALUES;
  pcrInfoLongDefault : PCR_INFO_LONG;

  %% Following startup clear.  Nonresettable PCRs to 0 and resettable PCRs
  %% to -1
  pcrsReset(flags : PCR_ATTRIBUTES) : PCRVALUES =
    (LAMBDA (i:PCRINDEX) : 
      IF pcrReset(flags(i)) THEN resetOne ELSE reset ENDIF);

  %% Following SENTER.  Nonresettable PCRs to same and resettable PCRs to 0
  pcrsSenter(curr : PCRVALUES, flags : PCR_ATTRIBUTES) : PCRVALUES =
    (LAMBDA (i:PCRINDEX) :
      IF pcrReset(flags(i)) THEN reset ELSE curr(i) ENDIF);

  %% Some common PCR flag settings
  
  
  %% PCR extension operator
  pcrsExtend(pcrs:PCRVALUES,i:PCRINDEX,hv:HV) : PCRVALUES = 
     (pcrs WITH [(i) := extend(pcrs(i),hv)])

  getPCRs(pcrs:PCRVALUES,pcrMask:PCR_SELECTION) : list[PCR] =
     map(pcrs,pcrMask);
  
  getPCRsCorrectness: THEOREM (FORALL (pm:PCR_SELECTION, i:PCRINDEX, pcrs:PCRVALUES) :
     member(i,pm)
     =>
     member(pcrs(i),getPCRs(pcrs,pm)));
     
  %% Theorems

  %% Extension is antisymmetric  
  antisym : THEOREM FORALL (h1,h2:HV, p:PCR) :
    h1/=h2 => extend(p,h1) /= extend(p,h2)

  END pcr


