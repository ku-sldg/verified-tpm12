%% ----
%%
%% PCR Theory
%%
%% Author: Perry Alexander
%% Date: Sat Jan 14 23:30:02 CST 2012
%%
%% Description: Basic model of a TPM register file
%% 
%% Dependencies:
%%  StateMonad.pvs
%%
%% Todo: (key - => pending, + => done)
%%
%% ----

pcr [HV: TYPE+] : THEORY
  BEGIN

  %% Locality type - check with spec
  LOCALITY : TYPE = {n:nat | n<=4};

  %% Basic PCR datatype
  PCR : datatype
  begin
    reset : reset?
    resetOne : resetOne?
    extend(pcr:PCR,hash:HV) : extend?
  end PCR;

  %% PCR array index type - check with spec
  PCRINDEX : TYPE = {n:nat | n <=23};

  %% Information associated with PCR
  PCRFLAG : TYPE = [# pcrLocality : LOCALITY, pcrReset : bool #];

  %% PCR array
  PCRS : TYPE = ARRAY[PCRINDEX->PCR];

  %% PCR flag array
  PCRFLAGS : TYPE = ARRAY[PCRINDEX->PCRFLAG];

  %% Some common PCR sets

  %% Power on - unknown state
  pcrsPower : PCRS;

  %% Following startup clear - based on flags
  pcrsReset(flags : PCRFLAGS) : PCRS = 
    (LAMBDA (i:PCRINDEX) : 
      IF pcrReset(flags(i)) THEN resetOne ELSE reset ENDIF);

  %% Some common PCR flag settings

  allResetAccess : PCRFLAGS =
    (LAMBDA (i:PCRINDEX) :
      (# 
         pcrReset := true
         , pcrLocality := 2
      #))

  %% PCR extension operator
  pcrsExtend(pcrs:PCRS,i:PCRINDEX,hv:HV) : PCRS = 
     (pcrs WITH [(i) := extend(pcrs(i),hv)])


  PCRMASK : TYPE = list[PCRINDEX];

  getPCRs(pcrs:PCRS,pcrMask:PCRMASK) : list[PCR] =
     map(pcrs,pcrMask);
  
  getPCRsCorrectness: THEOREM (FORALL (pm:PCRMASK, i:PCRINDEX, pcrs:PCRS) :
     member(i,pm)
     =>
     member(pcrs(i),getPCRs(pcrs,pm)));
     
  %% Theorems

  %% Extension is antisymmetric  
  antisym : THEOREM FORALL (h1,h2:HV, p:PCR) :
    h1/=h2 => extend(p,h1) /= extend(p,h2)

  END pcr


