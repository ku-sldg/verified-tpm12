(tpmProofs
 (initial_State 0
  (initial_State-1 nil 3589046350 ("" (grind) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (encrypted? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (HV formal-nonempty-type-decl nil tpmProofs nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (TPM_KH_EK const-decl "(tpmKey?)" key nil)
    (initKeyVal const-decl "K" tpm nil)
    (disableDef const-decl "bool" PermanentFlags nil)
    (ownershipDef const-decl "bool" PermanentFlags nil)
    (deactivatedDef const-decl "bool" PermanentFlags nil)
    (readPubekDef const-decl "bool" PermanentFlags nil)
    (disableOwnerClearDef const-decl "bool" PermanentFlags nil)
    (allowMaintenanceDef const-decl "bool" PermanentFlags nil)
    (physPresLLDef const-decl "bool" PermanentFlags nil)
    (physPresHWEDef const-decl "bool" PermanentFlags nil)
    (physPresCMDEDef const-decl "bool" PermanentFlags nil)
    (TPMpostDef const-decl "bool" PermanentFlags nil)
    (operatorDef const-decl "bool" PermanentFlags nil)
    (nvLockedDef const-decl "bool" PermanentFlags nil)
    (readSRKPubDef const-decl "bool" PermanentFlags nil)
    (tpmEstablishedDef const-decl "bool" PermanentFlags nil)
    (disableFullDALogicInfoDef const-decl "bool" PermanentFlags nil)
    (permFlagsDefault const-decl "PermFlags" PermanentFlags nil)
    (tpmCMKDelegateDefault const-decl "(tpmCMKDelegate?)" data nil)
    (permDataDefault const-decl "PermData" PermanentData nil)
    (stanyFlagsDefault const-decl "StanyFlags" StanyFlags nil)
    (stanyDataDefault const-decl "StanyData" StanyData nil)
    (stclear_deactivatedDef const-decl "bool" StclearFlags nil)
    (disableForceClearDef const-decl "bool" StclearFlags nil)
    (physicalPresenceDef const-decl "bool" StclearFlags nil)
    (physicalPresenceLockDef const-decl "bool" StclearFlags nil)
    (bGlobablLockDef const-decl "bool" StclearFlags nil)
    (stclearFlagsDefault const-decl "StclearFlags" StclearFlags nil)
    (stclearDataDefault const-decl "StclearData" StclearData nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (initSaveData const-decl "(wellFormedRestore?)" startupData nil)
    (tpmDefault const-decl "(wellFormed?)" tpm nil)
    (tpmPostInit const-decl "(wellFormed?)" tpm nil)
    (tpmAbsState type-eq-decl nil tpm nil)
    (StclearFlags type-eq-decl nil StclearFlags nil)
    (StclearData type-eq-decl nil StclearData nil)
    (StanyFlags type-eq-decl nil StanyFlags nil)
    (StanyData type-eq-decl nil StanyData nil)
    (restoreStateData type-eq-decl nil startupData nil)
    (PermFlags type-eq-decl nil PermanentFlags nil)
    (PermData type-eq-decl nil PermanentData nil)
    (PCRVALUES type-eq-decl nil pcr nil)
    (set type-eq-decl nil sets nil) (mem type-eq-decl nil memory nil)
    (OUT_Nothing adt-constructor-decl "(OUT_Nothing?)" tpm nil)
    (OUT_Nothing? adt-recognizer-decl "[tpmAbsOutput -> boolean]" tpm
     nil)
    (LOCALITY type-eq-decl nil pcr nil)
    (KEYSET type-eq-decl nil key nil)
    (tpmKey? adt-recognizer-decl "[tpmData -> boolean]" data nil)
    (tpmData type-decl nil data nil)
    (tpmAbsOutput type-decl nil tpm nil)
    (put const-decl "State" StateMonad nil)
    (TPM_Init const-decl "State" tpm nil)
    (afterInit? const-decl "bool" tpm nil)
    (private const-decl "privKVAL" key nil)
    (addKey const-decl "KEYSET" key nil)
    (removeKeysStartup const-decl "KEYSET" tpm nil)
    (tpmRestoreUnknown const-decl "restoreStateData" startupData nil)
    (tpmStartup const-decl "(wellFormed?)" tpm nil)
    (executeComPostInit const-decl "tpmAbsState" tpm nil)
    (executeComStartup const-decl "tpmAbsState" tpm nil)
    (executeCom const-decl "tpmAbsState" tpm nil)
    (modify const-decl "State" StateMonad nil)
    (TPM_Startup const-decl "State" tpm nil)
    (>> const-decl "State" StateMonad nil)
    (pcrsResetSenterState const-decl "tpmAbsState" tpm nil)
    (b2n const-decl "nbit" bit nil) (member const-decl "bool" sets nil)
    (extend? const-decl "bool" tpm nil)
    (pcrsSenter const-decl "PCRVALUES" pcr nil)
    (pcrsExtend const-decl "PCRVALUES" pcr nil)
    (extendState const-decl "tpmAbsState" tpm nil)
    (changeLocalityState const-decl "tpmAbsState" tpm nil)
    (CPU_senter const-decl "State" tpm nil)
    (allLocs const-decl "LOCALITY_SELECTION" pcr nil)
    (allResetAccess const-decl "PCR_ATTRIBUTES" pcr nil)
    (add const-decl "(nonempty?)" sets nil)
    (restrict const-decl "R" restrict nil)
    (CPU_sinit const-decl "State" tpm nil)
    (TPM_KH_SRK const-decl "(tpmKey?)" key nil)
    (/= const-decl "boolean" notequal nil)
    (badkey const-decl "KVAL" keydata nil)
    (goodkey? const-decl "bool" keydata nil)
    (takeOwnership? const-decl "bool" tpm nil)
    (checkDecrypt? const-decl "bool" key nil)
    (decrypt const-decl "tpmData" key nil)
    (checkEncrypt? const-decl "bool" key nil)
    (encrypt const-decl "tpmData" key nil)
    (takeOwnershipState const-decl "tpmAbsState" tpm nil)
    (outputComPostInit const-decl "tpmAbsOutput" tpm nil)
    (takeOwnershipOut const-decl "tpmAbsOutput" tpm nil)
    (outputComStartup const-decl "tpmAbsOutput" tpm nil)
    (outputCom const-decl "tpmAbsOutput" tpm nil)
    (modifyOutput const-decl "State" StateMonad nil)
    (TPM_TakeOwnership const-decl "State" tpm nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil))
   shostak))
 (ek_set 0
  (ek_set-1 nil 3589125627 ("" (grind) nil nil)
   ((keyFlagsF const-decl "KEY_FLAGS" keydata nil)
    (keyParmsDef const-decl "KEY_PARMS" keydata nil)
    (inverse const-decl "integer" keydata nil)
    (HV formal-nonempty-type-decl nil tpmProofs nil)
    (storeAsymkeyDefault const-decl "(encrypted?)" data nil)
    (TPM_KH_EK const-decl "(tpmKey?)" key nil)
    (initKeyVal const-decl "K" tpm nil)
    (disableDef const-decl "bool" PermanentFlags nil)
    (ownershipDef const-decl "bool" PermanentFlags nil)
    (deactivatedDef const-decl "bool" PermanentFlags nil)
    (readPubekDef const-decl "bool" PermanentFlags nil)
    (disableOwnerClearDef const-decl "bool" PermanentFlags nil)
    (allowMaintenanceDef const-decl "bool" PermanentFlags nil)
    (physPresLLDef const-decl "bool" PermanentFlags nil)
    (physPresHWEDef const-decl "bool" PermanentFlags nil)
    (physPresCMDEDef const-decl "bool" PermanentFlags nil)
    (TPMpostDef const-decl "bool" PermanentFlags nil)
    (operatorDef const-decl "bool" PermanentFlags nil)
    (nvLockedDef const-decl "bool" PermanentFlags nil)
    (readSRKPubDef const-decl "bool" PermanentFlags nil)
    (tpmEstablishedDef const-decl "bool" PermanentFlags nil)
    (disableFullDALogicInfoDef const-decl "bool" PermanentFlags nil)
    (permFlagsDefault const-decl "PermFlags" PermanentFlags nil)
    (tpmCMKDelegateDefault const-decl "(tpmCMKDelegate?)" data nil)
    (permDataDefault const-decl "PermData" PermanentData nil)
    (stanyFlagsDefault const-decl "StanyFlags" StanyFlags nil)
    (stanyDataDefault const-decl "StanyData" StanyData nil)
    (stclear_deactivatedDef const-decl "bool" StclearFlags nil)
    (disableForceClearDef const-decl "bool" StclearFlags nil)
    (physicalPresenceDef const-decl "bool" StclearFlags nil)
    (physicalPresenceLockDef const-decl "bool" StclearFlags nil)
    (bGlobablLockDef const-decl "bool" StclearFlags nil)
    (stclearFlagsDefault const-decl "StclearFlags" StclearFlags nil)
    (stclearDataDefault const-decl "StclearData" StclearData nil)
    (K type-eq-decl nil tpm nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (initSaveData const-decl "(wellFormedRestore?)" startupData nil)
    (tpmDefault const-decl "(wellFormed?)" tpm nil)
    (TPM_KH_SRK const-decl "(tpmKey?)" key nil)
    (ownedState const-decl "tpmAbsState" tpmProofs nil)
    (badkey const-decl "KVAL" keydata nil)
    (goodkey? const-decl "bool" keydata nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (finite_emptyset name-judgement "finite_set" finite_sets nil))
   shostak))
 (no_success_errors_TCC1 0
  (no_success_errors_TCC1-1 nil 3589046350 ("" (subtype-tcc) nil nil)
   nil nil))
 (no_success_errors 0
  (no_success_errors-1 nil 3588530086
   ("" (grind)
    (("1" (lemma unique_error) (("1" (grind) nil nil)) nil)
     ("2" (lemma unique_error) (("2" (grind) nil nil)) nil)
     ("3" (lemma unique_error) (("3" (grind) nil nil)) nil)
     ("4" (lemma unique_error) (("4" (grind) nil nil)) nil)
     ("5" (lemma unique_error) (("5" (grind) nil nil)) nil)
     ("6" (lemma unique_error) (("6" (grind) nil nil)) nil)
     ("7" (lemma unique_error) (("7" (grind) nil nil)) nil)
     ("8" (lemma unique_error) (("8" (grind) nil nil)) nil)
     ("9" (lemma unique_error) (("9" (grind) nil nil)) nil)
     ("10" (lemma unique_error) (("10" (grind) nil nil)) nil)
     ("11" (lemma unique_error) (("11" (grind) nil nil)) nil)
     ("12" (lemma unique_error) (("12" (grind) nil nil)) nil)
     ("13" (lemma unique_error) (("13" (grind) nil nil)) nil)
     ("14" (lemma unique_error) (("14" (grind) nil nil)) nil)
     ("15" (lemma unique_error) (("15" (grind) nil nil)) nil)
     ("16" (lemma unique_error) (("16" (grind) nil nil)) nil)
     ("17" (lemma unique_error) (("17" (grind) nil nil)) nil)
     ("18" (lemma unique_error) (("18" (grind) nil nil)) nil)
     ("19" (lemma unique_error) (("19" (grind) nil nil)) nil)
     ("20" (lemma unique_error) (("20" (grind) nil nil)) nil)
     ("21" (lemma unique_error) (("21" (grind) nil nil)) nil)
     ("22" (lemma unique_error) (("22" (grind) nil nil)) nil)
     ("23" (lemma unique_error) (("23" (grind) nil nil)) nil)
     ("24" (lemma unique_error) (("24" (grind) nil nil)) nil)
     ("25" (lemma unique_error) (("25" (grind) nil nil)) nil)
     ("26" (lemma unique_error) (("26" (grind) nil nil)) nil)
     ("27" (lemma unique_error) (("27" (grind) nil nil)) nil)
     ("28" (lemma unique_error) (("28" (grind) nil nil)) nil)
     ("29" (lemma unique_error) (("29" (grind) nil nil)) nil)
     ("30" (lemma unique_error) (("30" (grind) nil nil)) nil)
     ("31" (lemma unique_error) (("31" (grind) nil nil)) nil)
     ("32" (lemma unique_error) (("32" (grind) nil nil)) nil)
     ("33" (lemma unique_error) (("33" (grind) nil nil)) nil)
     ("34" (lemma unique_error) (("34" (grind) nil nil)) nil)
     ("35" (lemma unique_error) (("35" (grind) nil nil)) nil)
     ("36" (lemma unique_error) (("36" (grind) nil nil)) nil)
     ("37" (lemma unique_error) (("37" (grind) nil nil)) nil)
     ("38" (lemma unique_error) (("38" (grind) nil nil)) nil)
     ("39" (lemma unique_error) (("39" (grind) nil nil)) nil)
     ("40" (lemma unique_error) (("40" (grind) nil nil)) nil)
     ("41" (lemma unique_error) (("41" (grind) nil nil)) nil)
     ("42" (lemma unique_error) (("42" (grind) nil nil)) nil)
     ("43" (lemma unique_error) (("43" (grind) nil nil)) nil)
     ("44" (lemma unique_error) (("44" (grind) nil nil)) nil)
     ("45" (lemma unique_error) (("45" (grind) nil nil)) nil)
     ("46" (lemma unique_error) (("46" (grind) nil nil)) nil)
     ("47" (lemma unique_error) (("47" (grind) nil nil)) nil)
     ("48" (lemma unique_error) (("48" (grind) nil nil)) nil)
     ("49" (lemma unique_error) (("49" (grind) nil nil)) nil)
     ("50" (lemma unique_error) (("50" (grind) nil nil)) nil)
     ("51" (lemma unique_error) (("51" (grind) nil nil)) nil)
     ("52" (lemma unique_error) (("52" (grind) nil nil)) nil)
     ("53" (lemma unique_error) (("53" (grind) nil nil)) nil)
     ("54" (lemma unique_error) (("54" (grind) nil nil)) nil)
     ("55" (lemma unique_error) (("55" (grind) nil nil)) nil)
     ("56" (lemma unique_error) (("56" (grind) nil nil)) nil)
     ("57" (lemma unique_error) (("57" (grind) nil nil)) nil)
     ("58" (lemma unique_error) (("58" (grind) nil nil)) nil)
     ("59" (lemma unique_error) (("59" (grind) nil nil)) nil)
     ("60" (lemma unique_error) (("60" (grind) nil nil)) nil)
     ("61" (lemma unique_error) (("61" (grind) nil nil)) nil)
     ("62" (lemma unique_error) (("62" (grind) nil nil)) nil)
     ("63" (lemma unique_error) (("63" (grind) nil nil)) nil)
     ("64" (lemma unique_error) (("64" (grind) nil nil)) nil)
     ("65" (lemma unique_error) (("65" (grind) nil nil)) nil)
     ("66" (lemma unique_error) (("66" (grind) nil nil)) nil)
     ("67" (lemma unique_error) (("67" (grind) nil nil)) nil)
     ("68" (lemma unique_error) (("68" (grind) nil nil)) nil)
     ("69" (lemma unique_error) (("69" (grind) nil nil)) nil)
     ("70" (lemma unique_error) (("70" (grind) nil nil)) nil)
     ("71" (lemma unique_error) (("71" (grind) nil nil)) nil)
     ("72" (lemma unique_error) (("72" (grind) nil nil)) nil)
     ("73" (lemma unique_error) (("73" (grind) nil nil)) nil)
     ("74" (lemma unique_error) (("74" (grind) nil nil)) nil)
     ("75" (lemma unique_error) (("75" (grind) nil nil)) nil)
     ("76" (lemma unique_error) (("76" (grind) nil nil)) nil)
     ("77" (lemma unique_error) (("77" (grind) nil nil)) nil)
     ("78" (lemma unique_error) (("78" (grind) nil nil)) nil)
     ("79" (lemma unique_error) (("79" (grind) nil nil)) nil)
     ("80" (lemma unique_error) (("80" (grind) nil nil)) nil)
     ("81" (lemma unique_error) (("81" (grind) nil nil)) nil)
     ("82" (lemma unique_error) (("82" (grind) nil nil)) nil)
     ("83" (lemma unique_error) (("83" (grind) nil nil)) nil)
     ("84" (lemma unique_error) (("84" (grind) nil nil)) nil)
     ("85" (lemma unique_error) (("85" (grind) nil nil)) nil)
     ("86" (lemma unique_error) (("86" (grind) nil nil)) nil)
     ("87" (lemma unique_error) (("87" (grind) nil nil)) nil)
     ("88" (lemma unique_error) (("88" (grind) nil nil)) nil)
     ("89" (lemma unique_error) (("89" (grind) nil nil)) nil)
     ("90" (lemma unique_error) (("90" (grind) nil nil)) nil)
     ("91" (lemma unique_error) (("91" (grind) nil nil)) nil)
     ("92" (lemma unique_error) (("92" (grind) nil nil)) nil)
     ("93" (lemma unique_error) (("93" (grind) nil nil)) nil)
     ("94" (lemma unique_error) (("94" (grind) nil nil)) nil)
     ("95" (lemma unique_error) (("95" (grind) nil nil)) nil)
     ("96" (lemma unique_error) (("96" (grind) nil nil)) nil)
     ("97" (lemma unique_error) (("97" (grind) nil nil)) nil)
     ("98" (lemma unique_error) (("98" (grind) nil nil)) nil)
     ("99" (lemma unique_error) (("99" (grind) nil nil)) nil)
     ("100" (lemma unique_error) (("100" (grind) nil nil)) nil)
     ("101" (lemma unique_error) (("101" (grind) nil nil)) nil)
     ("102" (lemma unique_error) (("102" (grind) nil nil)) nil)
     ("103" (lemma unique_error) (("103" (grind) nil nil)) nil)
     ("104" (lemma unique_error) (("104" (grind) nil nil)) nil)
     ("105" (lemma unique_error) (("105" (grind) nil nil)) nil)
     ("106" (lemma unique_error) (("106" (grind) nil nil)) nil)
     ("107" (lemma unique_error) (("107" (grind) nil nil)) nil)
     ("108" (lemma unique_error) (("108" (grind) nil nil)) nil)
     ("109" (lemma unique_error) (("109" (grind) nil nil)) nil)
     ("110" (lemma unique_error) (("110" (grind) nil nil)) nil)
     ("111" (lemma unique_error) (("111" (grind) nil nil)) nil)
     ("112" (lemma unique_error) (("112" (grind) nil nil)) nil)
     ("113" (lemma unique_error) (("113" (grind) nil nil)) nil)
     ("114" (lemma unique_error) (("114" (grind) nil nil)) nil)
     ("115" (lemma unique_error) (("115" (grind) nil nil)) nil)
     ("116" (lemma unique_error) (("116" (grind) nil nil)) nil)
     ("117" (lemma unique_error) (("117" (grind) nil nil)) nil)
     ("118" (lemma unique_error) (("118" (grind) nil nil)) nil)
     ("119" (lemma unique_error) (("119" (grind) nil nil)) nil)
     ("120" (lemma unique_error) (("120" (grind) nil nil)) nil)
     ("121" (lemma unique_error) (("121" (grind) nil nil)) nil)
     ("122" (lemma unique_error) (("122" (grind) nil nil)) nil)
     ("123" (lemma unique_error) (("123" (grind) nil nil)) nil)
     ("124" (lemma unique_error) (("124" (grind) nil nil)) nil)
     ("125" (lemma unique_error) (("125" (grind) nil nil)) nil)
     ("126" (lemma unique_error) (("126" (grind) nil nil)) nil)
     ("127" (lemma unique_error) (("127" (grind) nil nil)) nil)
     ("128" (lemma unique_error) (("128" (grind) nil nil)) nil)
     ("129" (lemma unique_error) (("129" (grind) nil nil)) nil)
     ("130" (lemma unique_error) (("130" (grind) nil nil)) nil)
     ("131" (lemma unique_error) (("131" (grind) nil nil)) nil)
     ("132" (lemma unique_error) (("132" (grind) nil nil)) nil)
     ("133" (lemma unique_error) (("133" (grind) nil nil)) nil)
     ("134" (lemma unique_error) (("134" (grind) nil nil)) nil)
     ("135" (lemma unique_error) (("135" (grind) nil nil)) nil)
     ("136" (lemma unique_error) (("136" (grind) nil nil)) nil)
     ("137" (lemma unique_error) (("137" (grind) nil nil)) nil)
     ("138" (lemma unique_error) (("138" (grind) nil nil)) nil)
     ("139" (lemma unique_error) (("139" (grind) nil nil)) nil)
     ("140" (lemma unique_error) (("140" (grind) nil nil)) nil)
     ("141" (lemma unique_error) (("141" (grind) nil nil)) nil)
     ("142" (lemma unique_error) (("142" (grind) nil nil)) nil)
     ("143" (lemma unique_error) (("143" (grind) nil nil)) nil)
     ("144" (lemma unique_error) (("144" (grind) nil nil)) nil)
     ("145" (lemma unique_error) (("145" (grind) nil nil)) nil)
     ("146" (lemma unique_error) (("146" (grind) nil nil)) nil)
     ("147" (lemma unique_error) (("147" (grind) nil nil)) nil)
     ("148" (lemma unique_error) (("148" (grind) nil nil)) nil)
     ("149" (lemma unique_error) (("149" (grind) nil nil)) nil)
     ("150" (lemma unique_error) (("150" (grind) nil nil)) nil)
     ("151" (lemma unique_error) (("151" (grind) nil nil)) nil)
     ("152" (lemma unique_error) (("152" (grind) nil nil)) nil)
     ("153" (lemma unique_error) (("153" (grind) nil nil)) nil)
     ("154" (lemma unique_error) (("154" (grind) nil nil)) nil)
     ("155" (lemma unique_error) (("155" (grind) nil nil)) nil)
     ("156" (lemma unique_error) (("156" (grind) nil nil)) nil)
     ("157" (lemma unique_error) (("157" (grind) nil nil)) nil)
     ("158" (lemma unique_error) (("158" (grind) nil nil)) nil)
     ("159" (lemma unique_error) (("159" (grind) nil nil)) nil)
     ("160" (lemma unique_error) (("160" (grind) nil nil)) nil)
     ("161" (lemma unique_error) (("161" (grind) nil nil)) nil)
     ("162" (lemma unique_error) (("162" (grind) nil nil)) nil)
     ("163" (lemma unique_error) (("163" (grind) nil nil)) nil)
     ("164" (lemma unique_error) (("164" (grind) nil nil)) nil)
     ("165" (lemma unique_error) (("165" (grind) nil nil)) nil)
     ("166" (lemma unique_error) (("166" (grind) nil nil)) nil)
     ("167" (lemma unique_error) (("167" (grind) nil nil)) nil)
     ("168" (lemma unique_error) (("168" (grind) nil nil)) nil)
     ("169" (lemma unique_error)
      (("169" (grind)
        (("169" (lemma validatePCRs) (("169" (grind) nil nil)) nil))
        nil))
      nil)
     ("170" (lemma unique_error) (("170" (grind) nil nil)) nil)
     ("171" (lemma unique_error) (("171" (grind) nil nil)) nil)
     ("172" (lemma unique_error) (("172" (grind) nil nil)) nil)
     ("173" (lemma unique_error) (("173" (grind) nil nil)) nil)
     ("174" (lemma unique_error) (("174" (grind) nil nil)) nil)
     ("175" (lemma unique_error) (("175" (grind) nil nil)) nil)
     ("176" (lemma unique_error) (("176" (grind) nil nil)) nil)
     ("177" (lemma unique_error) (("177" (grind) nil nil)) nil)
     ("178" (lemma unique_error) (("178" (grind) nil nil)) nil)
     ("179" (lemma unique_error) (("179" (grind) nil nil)) nil)
     ("180" (lemma unique_error)
      (("180" (grind)
        (("180" (lemma validatePCRs)
          (("180" (grind) (("180" (postpone) nil nil)) nil)) nil))
        nil))
      nil)
     ("181" (lemma unique_error)
      (("181" (grind)
        (("181" (lemma validatePCRs)
          (("181" (grind) (("181" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))

