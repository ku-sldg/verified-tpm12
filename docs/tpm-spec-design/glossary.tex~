\chapter{Glossary}
\label{chapt:glossary}

This glossary is intended to document some common acronyms as well as
define some common terms.  It is currently a bit haphazard and a
number of elements are missing.

\section{Trusted Processor Definitions}

\begin{description}
  \parskip=0pt
  \itemsep=\smallskipamount
\item[Process Configuration Register (PCR)] -- Registers defined in
  the TPM or a vTPM.  In the TPM there are at least 16 and they are 20
  bytes wide.
\item[Virtual PCR] -- A PCR located in a vTPM.  There are arbitrarily
  many 20 byte virtual PCRs in a vTPM.
\item[Logical PCR] -- A PCR identifier associated with a measurement
  location, but not associated with a physical or virtual PCR.  This
  is distinct from a Virtual PCR.
\item[Bound to PCR] -- Encryption including PCR values that must match
  TPM PCR values before decryption is performed.
\item[Sealed to State] -- Operation performed by the TPM where data is
  encrypted and bound to PCRs or a PCR composite that must be checked
  before unsealing.  Only data is sealed.
\item[Wrapped Key] -- A wrapped key is an asymmetric key encrypted with
  its public key visible.  Only keys are wrapped.
\item[Inter Virtual Machine Communication (IVC)] -- Communication among virtual
  machines handled in secure fashion by the hypervisor.
\item[Supervisor Virtual Platform (SVP)] -- A collection of TRP
  domains designed to provide basic operating system services to GVPs.
\item[Trusted Platform Module (TPM)] -- Hardware Trusted Platform
  Module as defined by TCG.
\item[Virtual TPM (vTPM)] -- A virtual Trusted Platform Module
\item[Trusted Path] -- A mechanism that provides confidence that the
  user is communicating with what the user intended to communicate
  with.
\item[Virtual Platform (VP)] -- A collection of domains providing
  run-time support for a guest operating system (GVP) or providing OS
  services to other VPs (SVP).
\item[User Virtual Platform (UVP)] - A virtual platform supporting a
  guest operating system minimally consisting of a controller, schema
  and guest operating system.  Also known as a Guest Virtual Platform
  (GVP).
\item[Guest Virtual Platform (GVP)] - A virtual platform supporting a
  guest operating system minimally consisting of a controller, schema,
  and guest operating system.  Also known as a User Virtual Platform
  (UVP).
\item[TRP Compliant UVP (or GVP)] - A virtual platform including a
  vTPM and M\&A domain in addition to a controller and guest operating
  system.
\item[Safely Hashable] - An application is safely-hashable if it can
  be measured without considering contextual information.
\item[Statically Hashable] - An application is statically-hashable if
  it is safely-hashable and need only be measured once when it is
  started.
\item[Reset Hashable] - An application is reset-hashable if after
  taking a measurement it resets itself to the exact same state.
\item[Contextual Inspection] - An application is measurable by
  contextual inspection when its run-time state must be considered
  during measurement.
\item[Certified Key (CK)] - Asymmetric key with private key signed by the
  AIK private key.
\item[Endorsement Key (EK)] - Asymmetric key who's private key is in
  the TPM hardware.  Private key is used to sign data from TPM while
  public key is used to encrypt sensitive data sent to the TPM.  The
  EK is set by the TPM factory and may not be reset.
\item[Virtual Endorsement Key (vEK)] - vTPM equivalent of EK.
\item[Attestation Identity Key (AIK)] - Asymmetric key whose private
  key is used for only two purposes: (i) sign (or attest to) TPM
  internal state; (ii) sign (or certify) other general purpose keys.
  AIKs are generated by a (v)TPM, certified by a trusted third party,
  and used for signing in lieu of the EK.
\item[Virtual Attestation Identity Key (vAIK)] - vTPM equivalent of an
  AIK.  (Note that this has not been formally defined, but would be
  consistent with the existing naming infrastructure.)
\item[Hardware Attestation Identity Key (hAIK)] - AIK used by the TPM.
\item[Storage Root Key (SRK)] - Root of secure storage hierarchy.
  Used to encrypt storage keys that exist outside the TPM.  The SRK
  may be reset.
\item[Virtual Storage Root Key (vSRK)] - vTPM equivalent of SRK.
  (Note that this has not been formally defined, but would be
  consistent with the existing naming infrastructure.)
\item[Attestation Identity Certificate (AIC)] - Certificate
  provided by a trusted third party binding an AIK to a specific
  trusted platform.
\item[Virtual Factory Key (VFK)] - Used by a vTPM Manager when
  producing vTPMs in the same way a factory key is used for a TPM
  producer.
\item[Digest] - 20-byte Value contained in a PCR.
\item[PCR Composite] - Single digest value generated from a collection
  of PCR values.
\item[Quote] - A value along with a set of PCR values or PCR composite
  signed by a TPM or vTPM using an AIK.
\item[Root of Trust for Measurement (RTM)] - the ``place to stand''
  for measurement.  Effectively a hardware-based trusted launch point
  that will faithfully measure, start and pass control to its target
  without trusting other components.
\item[Virtual Root of Trust for Measurement (vRTM)] - a virtual RTM
  established for a UVP whose trust chain is rooted on the RTM.
\item[Root of Trust for Storage (RTS)] - the ``place to stand'' for
  measurement storage.  Effectively a trusted hardware store that will
  store measurements with integrity without trusting other components.
\item[Virtual Root of Trust for Storage (vRTS)] - virtual RTS
  established for a UVP whose trust chain is rooted on the RTS.
\item[Root of Trust for Reporting (RTR)] - the ``place to stand'' for
  generating quotes and providing evidence with integrity and
  authenticity.  Effectively a trusted hardware component that
  generates and signs quotes.
\item[Virtual Root of Trust for Reporting (vRTR)] - virtual RTR
  established for a UVP whose trust chain is rooted on the RTR.
\item[Driver Back-End] - The portion of a Xen-style split driver
  running in a privileged domain handling the physical device.  There
  is typically one back-end for a physical device.
\item[Driver Front-End] - The portion of a Xen-style split driver
  running in an unprivileged domain acting as a proxy upon the
  back-end.  There may exist multiple front-ends allowing access to a
  physical device by several virtual platforms.
\item[Xen Hypervisor Integrity Measurer (XHIM)] - Hypervisor
  remeasurer.
\item[Deep Attestation] - Attestation rooted in hardware roots of trust.
\end{description}

\section{Cryptography Notations}

\begin{description}
  \itemsep=0pt
  \parskip=\smallskipamount
\item[Hash Notation] $\hash{data}$ - The hash of $data$.
\item[Certificate Notation] $\cert{cert}{key}$ - Certificate, $cert$, signed by
  $key$.
\item[Signed Data Notation] $\sign{data}{key}$ - $data$, signed by $key$.
\item[Encrypted Data Notation] $\encrypt{data}{key}$ - $data$
  encrypted with $key$.
\item[Sealed Data Notation] $\seal{data}{pcrs}$ - $data$ sealed to
  $pcrs$.
\item[Wrapped Key Notation] $\wrap{k}{pcrs}$ - Equivalent to the key
  pair $(\seal{\private{k}}{pcrs},\public{k})$
\end{description}

\section{Intel Secure Boot}

\begin{description}
  \itemsep=0pt
  \parskip=\smallskipamount
\item[Trusted eXecution Technology (TXT)] - Intel's trusted boot
  support.
\item[Measured Launch Environment (MLE)] - Run time environment
  providing a measured boot.  Initialized and started by the SINIT
  command execution.
\item[SENTER or GETSEC] - Intel's trusted boot command.  Provides
  synchronization, special bus cycles, and a special environment
  residing on the CPU (ACEA).
\item[Secure INITialization Instructions (SINIT)] - Code for
  performing secure initialization.  Loaded by SENTER and validated by
  the ACM.
\item[Authenticated Code Execution Area (ACEA)] - CPU resident
  environment for executing code known as the Authenticated Code
  Module (ACM).  Boot sequence involving SENTER and SINIT is as
  follows:

  \begin{enumerate}
    \parskip=0pt\itemsep=0pt
  \item Load SINIT and MLE into memory
  \item Invoke SENTER (GETSEC)
  \item Establish special environment (ACEA)
  \item Load SINIT into ACEA
  \item Validate SINIT digital signature and store SINIT identity in
    TPM
  \item SINIT measures MLE in memory and stores MLE identity in TPM
  \item SINIT passes control to MLE
  \end{enumerate}

\item[Authenticated Code Module (ACM)] - Code running in the ACEA. May
  be used for validating platform configuration, measuring the
  measured launch environment, cleaning up after crashes.
\end{description}

\section{Attic}

% \todo{What is assured about MAC Policy and how is it secured?
%   \emph{The policy will be sealed (to TPM state?) to protect integrity.}}

% \todo{How and when is MAC policy updated?
%   \emph{Transfer is given to the base policy from the boot policy just after  
%     a vTPM is created.}}

% \todo{Carlos suggests the VP builder is separate from the Domain
%   Builder. \emph{There is now a Controller that is supposed to perform
%   VP building.  At least it builds SVP.}}

% \todo{Is there a VP Builder separate from the Domain Builder?
%   \emph{Yes, probably (tomorrow).}}

% \todo{What SVP domain manifests are in SVP Storage?
%   \emph{All of them.}}

% \todo{What domains does the Domain Builder measure?
%   \emph{All SVP domains, and all others you care about.}}

% \todo{What hard-wired connections are made by the Domain Builder?
%   \emph{To the Name Service, maybe to the Domain Builder and vTPM in the SVP.}}

% \todo{Are all vTPM domains measured into the vTPM Manager?  \emph{Yes.}}

% \todo{Are measurements from the TPM accessed through vTPM instances?
%   \emph{Maybe -- platform dependent and governed by the MAC policy.}}

% \todo{What is in persistent vTPM Data and how is it secured?
%   \emph{To be answered tomorrow, but yes, it should be secured. -
%     secured using key sealed to state.}}

% \todo{Should Name Services or SVP Storage be in this picture?
%   \emph{Name Services should hopefully be measured into a vTPM.  The SVP  
%     Storage should definitely not be measured into a TPM.}}

% \todo{Do manifests ever contain MAC policy elements?  \emph{They're
%   distinct.}}

% \todo{When does measurement into the TPM cease?  \emph{After the vTPM
%   Manager is up.  However, hypervisor remeasurement may continue to go
%   to the TPM.}}

% \todo{SINIT does measurement.  Need to describe distinction between
%   SENTER and SINIT.  SENTER starts things while SINIT performs
%   measurement.}

% \todo{Add SINIT line and measured into hardware line in pictures.}

% \todo{Add grouping of vTPM Manager and vTPM Driver}

% \todo{Split vTPM Data into manager and instance data}

% \todo{Why can't integrity be w.r.t. a set of subjects, too?  The
%   intuitive meaning would be that no subject outside the set can
%   modify the data, but those subjects can modify it.}

% \todo{Why can't availability be dynamic?  How do I express ``object
%   $a$ trusts that subject $b$ makes object $i$ available to subjects
%   $c,d$ (and no other subjects)?''  This would be handy for expressing
%   properties of vTPMs, for example.}

% \todo{Does SINIT/SENTER have anything to do with the TCG's
%   specification of the TPM?  Isn't this separate Intel IP?}

% \todo{Isn't this only for the boot of the hypervisor, not processes?
%   -- yes}

% \todo{Add footnote about separate vTPM Manager and TPM Driver domains.}

% \todo{Bulletproof evidence
%   seems over-stated.  Trustworthiness seems to be to be not only the
%   relationship between a subject and object but also of body of
%   evidence for that trustworthiness.}

% \todo{What is ``secure'' about SVP Storage?  \emph{Integrity and some
%     confidentiality}}

% \todo{What UVP manifest information is in SVP Storage?  \emph{Defined
%     in higher partitions.}}

% \todo{Is there a formal relationship between SVP's Measurement and
%   Attestation Domains?  \emph{Not sure if the M \& A domains should be
%   different.}}

% \todo{What domains are mandatory for UVPs?  \emph{Not clear.  Maybe just
%   guest host.  Maybe NitPicker client?}}

% \todo{How does the Domain Builder handle failure before the Controller
%   is available?  I.e. if the vTPM Manager image fails authenticated.
%   \emph{Boot fails.  Liveness is not an issue in TRP.}}
